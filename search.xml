<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>408数据结构一轮笔记</title>
    <url>/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1.绪论"></a>1.绪论</h1><h2 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a>数据结构基本概念</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ul>
<li><p>数据</p>
<p>数据是<strong>信息的载体</strong>，是描述客观事物属性的数、字符及所有能输入到计算机 中<strong>并被计算机程序识别和处理</strong>的符号的集合。数据是计算机程序加工的原料。</p>
</li>
<li><p>数据元素、数据项</p>
<p><strong>数据元素</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。 一个数据元素可由若干数据项组成，<strong>数据项</strong>是构成数据元素的不可分割的最小单位。</p>
</li>
<li><p>数据对象</p>
<p>数据对象是<strong>具有相同性质</strong>的数据元素的集合，是数据的一个子集。</p>
</li>
<li><p>数据类型</p>
<p>数据类型是一个值的集合和定义在刺激和上的一组操作的总称</p>
<ul>
<li>原子类型。其值不可再分的数据类型</li>
<li>结构类型。其值可以再分为若干成分的数据类型</li>
<li>抽象数据类型（ADT）。抽象数据组织及与之相关的操作。</li>
</ul>
</li>
<li><p>数据结构</p>
</li>
</ul>
<p>​        数据结构是相互之间存在<strong>一种或多种特定关系</strong>的数据元素的集合。</p>
<h3 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a>数据结构三要素</h3><h4 id="1-逻辑结构"><a href="#1-逻辑结构" class="headerlink" title="1.逻辑结构"></a>1.逻辑结构</h4><p>​    <strong>与数据的存储无关，独立于计算机。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203231041042.png" alt="image-20220323104111878"></p>
<h4 id="2-存储结构（物理结构）"><a href="#2-存储结构（物理结构）" class="headerlink" title="2.存储结构（物理结构）"></a>2.存储结构（物理结构）</h4><ul>
<li><p>顺序存储</p>
<p>把逻辑上相邻的元素存储在物理位置 上也相邻的存储单元中，元素之间的关系由存储 单元的邻接关系来体现。<strong>优点：实现随机存取；缺点：只能使用相邻的一整块存储单元，可能会产生外部碎片。</strong></p>
</li>
<li><p>链式存储</p>
<p>逻辑上相邻的元素在物理位置上<strong>可以 不相邻</strong>，借助指示元素存储地址的指针来表示元 素之间的逻辑关系。<strong>优点：不会出现碎片现象，充分利用所有存储单元；缺点：每个元素因存储指针占用额外的存储单元，且只能实现顺序存取。</strong></p>
</li>
<li><p>索引存储</p>
<p>在存储元素信息的同时，还建立附加 的索引表。索引表中的每项称为索引项，索引项 的一般形式是（关键字，地址）。<strong>优点：检索速度快；缺点：附加的索引表占用额外空间。</strong></p>
</li>
<li><p>散列存储</p>
<p>根据元素的关键字直接计算出该元素 的存储地址，又称哈希（Hash）存储。<strong>优点：检索、增加、删除节点速度都很快；缺点：若散列函数不好，可能出现元素存储单元的冲突，解决冲突会增加时间开销。</strong></p>
</li>
</ul>
<h4 id="3-数据运算"><a href="#3-数据运算" class="headerlink" title="3.数据运算"></a>3.数据运算</h4><p>​    针对于某种逻辑结构，结合实际需求，定义基本运算。<strong>运算的定义针对逻辑结构，运算的实现针对存储结构。</strong></p>
<h2 id="算法和算法评价"><a href="#算法和算法评价" class="headerlink" title="算法和算法评价"></a>算法和算法评价</h2><h3 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h3><p><strong>算法（Algorithm）是对特定问题求解步骤的一种描述</strong>，它是指令的有限序列，其中的每条指令 表示一个或多个操作</p>
<p><em><strong>程序=数据结构+算法</strong></em></p>
<h4 id="算法的5个重要特性"><a href="#算法的5个重要特性" class="headerlink" title="算法的5个重要特性"></a>算法的5个重要特性</h4><ul>
<li>有穷性。一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。  <strong>注：算法必须是有穷的，而程序可以是无穷的</strong></li>
<li>确定性。算法中每条指令必须有确切的含义，对于<strong>相同的输入</strong>只能得出<strong>相同的输出</strong>。</li>
<li>可行性。算法中描述的操作都可以通过<strong>已经实现的基本运算执行有限次</strong>来实现。 </li>
<li>输入。一个算法有<strong>零个或多个输入</strong>，这些输入取自于某个特定的对象的集合。</li>
<li> 输出。一个算法有<strong>一个或多个输出</strong>，这些输出是与输入有着某种特定关系的量</li>
</ul>
<p>“好”算法的特质</p>
<ul>
<li>正确性。算法应能够正确地解决求解问题。</li>
<li>可读性。算法应具有良好的可读性，以帮助人们理解。</li>
<li>健壮性。输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li>
<li>高效率与低存储量需求。</li>
</ul>
<h3 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h3><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>​        一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频度之和记为T(n)，它是该算法问题规模n的函数，时间复杂度主要分析T(n)的数量级。算法中基本运算（最深层循环内的语句）的频度与T(n)同数量级，因此通常采用算法中基本运算的频度f(n)来分析算法的时间复杂度。因此，算法的时间复杂度记为<br>$$<br>T(n)=O(f(n))<br>$$<br>取f(n)中<strong>随n增长最快的项</strong>，将其系数置为1作为时间复杂度的度量。<br>$$<br>O(1)&lt;O\left(\log <em>{2} n\right)&lt;O(n)&lt;O\left(n log</em>{2} n\right)&lt;O\left(n^{2}\right)&lt;O\left(n^{3}\right)&lt;O\left(2^{n}\right)&lt;O(n !)&lt;O\left(n^{n}\right)<br>$$</p>
<ol>
<li><p>加法规则<br>$$<br>T(n)=T_{1}(n)+T_{2}(n)=O(f(n))+O(g(n))=O(\max (f(n), g(n)))<br>$$</p>
</li>
<li><p>乘法规则</p>
</li>
</ol>
<p>$$<br>T(n)=T_{1}(n) \times T_{2}(n)=O(f(n)) \times O(g(n))=O(f(n) \times g(n))<br>$$</p>
<p>结论：</p>
<ul>
<li>顺序执行的代码只会 影响常数项，可以忽略</li>
<li>只需挑循环中的一个 基本操作分析它的执行次数 与 n 的关系即可</li>
<li>如果有多层嵌套循环， 只需关注最深层循环循环了几次</li>
</ul>
<p>最坏时间复杂度：最坏情况下算法的时间复杂度 </p>
<p>平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间 </p>
<p>最好时间复杂度：最好情况下算法的时间复杂度</p>
<h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><p><strong>只需关注存储空间大小 与问题规模相关的变量</strong></p>
<p>算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它是问题规模n的函数。记为<br>$$<br>S(n)=O(g(n))<br>$$<br>一个程序在执行时除需要存储空间来存放本身所用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为实现计算所需信息的辅助空间。若输入数据所占空间只取决于问题本身，和算法无关，则只需分析除输入和程序之外的额外空间。</p>
<p><strong>算法原地工作是指算法所需的辅助空间为常量，即O(1)。</strong></p>
<p><strong>一般函数递归带来的空间复杂度位递归调用的深度</strong></p>
<h1 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2.线性表"></a>2.线性表</h1><p>线性表是具有<strong>相同数据类型</strong>的n （n≥0）个数据元素的<strong>有限序列</strong></p>
<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>顺序表-用顺序存储的方式实现线性表。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关 系由存储单元的邻接关系来体现。<strong>逻辑顺序与物理顺序相同。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203231125225.png" alt="image-20220323112548146"></p>
<h3 id="顺序表实现"><a href="#顺序表实现" class="headerlink" title="顺序表实现"></a>顺序表实现</h3><h4 id="静态分配"><a href="#静态分配" class="headerlink" title="静态分配"></a>静态分配</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MaxSize 100
typedef struct &#123;
    int data[MaxSize];&#x2F;&#x2F;静态数组存放数据元素
    int length;
&#125;SqList;&#x2F;&#x2F;静态分配顺序表 内存满了无能为力<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>静态分配 给各个数据元素分配连续的存储空间 大小为maxsize*sizeof(int)</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InitList(SqList &amp;l)
&#123;
    for(int i&#x3D;0;i&lt;MaxSize;i++)&#x2F;&#x2F;静态下 设置所有初始值为0
        l.data[i]&#x3D;0;
    l.length&#x3D;0 ;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for (int i &#x3D; 0; i &lt; MaxSize; i++)
   &#123;
       printf(&quot;data[%d]&#x3D;%d\n&quot;,i , L.data[i]);
   &#125;&#x2F;&#x2F;错误 内存中遗留脏数据 没有分配内存 且访问数据表应该i&lt;L.length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>若不为线性表设置初始值，会输出乱码。。</p>
<h4 id="动态分配"><a href="#动态分配" class="headerlink" title="动态分配"></a>动态分配</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define InitSize 10&#x2F;&#x2F;初始长度
typedef struct 
&#123;
    int *data;&#x2F;&#x2F;利用指针动态分配
    int MAXSIZE;&#x2F;&#x2F;最大容量
    int length;&#x2F;&#x2F;当前长度
&#125;SqList;&#x2F;&#x2F;动态分配顺序表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void IncreaseSize(SqList &amp;l, int len)&#x2F;&#x2F;增加动态数组长度
&#123;
    int *p&#x3D;l.data;&#x2F;&#x2F;p指针接收旧存储空间
    l.data &#x3D; new int[l.MAXSIZE + len];&#x2F;&#x2F;分配增加表长后的内存空间
    for(int i&#x3D;0;i&lt;l.length;i++)
    &#123;
        l.data[i]&#x3D;p[i];&#x2F;&#x2F;数据复制到新区域
    &#125;
    l.MAXSIZE &#x3D; l.MAXSIZE + len;&#x2F;&#x2F;表最大长度增加len
    delete p;&#x2F;&#x2F;释放原有内存空间
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InitList(SqList &amp;l)
&#123;
    l.data &#x3D; new int [InitSize];&#x2F;&#x2F;申请一片连续的存储空间
    l.length &#x3D; 0;
    l.MAXSIZE &#x3D; InitSize;&#x2F;&#x2F;最大值为初始值
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>==顺序表特点==</p>
<p>①随机访问，即可以在 O(1) 时间内找到第 i 个元素。 </p>
<p>②存储密度高，每个节点只存储数据元素 </p>
<p>③拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高） </p>
<p>④插入、删除操作不方便，需要移动大量元素</p>
<h4 id="顺序表的插入"><a href="#顺序表的插入" class="headerlink" title="顺序表的插入"></a>顺序表的插入</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListInsert(SqList &amp;l,int i,int  e)&#x2F;&#x2F;插入操作。在表L中的第i个位置上插入指定元素e
&#123;
    if(i&lt;1||i&gt;l.length+1)&#x2F;&#x2F;判断插入范围 可插入最后一个
        return false;
    if(l.length&gt;l.MAXSIZE)
        return false;
    if(l.length&#x3D;&#x3D;l.MAXSIZE)
        IncreaseSize(l,1);
    for(int j&#x3D;l.length;j&gt;&#x3D;i;j--)&#x2F;&#x2F;从表后遍历
    &#123;
        l.data[j]&#x3D;l.data[j-1];
    &#125;
    l.data[i-1]&#x3D;e;
    l.length++;
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最好情况：新元素插入到表尾，不需要移动元素 i = n+1，循环0次；最好时间复杂度 = O(1) </p>
<p>最坏情况：新元素插入到表头，需要将原有的 n 个元素全都向后移动 i = 1，循环 n 次；最坏时间复杂度 = O(n); </p>
<p>平均情况：平均时间复杂度 = O(n)</p>
<h4 id="顺序表的删除"><a href="#顺序表的删除" class="headerlink" title="顺序表的删除"></a>顺序表的删除</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListDelete(SqList &amp;l, int i, int &amp;e)&#x2F;&#x2F;删除操作。删除表L中第i个位置的元素，
&#x2F;&#x2F;并用e返回删除元素的值。
&#123;
    if(i&lt;1||i&gt;l.length)
        return false;
    e &#x3D; l.data[i-1];&#x2F;&#x2F;删除元素赋给e
    for(int j&#x3D;i;j&lt;l.length;j++)&#x2F;&#x2F;向后遍历
    &#123;
        l.data[j-1]&#x3D;l.data[j];
    &#125;
    l.data[l.length]&#x3D;0;
    l.length--;
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注：注意引用“&amp;”的作用</strong></p>
<p>时间复杂度与插入相同。</p>
<h4 id="顺序表的查找"><a href="#顺序表的查找" class="headerlink" title="顺序表的查找"></a>顺序表的查找</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; 按位查找：查找第i个位置的元素
int GetElem(SqList &amp;L, int i) &#123;
    return L.data[i - 1];
&#125;

&#x2F;&#x2F; 按值查找：查找值为i的元素位置
int LocateElem(SqList &amp;L, int i) &#123;
    for (int j &#x3D; 0; j &lt; L.length; j++) &#123;
        if (L.data[j] &#x3D;&#x3D; i) &#123;
            return j + 1;
        &#125;
    &#125;
    return 0; &#x2F;&#x2F; 没有查找到则返回0
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>按位查找时间复杂度O(1)</p>
<p>按值查找时间复杂度O(n)</p>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>线性表的链式存储又称单链表。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203231203920.png" alt="image-20220323120333833"></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LNode&#123;
    int data;&#x2F;&#x2F;存放一个数据元素
    struct LNode *next;&#x2F;&#x2F;指向下一节点的指针
&#125;LNode,*LinkList;&#x2F;&#x2F;LNode *等价 LinkList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;不带头节点的单链表
bool InitList(LinkList &amp;l)
&#123;
    l &#x3D;NULL;&#x2F;&#x2F;定义空表 防止内存脏数据
    return true;
&#125;
bool Empty(LinkList l)&#x2F;&#x2F;判断链表是否为空
&#123;
    return(l&#x3D;&#x3D;NULL);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;带头节点的单链表 
bool InitList(LinkList &amp;l)
&#123;
    l &#x3D; new LNode;
    if (l&#x3D;&#x3D;NULL)
    &#123;
        return false;
    &#125;
    l-&gt;next &#x3D;NULL;
    &#x2F;&#x2F;l-&gt;next &#x3D; l&#x2F;&#x2F;循环单链表
    return true; 
&#125;
bool Empty(LinkList l)&#x2F;&#x2F;判断链表是否为空
&#123;
    return(l-&gt;next&#x3D;&#x3D;NULL);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>带头结点的单链表 头节点不存放数据 只是为了操作方便</p>
<h3 id="单链表的插入和删除"><a href="#单链表的插入和删除" class="headerlink" title="单链表的插入和删除"></a>单链表的插入和删除</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool InsertNextNode(LinkList p,int e)&#x2F;&#x2F;后插 在p节点 后插入元素e O(1)
&#123;
    if(p&#x3D;&#x3D;NULL)
        return false;
    LNode *s &#x3D; new LNode;
    if(s&#x3D;&#x3D;NULL)&#x2F;&#x2F;防止内存分配失败
        return false;
    s-&gt;data &#x3D; e;&#x2F;&#x2F;顺序不能错
    s-&gt;next &#x3D; p-&gt;next;
    p-&gt;next &#x3D; s;
    return true;
&#125;

bool InsertList(LinkList &amp;l, int i, int e)&#x2F;&#x2F;在第i个位置插入元素e O(n)
&#123;
    if(i&lt;1)
        return false;
    &#x2F;&#x2F;为不带头节点 多加的代码主义第一个节点的情况
    &#x2F;&#x2F; if(i&#x3D;&#x3D;1)
    &#x2F;&#x2F; &#123;
    &#x2F;&#x2F;     LNode *s &#x3D;new LNode;
    &#x2F;&#x2F;     s-&gt;data &#x3D; e;
    &#x2F;&#x2F;     s-&gt;next&#x3D; l;
    &#x2F;&#x2F;     l&#x3D; s;
    &#x2F;&#x2F;     return true;
    &#x2F;&#x2F; &#125;
    LNode *p &#x3D;GetElem(l,i-1);
    return InsertNextNode(p,e);
&#125;

bool InsertPriorNode(LNode *p,int e)&#x2F;&#x2F;在p节点之前插入元素e O(1)
&#123;
    if(p&#x3D;&#x3D;NULL)
        return false;
    LNode *s &#x3D; new LNode;
    if(s&#x3D;&#x3D;NULL)
        return false;
    s-&gt;next &#x3D; p-&gt;next;&#x2F;&#x2F;偷天换日
    p-&gt;next &#x3D; s;
    s-&gt;data &#x3D; p-&gt;data;
    p-&gt;data &#x3D; e;
    return true;
&#125;&#x2F;&#x2F;大概思路是后插s节点，把s节点变成p节点，前p节点变成元素e


bool ListDelete(LinkList &amp;l, int i ,int &amp;e)&#x2F;&#x2F;删除表中第i个位置的元素 O(n)
&#123;
    if(i&lt;1)
        return false;
    LNode *p &#x3D; GetElem(l,i-1);
    if(p&#x3D;&#x3D;NULL)
        return false;
    LNode *q &#x3D; p-&gt;next;
    e &#x3D; q-&gt;data;
    p-&gt;next &#x3D; q-&gt;next;
    delete q;
    return true;
&#125;
bool DeleteNode(LNode *p)&#x2F;&#x2F;删除指定节点p O(1)
&#123;
    if(p&#x3D;&#x3D;NULL)
        return false;
    LNode *q &#x3D; p-&gt;next;&#x2F;&#x2F;注：如果p是最后一个节点，第二行会出现问题 此时只能给出头指针从前往后寻找o（n）
    p-&gt;data &#x3D; q-&gt;data;
    p-&gt;next &#x3D; q-&gt;next;
    delete q;
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单链表的查找"><a href="#单链表的查找" class="headerlink" title="单链表的查找"></a>单链表的查找</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LNode * GetElem(LinkList l,int i)&#x2F;&#x2F;O(n) 按位查找
&#123;
    if(i&lt;0)
        return NULL;
    LNode *p;&#x2F;&#x2F;指针p指向当前扫描到的节点
    int j&#x3D;0;&#x2F;&#x2F;记录当前指向的是第几个节点（不带头结点时j&#x3D;1）
    p &#x3D; l;
    while(p!&#x3D;NULL&amp;&amp;j&lt;i)
    &#123;
        p&#x3D;p-&gt;next;
        j++;
    &#125;
    return p;
&#125;

LNode * LocateElem(LinkList l,int e)&#x2F;&#x2F;按值查找 直至找到&#x3D;&#x3D;e节点 O(n)
&#123;
    LNode *p &#x3D; l-&gt;next;
    while(p!&#x3D;NULL&amp;&amp;p-&gt;data!&#x3D;e)
        p&#x3D;p-&gt;next;
    return p;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int Length(LinkList l)&#x2F;&#x2F;表长
&#123;
    LNode *p &#x3D; l;
    int len&#x3D;0;
    while (p-&gt;next !&#x3D;NULL)
    &#123;
        p&#x3D;p-&gt;next;
        len++;
    &#125;
    return len;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单链表的建立"><a href="#单链表的建立" class="headerlink" title="单链表的建立"></a>单链表的建立</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList List_TailInsert(LinkList &amp;l)&#x2F;&#x2F;正向尾插法建立单链表 O(n)
&#123;
    int x;
    l &#x3D; new LNode;&#x2F;&#x2F;建立头节点l
    l-&gt;next &#x3D; NULL;
    LNode *r&#x3D;l,*s;&#x2F;&#x2F;r为尾指针
    cin&gt;&gt;x;
    while (x!&#x3D;-1)&#x2F;&#x2F;让-1作为链表结束的值
    &#123;
        s &#x3D; new LNode;
        s-&gt;data &#x3D; x;
        r-&gt;next &#x3D; s;
        r &#x3D; s;&#x2F;&#x2F;指向新建的节点
        cin&gt;&gt;x;
    &#125;
    r-&gt;next &#x3D; NULL;&#x2F;&#x2F;尾指针节点为空
    return l;  
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList List_HeadInsert(LinkList &amp;l)&#x2F;&#x2F;头插法建立链表 其实是输入顺序的逆序！！
&#123;
    int x;
    LNode *s;
    l &#x3D; new LNode;
    l-&gt;next &#x3D;NULL;
    cin&gt;&gt;x;
    while (x!&#x3D;-1)
    &#123;
        s &#x3D; new LNode;
        s-&gt;data &#x3D; x;
        s-&gt;next &#x3D; l-&gt;next;
        l-&gt;next &#x3D; s;
        cin&gt;&gt;x;
    &#125;
    return l;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><p>双链表节点中有两个指针next和prior，分别指向后继节点和前驱节点</p>
<p>单链表：无法逆向检索，有时候不太方便 </p>
<p>双链表：可进可退，存储密度更低一丢丢</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct DNode&#123;
    int data;
    struct DNode *prior,*next;
&#125;DNode,*DLinkList;

bool InitDLinkList(DLinkList &amp;l)
&#123;
    l &#x3D; new DNode;
    if(l &#x3D; NULL)
        return false;
    l-&gt;next &#x3D; NULL;
    l-&gt;prior &#x3D; NULL;
    &#x2F;&#x2F; l-&gt;next &#x3D; l;循环双链表
    &#x2F;&#x2F; l-&gt;prior &#x3D; l;
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="双链表的插入"><a href="#双链表的插入" class="headerlink" title="双链表的插入"></a>双链表的插入</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool InsertNextNode(DNode *p, DNode *s)&#x2F;&#x2F;在p节点后加s节点
&#123;
    if(p&#x3D;&#x3D;NULL||s&#x3D;&#x3D;NULL)
        return false;
    s-&gt;next &#x3D; p-&gt;next;
    if(p-&gt;next!&#x3D;NULL)&#x2F;&#x2F;防止p是最后一个节点
        p-&gt;next-&gt;prior &#x3D; s;
    s-&gt;prior &#x3D; p;
    p-&gt;next &#x3D; s;
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="双链表的删除"><a href="#双链表的删除" class="headerlink" title="双链表的删除"></a>双链表的删除</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool DeleteNextNode(DNode *p)&#x2F;&#x2F;删除p节点的后继节点
&#123;
    if(p&#x3D;&#x3D;NULL)
        return false;
    DNode *q &#x3D; p-&gt;next;
    if(q&#x3D;&#x3D;NULL)
        return false;
    p-&gt;next &#x3D; q-&gt;next;
    if(q-&gt;next!&#x3D;NULL)
        q-&gt;next-&gt;prior &#x3D; p;
    delete q;
    return true;
&#125;

void DestroyList(DLinkList &amp;l)&#x2F;&#x2F;销毁链表
&#123;
    while (l-&gt;next!&#x3D;NULL)
    &#123;
        DeleteNextNode(l);
    &#125;
    delete l;
    l &#x3D; NULL;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>表位指针不指向NULL，指向头节点。</p>
<p>初始化时改为l-&gt;next = l;即可。</p>
<p>循环单链表从一个结点出发可以找到其他任何一个节点。</p>
<p>循环双链表头节点的prior指针指向尾节点，尾节点的next指针指向头节点。</p>
<p>初始化时l-&gt;next=l;l-&gt;prior=l;</p>
<p>基本操作与上述相同；</p>
<h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><p>静态链表借助数组来描述线性表的链式存储结构，结点也有数据域data和指针域next，与前面所讲的链表中的指针不同的是，<strong>这里的指针是结点的相对地址（数组下标)，又称游标</strong>。和顺序表一样，<strong>静态链表也要预先分配一块连续的内存空间。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203231609891.png" alt="image-20220323160914788"></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAXSIZE 10
typedef struct Node&#123;
    int data;
    int next;&#x2F;&#x2F;下一个元素的下标
&#125;SLinkList [MAXSIZE];&#x2F;&#x2F;可用 SLinkList 定义“一个长度为 MaxSize 的Node 型数组”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>优点：增、删 操作不需要大量移动元素 </p>
<p>缺点：不能随机存取，只能从头结点开始依次往后查找；容量固定不可变</p>
<h2 id="顺序表和链表的比较"><a href="#顺序表和链表的比较" class="headerlink" title="顺序表和链表的比较"></a>顺序表和链表的比较</h2><ul>
<li>逻辑结构</li>
</ul>
<p>​        都属于线性表，都是线性结构</p>
<ul>
<li><p>存储结构（顺序表/链表）</p>
<p><strong>优点：支持随机存取、存储密度高</strong> </p>
<p><strong>缺点：大片连续空间分配不方便，改变容量不方便</strong> </p>
<p><strong>优点：离散的小空间分配方便，改变容量方便</strong> </p>
<p><strong>缺点：不可随机存取，存储密度低</strong></p>
</li>
<li><p>空间分配</p>
<p>顺序表：需要<strong>预分配大片连续空间</strong>。 若分配空间过小，则之后不 方便拓展容量；若分配空间 过大，<strong>则浪费内存资源</strong></p>
<p>链表：只需分配一个头结点（也可 以不要头结点，只声明一个 头指针），<strong>之后方便拓展</strong></p>
</li>
<li><p>增/删</p>
<p>顺序表：</p>
<p>插入/删除元素要将后续元素都后移/前移 </p>
<p>时间复杂度 O(n)，时间开销主要来自移动元素 </p>
<p>若数据元素很大，所需时间代价很高</p>
<p>链表：</p>
<p>修改指针即可；</p>
<p>时间复杂度 O(n)，时间开销主要来自查找目标元素</p>
<p><strong>查找元素代价更低。</strong></p>
</li>
<li><p>查</p>
<p>顺序表：按位查找：O(1) 按值查找：O(n) </p>
<p><strong>若表内元素有序，可在 O(log2n) 时间内找到</strong>。</p>
<p>链表：按位查找/按值查找均为O(1) </p>
</li>
</ul>
<p>综上：</p>
<p>​    表长难以预估，经常增加/删除元素     —-链表</p>
<p>​    表长可预估，查询（搜索）操作较多   —-顺序表</p>
<h1 id="3-栈，队列和数组"><a href="#3-栈，队列和数组" class="headerlink" title="3.栈，队列和数组"></a>3.栈，队列和数组</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>栈（stack）是==只允许在一端进行插入或删除==的线性表</strong></p>
<p>逻辑结构：与普通线性表相同</p>
<p>栈顶：允许进行插入和删除的那一端</p>
<p>栈底：固定的，不允许插入和删除的那一端</p>
<p>空栈：不含任何元素的空表</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204011617825.png" alt="image-20220401161721665"></p>
<p>操作特性：<strong>先进后出（LIFO)</strong></p>
<p><strong>数学性质：</strong></p>
<p>n个不同元素进栈，<strong>出栈元素不同排列的个数为$\frac{1}{n+1} C_{2 n}^{n}$（称为卡特兰数）</strong></p>
<h3 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAXSIZE 10&#x2F;&#x2F;定义栈中元素最大个数
typedef struct &#123;
    int data[MAXSIZE];&#x2F;&#x2F;静态数组存放栈中元素
    int top;&#x2F;&#x2F;栈顶指针
&#125;SqStack;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="基本操作——初始化、栈空判断-复杂度均为O（1）"><a href="#基本操作——初始化、栈空判断-复杂度均为O（1）" class="headerlink" title="基本操作——初始化、栈空判断  复杂度均为O（1）"></a>基本操作——初始化、栈空判断  复杂度均为O（1）</h4><p><strong>(以下操作默认栈顶指针top指向-1即栈顶元素)</strong> 若top为0即指向栈顶元素下一个单元，语句将变化</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InitStack(SqStack &amp;s)&#x2F;&#x2F;初始化
&#123;
    s.top &#x3D; -1;&#x2F;&#x2F;初始化栈顶指针为-1
&#125;


bool IsEmpty(SqStack s)&#x2F;&#x2F;判断是否为空栈
&#123;
    if(s.top&#x3D;&#x3D;-1)
        return true;
    else
        return false;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>栈长：s.top+1;</p>
<p><strong>进栈操作</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;进栈操作
bool Push(SqStack &amp;s, int x)
&#123;
    if(s.top &#x3D;&#x3D; MAXSIZE - 1)
        return false;
    s.data[++s.top] &#x3D; x;&#x2F;&#x2F;++s.top先执行  等价于s.top&#x3D;s.top+1;s.data[s.top]&#x3D;x
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>出栈操作</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;出栈操作
bool Pop(SqStack &amp;s, char &amp;x)
&#123;
    if(s.top&#x3D;&#x3D;-1)
        return false;
    x &#x3D; s.data[s.top--];&#x2F;&#x2F;s.top--后执行 等价于x&#x3D;s.data[s.top]; s.top&#x3D;s.top-1;
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>读栈顶元素</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;读栈顶元素
bool GetTop(SqStack &amp;s, char &amp;x)
&#123;
    if(s.top&#x3D;&#x3D;-1)
        return false;
    x&#x3D;s.data[s.top];
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h4><p>​    利用栈底位置相对不变的特性，可让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204011636264.png" alt="image-20220401163655136"></p>
<p>​    两个栈的栈顶指针都指向栈顶元素，top0=-1时0号栈为空，top1=MaxSize时1号栈为空;<strong>仅当两个栈顶指针相邻（top1-top0=1)时，判断为栈满</strong>。当0号栈进栈时top0 先加1再赋值，1号栈进栈时top1 先减1再赋值;出栈时则刚好相反。<br>​    共享栈是为了更<strong>有效地利用存储空间</strong>，两个栈的空间相互调节，只有在整个存储空间被占满时才发生上溢。其存取数据的时间复杂度均为O(1)，所以对<strong>存取效率没有什么影响</strong>。</p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><p>队列也是一种操作受限的线性表，<strong>只允许在表一端进行插入，而在表的另一端进行删除</strong>。</p>
<p>操作特性：<strong>先进先出（FIFO）</strong></p>
<p>队头（Front)。允许删除的一端，又称队首。</p>
<p>队尾(Rear）。允许插入的端。</p>
<p>空队列。不含任何元素的空表。</p>
<h3 id="队列的顺序存储结构"><a href="#队列的顺序存储结构" class="headerlink" title="队列的顺序存储结构"></a>队列的顺序存储结构</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define MAXSIZE 10 &#x2F;&#x2F;队列中最大个数
typedef struct&#123;
    int data[MAXSIZE]; &#x2F;&#x2F;存放队列元素
    int front,rear;    &#x2F;&#x2F;队头指针和对位指针
&#125;SqQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>初始状态（队空条件):<strong>Q.front==Q.rear==0。</strong></p>
<p>进队操作:队不满时，先送值到队尾元素，再将队尾指针加1。</p>
<p>出队操作:队不空时，先取队头元素值,再将队头指针加1。</p>
<h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p>上述办法可以判别对空，但显然<strong>不能</strong>用<strong>q.rear=MAXSIZE</strong>作为判断队满的条件，如下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204011651609.png" alt="image-20220401165118511"></p>
<p>显然仍有存储空间。</p>
<p>由此，引入循环队列，把顺序队列想成一个环状的空间，即把存储队列元素的表从逻辑上视为一个坏，称为循环队列。</p>
<p>初始时:Q.front=Q.rear=0。<br>队首指针进1:Q.front=(Q.frontt1)%MaxSize。<br>队尾指针进1:Q.rear=(Q.rear+1) %MaxSize。<br>队列长度:(Q.rear+MaxSize-Q.front) %MaxSize。</p>
<p><strong>判断队满</strong></p>
<ul>
<li><p>牺牲一个存储单元，约定“队头指针在队尾指针的下一位置”作为标志</p>
</li>
<li><p>类型中新增表示队列元素个数的数据成员size。则队空的条件为Q.size==0,队满的条件为Q.size=MAXSIZE;</p>
</li>
<li><p>类型中增设tag 数据成员，以区分是队满还是队空。tag等于0时，若因删除导致Q.front==Q.rear，则为队空;tag等于1时，若因插入导致Q.front==Q.rear,则为队满。每次删除都令tag为0，插入都令tag为1。</p>
</li>
</ul>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><p>初始化、判空（注意初始化时front和rear指针指向的位置）</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;循环队列
void InitQueue(SqQueue &amp;q)
&#123;
    q.front &#x3D; q.rear &#x3D; 0;&#x2F;&#x2F;初始化均为0
&#125;

bool IsEmpty(SqQueue q)
&#123;
    if(q.front &#x3D;&#x3D; q.rear)
        return true;
    else
        return false;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>进队</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool EnQueue(SqQueue &amp;q, int x)
&#123;
    if((q.rear+1)%MAXSIZE&#x3D;&#x3D;q.front)&#x2F;&#x2F;判断队满
        return false;
    q.data[q.rear]&#x3D;x;
    q.rear &#x3D; (q.rear+1)%MAXSIZE;&#x2F;&#x2F;队尾+1
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>出队</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool DeQueue(SqQueue &amp;q, int &amp;x)
&#123;
    if(q.rear&#x3D;&#x3D;q.front)&#x2F;&#x2F;判断对空
        return false;
    x &#x3D; q.data[q.front];
    q.front &#x3D; (q.front+1)%MAXSIZE;&#x2F;&#x2F;队头+1
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LinkNode&#123;&#x2F;&#x2F;链式队列节点
    int data;
    struct LinkNode *next;
&#125;LinkNode;

typedef struct&#123;&#x2F;&#x2F;链式队列
    LinkNode *front,*rear;&#x2F;&#x2F;头尾指针
&#125;LinkQueue;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InitQueue(LinkQueue &amp;q)&#x2F;&#x2F;带头结点
&#123;
    q.front &#x3D; q.rear &#x3D;new LinkNode;
    q.front-&gt;next &#x3D; nullptr;&#x2F;&#x2F;头尾指针指向头结点
&#125;

void InitQueue(LinkQueue &amp;q)&#x2F;&#x2F;不带头结点
&#123;
    q.front &#x3D; q.rear &#x3D; nullptr;   &#x2F;&#x2F;初始置空
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>入队</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void EnQueue(LinkQueue &amp;q,int x)&#x2F;&#x2F;带头结点
&#123;
    LinkNode *s &#x3D; new LinkNode;
    s-&gt;data &#x3D; x;
    s-&gt;next &#x3D; nullptr;
    q.rear-&gt;next &#x3D; s;
    q.rear &#x3D;s;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void EnQueue(LinkQueue &amp;q,int x)
&#123;
    LinkNode *s &#x3D; new LinkNode;
    s-&gt;data &#x3D; x;
    s-&gt;next &#x3D; nullptr;
    if(q.front &#x3D;&#x3D; nullptr)&#123;&#x2F;&#x2F;不带头结点需特别处理空队列入队
        q.front &#x3D; s;
        q.rear &#x3D; s;
    &#125;else&#123;
        q.rear-&gt;next &#x3D; s;
        q.rear &#x3D;s;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>出队</strong></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool DeQueue(LinkQueue &amp;q,int &amp;x)&#x2F;&#x2F;带头结点
&#123;
    if(q.front&#x3D;&#x3D;q.rear)
        return false;
    LinkNode *p &#x3D; q.front-&gt;next;
    x&#x3D;p-&gt;data;
    q.front-&gt;next &#x3D; p-&gt;next;
    if(q.rear&#x3D;&#x3D;p)&#x2F;&#x2F;最后一个节点出队
        q.rear&#x3D;q.front;
    free(p);
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool DeQueue(LinkQueue &amp;q,int &amp;x)&#x2F;&#x2F;不带头结点
&#123;
    if(q.front&#x3D;&#x3D;nullptr)
        return false;
    LinkNode *p &#x3D; q.front;&#x2F;&#x2F;p指向出队的结点
    x&#x3D;p-&gt;data;
    q.front &#x3D; p-&gt;next;
    if(q.rear&#x3D;&#x3D;p)
        q.rear&#x3D;nullptr;
    	q.front&#x3D;nullptr;
    free(p);
    return true;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012204708.png" alt="image-20220401220400547"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012204227.png" alt="image-20220401220420150"></p>
<p>判断输出序列合法性 思路同栈。</p>
<h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><p>​    假设表达式中允许包含两种括号:圆括号和方括号，其嵌套的顺序任意均为正确的格式，[()或([())或((]均为不正确的格式。</p>
<p>算法：<br><strong>1)初始设置一个空栈,顺序读入括号。</strong><br><strong>2）若是右括号，则或者使置于栈顶的最急迫期待得以消解，或者是不合法的情况（括号序</strong><br><strong>列不匹配，退出程序)。</strong><br><strong>3）若是左括号，则作为一个新的更急迫的期待压入栈中，自然使原有的在栈中的所有未消</strong><br><strong>解的期待的急迫性降了一级。算法结束时，栈为空，否则括号序列不匹配。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012208006.png" alt="image-20220401220802914"></p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool bracketCheck(char str[], int length)
&#123;
    SqStack s;
    InitStack(s);&#x2F;&#x2F;初始化一个栈
    for(int i&#x3D;0; i&lt;length; i++)
    &#123;
        if(str[i]&#x3D;&#x3D;&#39;(&#39;|| str[i]&#x3D;&#x3D;&#39;[&#39;||str[i]&#x3D;&#x3D;&#39;&#123;&#39;)
            Push(s,str[i]);&#x2F;&#x2F;从左到右扫描，把扫描到的左括号入栈
        else&#123;
            if(IsEmpty(s))&#x2F;&#x2F;如果扫描到右括号且栈为空 匹配失败
                return false;
            else&#123;
                char topelem;
                Pop(s,topelem);&#x2F;&#x2F;栈非空，弹出栈顶元素匹配
                if(str[i]&#x3D;&#x3D;&#39;(&#39; &amp;&amp; topelem!&#x3D;&#39;)&#39;)
                    return false;
                if(str[i]&#x3D;&#x3D;&#39;[&#39; &amp;&amp; topelem!&#x3D;&#39;]&#39;)
                    return false;
                if(str[i]&#x3D;&#x3D;&#39;&#123;&#39; &amp;&amp; topelem!&#x3D;&#39;&#125;&#39;)
                    return false;
            &#125;
        &#125;
    &#125;
    return IsEmpty(s);&#x2F;&#x2F;所有括号都匹配后检查栈是否为空
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><p>中缀表达式：普通的算数表达式</p>
<p>后缀表达式（逆波兰表达式）：运算符在两个操作数后面（无界限符）</p>
<p>前缀表达式（波兰表达式）：运算符在两个操作数前面（无界限符）</p>
<p><strong>中缀转后缀手算：</strong></p>
<p>①确定中缀表达式中各个运算符的运算顺序</p>
<p>②选择下一个运算符，按照「左操作数右操作数运算符」的方式组合成一个新的操作数</p>
<p>③如果还有运算符没被处理，就继续②</p>
<p>注：为保证手算和机算结果相同，采用“左优先”原则（即只要左边能优先计算就先算左边的）</p>
<p><strong>后缀表达式的手算方法</strong>：</p>
<p>从左向右扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算。（注意运算左右顺序）</p>
<p><strong>后缀表达式的计算（机算）：</strong></p>
<p>==用栈实现==后缀表达式的计算:<br>①从左往右扫描下一个元素，直到处理完所有元素</p>
<p>②若扫描到操作数则压入栈,并回到①;否则执行③</p>
<p>③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①</p>
<p>注：先弹出的栈顶元素是右操作数，符合“后进先出”。</p>
<p><strong>中缀转前缀手算：</strong></p>
<p>同后缀原理，采用“右优先原则”</p>
<p><strong>前缀表达式计算（机算）：</strong></p>
<p>用栈实现变为==从右向左==扫描，别的同后缀。</p>
<p><strong>中缀转后缀表达式（机算）：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012222630.png" alt="image-20220401222203533"></p>
<p><strong>中缀表达式的计算（栈）</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012225580.png" alt="image-20220401222536489"></p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>函数调用的特点：最后调用的函数最先执行结束（LIFO）</p>
<p><strong>递归算法可以把原始问题转换为属性相同，但规模较小的问题</strong>。</p>
<p>缺点：可能造成多层递归，造成效率低下</p>
<p>优点：代码简单，易理解。</p>
<h3 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h3><ul>
<li>树的层次遍历</li>
<li>图的广度优先搜索</li>
<li>操作系统中FCFS（先来先服务）</li>
<li>数据缓冲区</li>
</ul>
<h2 id="数组和特殊矩阵"><a href="#数组和特殊矩阵" class="headerlink" title="数组和特殊矩阵"></a>数组和特殊矩阵</h2><p>数组是由n个相同数据元素构成的有限序列。</p>
<p>数组是线性表的推广。</p>
<p><strong>存储结构</strong></p>
<p>一维数组：LOC $+i^{*}$ sizeof(ElemType)</p>
<p>M行N列二维数组b[i][j]：</p>
<ul>
<li>行优先：LOC + (i*N + j) * sizeof(ElemType)</li>
<li>列优先：LOC + ( j *M+ i ) * sizeof(ElemType)</li>
</ul>
<h3 id="特殊矩阵（注意行列优先和题干的数组下标即可）"><a href="#特殊矩阵（注意行列优先和题干的数组下标即可）" class="headerlink" title="特殊矩阵（注意行列优先和题干的数组下标即可）"></a>特殊矩阵（注意行列优先和题干的数组下标即可）</h3><p>对称矩阵：只存放上（下）三角元素即可</p>
<p>三角矩阵（上（下）三角的元素均为常量）：存储方式与对称矩阵类似，只需额外多一块空间存储常量元素</p>
<p>三对角矩阵：</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012241608.png" alt="image-20220401224105518"></p>
<p><strong>存储对应关系均可自己推导，不列举公式</strong></p>
<p>稀疏矩阵：非零元素远远少于矩阵元素的个数</p>
<p>​    存储策略：三元组&lt;行，列，值&gt;</p>
<p>​                       十字链表法</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012244837.png" alt="image-20220401224429737"></p>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch自学笔记</title>
    <url>/2022/01/14/PyTorch%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h1><h2 id="加载数据集-amp-amp-Dataset类实战"><a href="#加载数据集-amp-amp-Dataset类实战" class="headerlink" title="加载数据集&amp;&amp;Dataset类实战"></a>加载数据集&amp;&amp;Dataset类实战</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>torch工具区的dataset区引入抽象类Dataset</p>
<p>所有子类继承他 并需要重写_<em>getitem</em>_ _<em>len_</em>,</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyData</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#继承</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>root_dir<span class="token punctuation">,</span>label_dir<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#初始化</span>
        self<span class="token punctuation">.</span>root_dir <span class="token operator">=</span> root_dir
        self<span class="token punctuation">.</span>label_dir <span class="token operator">=</span> label_dir
        self<span class="token punctuation">.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span>self<span class="token punctuation">.</span>label_dir<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#重写 获取每个图片</span>
        img_name <span class="token operator">=</span> self<span class="token punctuation">.</span>img_path<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>
        img_item_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span>self<span class="token punctuation">.</span>label_dir<span class="token punctuation">,</span>img_name<span class="token punctuation">)</span>
        img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_item_path<span class="token punctuation">)</span>
        label <span class="token operator">=</span> self<span class="token punctuation">.</span>label_dir
        <span class="token keyword">return</span> img<span class="token punctuation">,</span>label

    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#重写 图片数量</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>引入os的包</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_dir<span class="token punctuation">,</span>self<span class="token punctuation">.</span>label_dir<span class="token punctuation">)</span>
self<span class="token punctuation">.</span>img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>os.path.join合并目录</p>
<p>os.listdir读取目录 返回一个列表</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142116354.png" alt="image-20220107160037203"></p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142029328.png" alt="image-20220107160013774" style="zoom:80%;" />

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>读取图片的包&amp;&amp;展示图片</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142029142.png" alt="image-20220107160138571"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142029425.png" alt="image-20220107160152086"></p>
<p>类实例化后的数据集可以合并</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">ants_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span>ants_label_dir<span class="token punctuation">)</span>
bees_dataset <span class="token operator">=</span> MyData<span class="token punctuation">(</span>root_dir<span class="token punctuation">,</span>bees_label_dir<span class="token punctuation">)</span>
train_dataset<span class="token operator">=</span> ants_dataset <span class="token operator">+</span> bees_dataset
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="tensorboard使用"><a href="#tensorboard使用" class="headerlink" title="tensorboard使用"></a>tensorboard使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span><span class="token comment">#实例化这个类 参数代表文件夹名字 文件夹里面是生成的事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#简单例子 描绘y=5x </span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"y=5x"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">*</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token comment">#参数： 题目 纵轴值 横轴值</span>
writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030197.png" alt="image-20220109192046512"></p>
<p><strong>图片可查看很多东西</strong></p>
<p>**<a href="http://localhost:6006/**%E4%B8%BA%E9%BB%98%E8%AE%A4tensorboard%E7%BD%91%E5%9D%80">http://localhost:6006/**为默认tensorboard网址</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030992.png" alt="image-20220109192756643"></p>
<p>后面加 –port=xxxx改端口号（保证与其他服务器不同）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
image_path <span class="token operator">=</span> <span class="token string">"datasets/train/ants_image/5650366_e22b7e1065.jpg"</span>
image_path2<span class="token operator">=</span><span class="token string">"datasets/train/bees_image/16838648_415acd9e3f.jpg"</span>
img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>
img2 <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>image_path2<span class="token punctuation">)</span>
img_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
img_array2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>img_array<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>img_array<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"bees"</span><span class="token punctuation">,</span>img_array2<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>dataformats<span class="token operator">=</span><span class="token string">'HWC'</span><span class="token punctuation">)</span><span class="token comment">#add_image支持的图片类型有要求  dataformats保证图片格式与读取相同（高、宽、频道数）</span>
writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030238.png" alt="image-20220109193411068"></p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030525.png" alt="image-20220109193552629" style="zoom:75%;" />

<p><em>使用同一标题 不同迭代次数的图片显示可滑动查看</em></p>
<h2 id="常见transforms的使用"><a href="#常见transforms的使用" class="headerlink" title="常见transforms的使用"></a>常见transforms的使用</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter
<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> transforms
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">import</span> cv2<span class="token comment">#opencv的包 可以直接以array的形式读取图片</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ToTensor"><a href="#ToTensor" class="headerlink" title="ToTensor"></a>ToTensor</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">##totensor</span>
img_path <span class="token operator">=</span> <span class="token string">"datasets/train/bees_image/29494643_e3410f0d37.jpg"</span>
img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
tensor <span class="token operator">=</span> transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>
tensor_img <span class="token operator">=</span> tensor<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>tensor_img<span class="token punctuation">)</span>

cv_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>cv_img<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#opencv方式读入 转换同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030910.png" alt="image-20220110121741841" style="zoom:67%;" />

<h3 id="Normalize"><a href="#Normalize" class="headerlink" title="Normalize"></a>Normalize</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#normalize</span>
trans_norm <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
img_norm <span class="token operator">=</span> trans_norm<span class="token punctuation">(</span>tensor_img<span class="token punctuation">)</span>
writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"tensor_img"</span><span class="token punctuation">,</span>tensor_img<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"norm_img"</span><span class="token punctuation">,</span>img_norm<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030757.png" alt="image-20220110122002199" style="zoom:67%;" />

<p>初始化带上平均值和标准差（以列表形式） 列表的长度取决于图片的频道数</p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030916.png" alt="image-20220110122123325" style="zoom:67%;" />

<p>效果如上 会改变色调</p>
<h3 id="Resize"><a href="#Resize" class="headerlink" title="Resize"></a>Resize</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#resize</span>
trans_resize <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
img_resize <span class="token operator">=</span> trans_resize<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
img_resize <span class="token operator">=</span> tensor<span class="token punctuation">(</span>img_resize<span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span>img_resize<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
img_resize2 <span class="token operator">=</span> trans_resize<span class="token punctuation">(</span>tensor_img<span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"resize2"</span><span class="token punctuation">,</span>img_resize2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030610.png" alt="image-20220110122327732"></p>
<p>改变图片尺寸 输入可以是PIL类型或直接输入tensor类型</p>
<p>初始化时可以是一个元组（即图片大小） 若只输入int星 可理解为等比缩放</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031734.png" alt="image-20220110122603553"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031503.png" alt="image-20220110122619246"></p>
<p>原图-》改变后的</p>
<h3 id="Compose"><a href="#Compose" class="headerlink" title="Compose"></a>Compose</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#resize2  compose</span>
trans_resize2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>
trans_compose <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>trans_resize2<span class="token punctuation">,</span>tensor<span class="token punctuation">]</span><span class="token punctuation">)</span>
img_resize3 <span class="token operator">=</span> trans_compose<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"compose_resize"</span><span class="token punctuation">,</span>img_resize3<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031732.png" alt="image-20220110122747177"></p>
<p>初始化以列表形式 列表里元素是transforms类型 （要按照执行顺序输入）</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031598.png" alt="image-20220110122851471"></p>
<p>为等比例缩放后的图片 按顺序执行compose里的transform</p>
<h3 id="RandomCrop"><a href="#RandomCrop" class="headerlink" title="RandomCrop"></a>RandomCrop</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#randomcrop随即裁剪</span>
trans_randomcrop <span class="token operator">=</span> transforms<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
trans_compose2 <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>trans_randomcrop<span class="token punctuation">,</span>tensor<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    img_crop <span class="token operator">=</span> trans_compose2<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"randomcrop"</span><span class="token punctuation">,</span>img_crop<span class="token punctuation">,</span>i<span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031790.png" alt="image-20220110123155582"></p>
<p>随机裁剪 初始化的参数可以指定裁剪大小 或 int类型默认裁剪大小为（int * int）</p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031380.png" alt="image-20220110123326809" style="zoom:150%;" />

<p>一部分 可以拖拽查看十个部分</p>
<p><strong>其余方法 可查看官方文档 获取输入输出信息及格式 按住CTRL进入即可</strong></p>
<h2 id="torchvision中数据集使用"><a href="#torchvision中数据集使用" class="headerlink" title="torchvision中数据集使用"></a>torchvision中数据集使用</h2><p>官网找torchvision.datasets</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031014.png" alt="image-20220113143155193"></p>
<p>以CIFAR数据集为例</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">dataset_transform <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>
    torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span>
<span class="token punctuation">)</span>
train_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./datasets_CIFAR10"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>dataset_transform<span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
test_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./datasets_CIFAR10"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>dataset_transform<span class="token punctuation">,</span> download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>参数：</p>
<ul>
<li>root设定数据集路径</li>
<li>train 设置是否为训练集（反之则为测试集）</li>
<li>tranform 采取的一系列transform操作</li>
<li>download 是否下载</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>test_set<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#返回图片和 tag</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test_set<span class="token punctuation">.</span>classes<span class="token punctuation">)</span><span class="token comment">#每一个测试集图片的标签集合</span>

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"datasets_transform"</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    img<span class="token punctuation">,</span> tag <span class="token operator">=</span> test_set<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    writer<span class="token punctuation">.</span>add_image<span class="token punctuation">(</span><span class="token string">"test_img_resize2"</span><span class="token punctuation">,</span> img<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031800.png" alt="image-20220113143933803"></p>
<h2 id="dataloader使用"><a href="#dataloader使用" class="headerlink" title="dataloader使用"></a>dataloader使用</h2><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031798.png" alt="image-20220113144104917" style="zoom:80%;" />

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

test_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./datasets_CIFAR10"</span><span class="token punctuation">,</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>test_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"dataloader"</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    step <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> data <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>
        imgs<span class="token punctuation">,</span> tags <span class="token operator">=</span> data
        writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"eopch:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">,</span>imgs<span class="token punctuation">,</span> step<span class="token punctuation">)</span>
        step<span class="token operator">=</span>step<span class="token operator">+</span><span class="token number">1</span>
writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>dataloader参数</p>
<ul>
<li>dataset 选择的数据集</li>
<li>batch_size一批选择的数量</li>
<li>shuffle 多次选择是否洗牌（打乱顺序）</li>
<li>num_workers一般为0 表示线程工作数</li>
<li>drop_last 最后一页数量不够时是否取余或全部删除</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031007.png" alt="image-20220113144506417"></p>
<p>​                                                                                                       说明shuffle</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031597.png" alt="image-20220113144744801"></p>
<p>​                                                                                                       drop_last对比</p>
<h2 id="神经网络基本骨架nn-moudle"><a href="#神经网络基本骨架nn-moudle" class="headerlink" title="神经网络基本骨架nn.moudle"></a>神经网络基本骨架nn.moudle</h2><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161655823.png" alt="image-20220116165510672"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn

<span class="token keyword">class</span> <span class="token class-name">Ssy</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Ssy<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        output <span class="token operator">=</span> <span class="token builtin">input</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span><span class="token number">1</span>
        <span class="token keyword">return</span> output

ssy <span class="token operator">=</span> Ssy<span class="token punctuation">(</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token number">341</span><span class="token punctuation">)</span>
output <span class="token operator">=</span> ssy<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此处即把输入的tenso类型341 转换为341*2+1输出</p>
<p>即网络内部是（*2+1）的工作</p>
<h2 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h2><p><strong>卷积层具体原理见机器学习</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161701841.png" alt="image-20220116170151741"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161703820.png" alt="image-20220116170311739"></p>
<p>参数：</p>
<ul>
<li>输入频道数：一般为3（RGB三通道）</li>
<li>输出频道数</li>
<li>内核大小</li>
<li>步长：一次走几步</li>
<li>填充：默认为0 </li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

<span class="token comment">#下载数据集</span>
test_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./datasets_CIFAR10"</span><span class="token punctuation">,</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#调用dataloader</span>
test_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>test_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> num_workers<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"conv2d"</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Ssy</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Ssy<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">#卷积操作 变为6通道 内核大小为3（具体矩阵会自动变化调整）</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#神经网络中实现卷积层</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

ssy <span class="token operator">=</span> Ssy<span class="token punctuation">(</span><span class="token punctuation">)</span>
step<span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span> target <span class="token operator">=</span> data
    output <span class="token operator">=</span> ssy<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"imgs"</span><span class="token punctuation">,</span>imgs<span class="token punctuation">,</span>step<span class="token punctuation">)</span>
<span class="token comment">#需要把卷积后的图像重新变为3通道 否则不能显示</span>
    output <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>output<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"imgs_conv2d"</span><span class="token punctuation">,</span>output<span class="token punctuation">,</span>step<span class="token punctuation">)</span>
    step<span class="token operator">=</span>step<span class="token operator">+</span><span class="token number">1</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161707223.png" alt="image-20220116170755123"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161708067.png" alt="image-20220116170814942"></p>
<p><em>由于3通道变为6通道 一页显示了128个图片</em></p>
<h2 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h2><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172143303.png" alt="image-20220117214320130"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172143392.png" alt="image-20220117214338303"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172200524.png" alt="image-20220117220057439"></p>
<p>参数：</p>
<ul>
<li><p>内核大小</p>
</li>
<li><p>步长：默认为内核大小</p>
</li>
<li><p>填充</p>
</li>
<li><p>空洞大小 详见</p>
</li>
</ul>
<ul>
<li>ceilmode：选择是否舍弃</li>
</ul>
<h3 id="池化原理"><a href="#池化原理" class="headerlink" title="池化原理"></a>池化原理</h3><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172154489.png" alt="image-20220117215439360"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172155642.png" alt="image-20220117215518562"></p>
<p>即 内核类似卷积操作覆盖输入矩阵上元素 并选出最大的作为输出 </p>
<p><strong>与卷积不同的是 池化的步长默认为内核大小</strong></p>
<p>当遇到如上情况 ceil_mode=True即不舍弃残缺的矩阵 从中选择最大的</p>
<p>ceil_mode=False 即舍弃矩阵 内核继续向下移动</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172158356.png" alt="image-20220117215834265"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> MaxPool2d
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./datasets_CIFAR10"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>

dataloader<span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>data<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">64</span> <span class="token punctuation">)</span>

matrix_in <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                          <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                          <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                          <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                          <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span> torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>

<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>matrix_in<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#注意输入的格式</span>
                                            <span class="token comment">#-1表示模糊 即函数自适应调整大小</span>

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"max_pool"</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Ssy</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Ssy<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maxpool <span class="token operator">=</span> MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> ceil_mode<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output

ssy <span class="token operator">=</span> Ssy<span class="token punctuation">(</span><span class="token punctuation">)</span>
step <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    img<span class="token punctuation">,</span> tag <span class="token operator">=</span> data
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> img<span class="token punctuation">,</span> step<span class="token punctuation">)</span>
    output <span class="token operator">=</span> ssy<span class="token punctuation">(</span>img<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span>step<span class="token punctuation">)</span>
    step <span class="token operator">=</span> step<span class="token operator">+</span><span class="token number">1</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172202156.png" alt="image-20220117220221068"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172202173.png" alt="image-20220117220238106"></p>
<p>显而易见，池化后图片变模糊了，神经网络中常用池化层减少输入数据量，保留必要纹理信息，加快训练速度。</p>
<h2 id="非线性激活"><a href="#非线性激活" class="headerlink" title="非线性激活"></a>非线性激活</h2><h3 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h3><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192019307.png" alt="image-20220119201946145"></p>
<p>inplace为true即输出直接替换输入</p>
<p>置为false生成一个新的变量输出</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192020126.png" alt="image-20220119202053032"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> ReLU<span class="token punctuation">,</span> Sigmoid
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                     <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">100.2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>

<span class="token builtin">input</span><span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Ssy</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Ssy<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>relu1 <span class="token operator">=</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">#self.sigmoid = Sigmoid()</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>relu1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output

ssy <span class="token operator">=</span> Ssy<span class="token punctuation">(</span><span class="token punctuation">)</span>
output <span class="token operator">=</span> ssy<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192022910.png" alt="image-20220119202233849"></p>
<p>很明显结果与截断函数一致</p>
<h3 id="Sigmoid"><a href="#Sigmoid" class="headerlink" title="Sigmoid"></a>Sigmoid</h3><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192023261.png" alt="image-20220119202320156"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192024904.png" alt="image-20220119202401836"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> ReLU<span class="token punctuation">,</span> Sigmoid
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

data <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"./datasets_CIFAR10"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>data<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Ssy</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Ssy<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>relu1 <span class="token operator">=</span> ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sigmoid <span class="token operator">=</span> Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output

ssy <span class="token operator">=</span> Ssy<span class="token punctuation">(</span><span class="token punctuation">)</span>

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span>

step <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span> tags <span class="token operator">=</span> data
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token string">"imgs"</span><span class="token punctuation">,</span>imgs<span class="token punctuation">,</span>step<span class="token punctuation">)</span>
    imgs_sigmoid <span class="token operator">=</span> ssy<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    writer<span class="token punctuation">.</span>add_images<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"imgs_sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> imgs_sigmoid<span class="token punctuation">,</span>step<span class="token punctuation">)</span>
    step <span class="token operator">=</span>step <span class="token operator">+</span><span class="token number">1</span>

writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192032330.png" alt="image-20220119203244227"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192033618.png" alt="image-20220119203302536"></p>
<p>目的是增加一些非线性特征便于训练</p>
<h2 id="正则化层"><a href="#正则化层" class="headerlink" title="正则化层"></a>正则化层</h2><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261203671.png" alt="image-20220126120301483"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261203822.png" alt="image-20220126120346719"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261205180.png" alt="image-20220126120500105"></p>
<p>（详见官方文档）</p>
<h2 id="Recurrent-Layer"><a href="#Recurrent-Layer" class="headerlink" title="Recurrent Layer"></a>Recurrent Layer</h2><p>多用于文字识别等</p>
<p>详见官方文档</p>
<h2 id="线性层"><a href="#线性层" class="headerlink" title="线性层"></a>线性层</h2><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261240031.png" alt="image-20220126124050880"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261241006.png" alt="image-20220126124124912"></p>
<p><strong>目的是把5*5—&gt;1*25—&gt;1*10</strong> </p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Linear
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"../dataset_/datasets_CIFAR10"</span><span class="token punctuation">,</span> train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> transform<span class="token operator">=</span> torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">SSY</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>SSY<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>linear1 <span class="token operator">=</span> Linear<span class="token punctuation">(</span><span class="token number">196608</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        output <span class="token operator">=</span> self<span class="token punctuation">.</span>linear1<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> output

ssy <span class="token operator">=</span> SSY<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span> tag <span class="token operator">=</span> data
    <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token comment"># imgs = torch.reshape(imgs, (1, 1, 1, -1))</span>
    imgs <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span><span class="token comment">#flatten即展平 作用与上相同</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    output <span class="token operator">=</span> ssy<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203041121963.png" alt="image-20220304112103630"></p>
<h2 id="Sequential"><a href="#Sequential" class="headerlink" title="Sequential"></a>Sequential</h2><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071636179.png" alt="image-20220307163649019"></p>
<p><em>有点类似于transforms中的Compose。。</em></p>
<p>实例</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071639450.png" alt="Structure-of-CIFAR10-quick-model.png"></p>
<p>网络搭建根据图片顺序（卷积-池化-卷积-池化-卷积-池化-展平-线性层-线性层）</p>
<p><strong>计算卷积层stride与padding大小</strong></p>
<ul>
<li><p>根据公式</p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071643624.png" alt="image-20220307164323532" style="zoom:67%;" /></li>
<li><p>经验</p>
<p>==为了保持卷积后大小不会发生变化==</p>
<p>一般来说，在stride为1的情况下，padding等于奇数内核大小 <strong>一半的向下取整</strong>即（x-1）/2</p>
</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token punctuation">,</span> MaxPool2d<span class="token punctuation">,</span> Flatten<span class="token punctuation">,</span> Linear
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter

<span class="token comment">#网络中注释和非注释内容执行效果一致</span>
<span class="token keyword">class</span> <span class="token class-name">SSY</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>SSY<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment"># self.conv1 = Conv2d(3,32,5,padding=2)</span>
        <span class="token comment"># self.maxpool1 = MaxPool2d(2)</span>
        <span class="token comment"># self.conv2 = Conv2d(32,32,5,padding=2)</span>
        <span class="token comment"># self.maxpool2 = MaxPool2d(2)</span>
        <span class="token comment"># self.conv3 = Conv2d(32,64,5,padding=2)</span>
        <span class="token comment"># self.maxpool3 = MaxPool2d(2)</span>
        <span class="token comment"># self.flatten = Flatten()</span>
        <span class="token comment"># self.linear1 = Linear(1024,64)</span>
        <span class="token comment"># self.linear2 = Linear(64,10)</span>
        self<span class="token punctuation">.</span>model1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># x = self.conv1(x)</span>
        <span class="token comment"># x = self.maxpool1(x)</span>
        <span class="token comment"># x = self.conv2(x)</span>
        <span class="token comment"># x = self.maxpool2(x)</span>
        <span class="token comment"># x = self.conv3(x)</span>
        <span class="token comment"># x = self.maxpool3(x)</span>
        <span class="token comment"># x = self.flatten(x)</span>
        <span class="token comment"># x = self.linear1(x)</span>
        <span class="token comment"># x = self.linear2(x)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

ssy <span class="token operator">=</span> SSY<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ssy<span class="token punctuation">)</span>

<span class="token comment">#一般为了检查网络构建参数是否正确</span>
<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
output <span class="token operator">=</span> ssy<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>

writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"../tensorboard_dirs/logs_seq"</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>add_graph<span class="token punctuation">(</span>ssy<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span>
writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071649112.png" alt="image-20220307164933023" style="zoom:67%;" />

<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071650582.png" alt="image-20220307165027508" style="zoom:50%;" />

<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071651380.png" alt="image-20220307165137299" style="zoom:67%;" />

<p><em>使用tensorboard可以查看网络搭建具体情况，路线上会显示传输数据的大小</em></p>
<h2 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h2><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072301059.png" alt="image-20220307230114908" style="zoom:80%;" />

<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072302019.png" alt="image-20220307230232939" style="zoom:80%;" />

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn

<span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
targets <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4.5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>

<span class="token comment"># input = torch.reshape(input,(1,1,1,3))</span>
<span class="token comment"># targets = torch.reshape(targets,(1,1,1,3))</span>

loss <span class="token operator">=</span> nn<span class="token punctuation">.</span>L1Loss<span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> loss<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> targets<span class="token punctuation">)</span>

loss_mse <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
resu_mse <span class="token operator">=</span> loss_mse<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> targets<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">##6.5/3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>resu_mse<span class="token punctuation">)</span><span class="token comment">#19.25/3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h3><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072315769.png" alt="image-20220307231532686"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>
loss_cro <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
input2 <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">##直接使用input会报错，input的shape为[3]需要转变为[1,3]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>input2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
y <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
res_cro <span class="token operator">=</span> loss_cro<span class="token punctuation">(</span>input2<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchvision
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token punctuation">,</span> MaxPool2d<span class="token punctuation">,</span> Flatten<span class="token punctuation">,</span> Linear
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader

dataset <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span><span class="token string">"../dataset_/datasets_CIFAR10"</span><span class="token punctuation">,</span>train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>download<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>

dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">SSY</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>SSY<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>model1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

ssy <span class="token operator">=</span> SSY<span class="token punctuation">(</span><span class="token punctuation">)</span>

loss_ <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
    imgs<span class="token punctuation">,</span> tag <span class="token operator">=</span> data
    output <span class="token operator">=</span> ssy<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
    res <span class="token operator">=</span> loss_<span class="token punctuation">(</span>output<span class="token punctuation">,</span>tag<span class="token punctuation">)</span>
    <span class="token comment"># print(res)</span>
    res<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#利用反向传播确定梯度权重 如下图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072320387.png" alt="image-20220307232004242"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072320525.png" alt="image-20220307232025394"></p>
<h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203111151363.png" alt="image-20220311115121158"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">ssy <span class="token operator">=</span> SSY<span class="token punctuation">(</span><span class="token punctuation">)</span>

loss_ <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
optim <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>ssy<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    running_loss <span class="token operator">=</span> <span class="token number">0.00</span>
    <span class="token keyword">for</span> data <span class="token keyword">in</span> dataloader<span class="token punctuation">:</span>
        imgs<span class="token punctuation">,</span> tag <span class="token operator">=</span> data
        output <span class="token operator">=</span> ssy<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
        res <span class="token operator">=</span> loss_<span class="token punctuation">(</span>output<span class="token punctuation">,</span>tag<span class="token punctuation">)</span>
        <span class="token comment"># print(res)</span>
        optim<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#梯度置0</span>
        res<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#反向传播确定梯度参数</span>
        optim<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#更新参数（优化）</span>
        running_loss <span class="token operator">+=</span> res
    <span class="token keyword">print</span><span class="token punctuation">(</span>running_loss<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>PyTorch</category>
      </categories>
      <tags>
        <tag>PyTorch基础</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>张宇1000题错题</title>
    <url>/2022/04/06/%E5%BC%A0%E5%AE%871000%E9%A2%98%E9%94%99%E9%A2%98/</url>
    <content><![CDATA[<h1 id="01第一讲"><a href="#01第一讲" class="headerlink" title="01第一讲"></a>01第一讲</h1><br>

<div class="pdfobject-container" data-target="./pdf/1000_01.pdf" data-height="500px"></div>

<br>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>考研</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>三年a班有感</title>
    <url>/2022/01/17/%E4%B8%89%E5%B9%B4a%E7%8F%AD%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<p>​        怎么说呢，我几乎不看日剧，看过为数不多印象很深的也只有十元的《非自然死亡》。看这部剧的契机主要就是当时期末刚考完+游戏一直输不想玩+无聊刷B站刷到 看这封面男主很帅就打开看看，看着看着就上头了。从结果上帝视角来说，我觉得这是一部<strong>揭示道理深刻</strong>，情节离谱却跌宕的好剧。</p>
<p>​        简单说，主要讲的是，某高中三年a班即将毕业的29名学生（30-1），在临毕业的最后十天，被美术老师柊一颯“绑架”作为人质，目的找出班上自杀女生景山澪奈的真正原因。（<em>我的观感是看这个剧每集都像大结局。。。</em>）</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171009964.png" alt="image-20220117100945621"></p>
<p>​      ==下面就是一些小小的体会==</p>
<p>​        我觉得这个日剧好的地方就在于从很多方面揭示了不止是日本乃至中国全世界人类出现的问题，而且用这种极端的方式，弘扬了一位教师应做的，很难不让人印象深刻。</p>
<ul>
<li><strong>欺软怕硬</strong> 剧中男主柊一颯作为一名老师，在班级上没有得到丝毫的尊重，班级上任意一名同学都随意耻笑、捣乱甚至人身攻击，而在使用炸弹威慑之后，没有一个人对老师的要求说漏，观感就像大老虎变成了小猫咪？（bushi），反差令人发笑</li>
<li><strong>为了保全自己失去理智</strong> 很简单，柊一颯要求找出景山死亡真相，否则杀了一个人，与景山关系最好的小樱被要求代表回答，结果是小樱为了保全大家说是因为自己，显然回答错误，得知要杀一个人的同学们惊慌失措，一致让柊老师杀了小樱，真是气抖冷。。。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171025140.jpg" alt="src=http___b-ssl.duitang.com_uploads_item_201902_07_20190207213047_escmd.thumb.700_0.jpg&amp;refer=http___b-ssl.duitang"></p>
<ul>
<li><p><strong>利己</strong> 剧中景山之前的“朋友”宇佐美接近景山 成为朋友只是为了自己在MINDVOICE上获得更多的粉丝 毕竟景山是全国游泳大赛冠军 天才美少女 而在景山发现了宇佐美的真实意图后 故意疏远她 选择了真心与自己作为朋友的小樱 宇佐美为此不惜陷害景山（就是一系列低俗的恶作剧） 最终酿成大祸</p>
<p><em>为了减少剧透，先就列举这几个</em></p>
</li>
</ul>
<p>​       其实还有很多这些方面的<strong>劣根</strong>性问题存在，但这部剧主要揭示的问题毫无疑问是 <strong>校园暴力</strong>和 <strong>网络暴力</strong> 。景山作为全国游泳大赛冠军，美好的未来，因为身边同学某些奇奇怪怪的原因，被做假视频陷害，被全班孤立，最好的朋友甚至也渐行渐远，网络上的舆论由赞美变成了辱骂，就在这种每天精神折磨下，景山好像见到路人也会对她指指点点羞辱她，终于受不了了选择死亡。</p>
<p>​        在这个网络愈发发达的社会，信息碎片化传播的时代，所见的每一则新闻都可能反转反转再反转，而身为吃瓜群众的我们选择的却是随大流，舆论方向在哪我们就说什么，失去了思考的能力，可以说是被牵着鼻子走，确实，这和无良媒体的报道脱不了干系，但在网络上发表言论前，最好的选择是思考。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171043781.png" alt="image-20220117104346561"></p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171040233.png" alt="image-20220117104052506" style="zoom:80%;" />



<p><strong>共情</strong> 如果角色互换 你会怎么样？既然如此，为什么不能怀揣善意对别人呢？</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171042974.png" alt="image-20220117104235605"></p>
<p><strong>所谓网络言论自由这层美丽的糖衣包裹着数不清的言语利刃，你的一句话，或许就是别人崩溃的导火索，言论自由不是不负责任没脑子言论，是网络社会的多样、包容，所以，说一句话前，务必三思。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171049842.png" alt="image-20220117104934191"></p>
<p>最后再次强推苏打主演的这部剧，剧好看是一方面，苏打是真帅啊……不会有人不喜欢帅哥吧）</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171051880.png" alt="image-20220117105140793"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>日剧</tag>
      </tags>
  </entry>
  <entry>
    <title>2021CCF_个贷违约</title>
    <url>/2022/01/15/%E4%B8%AA%E8%B4%B7%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B/</url>
    <content><![CDATA[<h1 id="个贷违约预测"><a href="#个贷违约预测" class="headerlink" title="个贷违约预测"></a>个贷违约预测</h1><h2 id="一、赛题理解及结果"><a href="#一、赛题理解及结果" class="headerlink" title="一、赛题理解及结果"></a>一、赛题理解及结果</h2><h3 id="1-赛题理解与认识"><a href="#1-赛题理解与认识" class="headerlink" title="1.赛题理解与认识"></a>1.赛题理解与认识</h3><p>​        为进一步促进金融普惠的推广落地，金融机构需要服务许多新的客群。银行作为对风险控制要求很高的行业，因为缺乏对新客群的了解，对新的细分客群的风控处理往往成为金融普惠的重要阻碍。如何利用银行现有信贷行为数据来服务新场景、新客群成了一个很有价值的研究方向，迁移学习是其中一个重要手段。本赛题要求利用已有的与目标客群稍有差异的另一批信贷数据，辅助目标业务风控模型的创建，两者数据集之间存在大量相同的字段和极少的共同用户。由此，我们需要把“train_public.csv”与“train_internet_public.csv”的数据进行处理比对验证，选择重要的特征，去除冗余影响极小的特征，最后选择合适的模型加以预测，调参及优化。</p>
<p>​        比如，在两个训练集中，我们可以发现“employer_type”，“industry””work_type”等值为汉字，”class“”sub_class””work_year”等信息值为字母，不利于模型的预测，需要对此进行编码。此外，在“work_year””f0-f4”匿名特征等特征中，有大量数据集缺失，需要采用适当方法对其进行填充。在训练集的日期特征中，均采用”xx/xx/xx“表示，需转换为datatime类型等，还有显然的逻辑错误等。（具体处理代码详见算法说明）</p>
<p>​        最后打算采用LightGBM作为单模型预测，因为它支持高效率的并行训练，并且具有更快的训练速度、更低的内存消耗、更好的准确率、支持分布式可以快速处理海量数据。</p>
<h3 id="2-A榜结果，排名"><a href="#2-A榜结果，排名" class="headerlink" title="2.A榜结果，排名"></a>2.A榜结果，排名</h3><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211217215258459.png" alt="image-20211217215258459"></p>
<h3 id="3-B榜结果，排名"><a href="#3-B榜结果，排名" class="headerlink" title="3.B榜结果，排名"></a>3.B榜结果，排名</h3><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211217215430325.png" alt="image-20211217215430325"></p>
<h3 id="4-全部提交历史记录"><a href="#4-全部提交历史记录" class="headerlink" title="4.全部提交历史记录"></a>4.全部提交历史记录</h3><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211217220550078.png" alt="image-20211217220550078"></p>
<p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211217220640025.png" alt="image-20211217220640025"></p>
<p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211217220710678.png" alt="image-20211217220710678"></p>
<h2 id="二、组员分工"><a href="#二、组员分工" class="headerlink" title="二、组员分工"></a>二、组员分工</h2><table>
<thead>
<tr>
<th>姓名</th>
<th>学号</th>
</tr>
</thead>
<tbody><tr>
<td>孙诗尧</td>
<td>201930382376</td>
</tr>
<tr>
<td>阮炜烨</td>
<td>201930382291</td>
</tr>
<tr>
<td>李立</td>
<td>201930381171</td>
</tr>
</tbody></table>
<p><strong>具体分工</strong></p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>分工</th>
</tr>
</thead>
<tbody><tr>
<td>孙诗尧</td>
<td>模型的构建以及优化</td>
</tr>
<tr>
<td>阮炜烨</td>
<td>特征工程，数据处理</td>
</tr>
<tr>
<td>李立</td>
<td>模型调参以及具体测试</td>
</tr>
</tbody></table>
<h2 id="三、算法说明"><a href="#三、算法说明" class="headerlink" title="三、算法说明"></a>三、算法说明</h2><h3 id="1-LightGBM"><a href="#1-LightGBM" class="headerlink" title="1.LightGBM"></a>1.LightGBM</h3><p>​        梯度提升决策树（GBDT）是一种流行的机器学习算法，有不少有效的实现。虽然在这些实现中采用了很多工程优化，但在特征维数高、数据量大的情况下，效率和可扩展性仍然不尽如人意。一个主要原因是对于每个特征，他们需要扫描所有的数据实例来估计所有可能的分割点的信息增益，这是非常耗时的。 LightGBM 是一种 GBDT 开源工具，能够以低内存成本对大规模数据集进行高效训练。        LightGBM 采用了基于梯度的单侧采样 (GOSS) 和专有特征捆绑 (EFB) 两种新技术。使用 GOSS，LightGBM 可以只用完整数据集的一小部分来训练每棵树。使用 EFB，LightGBM 可以更有效地处理高维稀疏特征。 LightGBM 还支持分布式训练，通信成本低，在 GPU 上训练速度快。</p>
<p>​        具有的优势：</p>
<ul>
<li>基于Histogram的决策树算法。</li>
<li>单边梯度采样 Gradient-based One-Side Sampling(GOSS)：使用GOSS可以减少大量只具有小梯度的数据实例，这样在计算信息增益的时候只利用剩下的具有高梯度的数据就可以了，相比XGBoost遍历所有特征值节省了不少时间和空间上的开销。</li>
<li>互斥特征捆绑 Exclusive Feature Bundling(EFB)：使用EFB可以将许多互斥的特征绑定为一个特征，这样达到了降维的目的。</li>
<li>带深度限制的Leaf-wise的叶子生长策略：大多数GBDT工具使用低效的按层生长 (level-wise) 的决策树生长策略，因为它不加区分的对待同一层的叶子，带来了很多没必要的开销。实际上很多叶子的分裂增益较低，没必要进行搜索和分裂。LightGBM使用了带有深度限制的按叶子生长 (leaf-wise) 算法。</li>
<li>直接支持类别特征(Categorical Feature)</li>
<li>支持高效并行</li>
<li>Cache命中率优化</li>
</ul>
<p>模型下各特征重要程度</p>
<img src="C:\Users\86130\Desktop\lgbm_importances.png" alt="lgbm_importances" style="zoom:80%;" />

<h3 id="2-数据处理"><a href="#2-数据处理" class="headerlink" title="2.数据处理"></a>2.数据处理</h3><h4 id="2-1-编码"><a href="#2-1-编码" class="headerlink" title="2.1 编码"></a>2.1 编码</h4><p>对“employer_type”,“industry”,”work_type”编码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">cat_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'employer_type'</span><span class="token punctuation">,</span> <span class="token string">'industry'</span><span class="token punctuation">]</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder
<span class="token keyword">for</span> col <span class="token keyword">in</span> cat_cols<span class="token punctuation">:</span>
    lbl <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>
    train_data<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> lbl<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>
    test_public<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> lbl<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>test_public<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment"># Internet处理</span>
    train_inte<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> lbl<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train_inte<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>
    
lbl2 <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_inte<span class="token punctuation">[</span><span class="token string">'work_type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
train_inte<span class="token punctuation">[</span><span class="token string">'work_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> lbl2<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train_inte<span class="token punctuation">[</span><span class="token string">'work_type'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对“class”，“sub_class”编码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token string">'E'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">'F'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token string">'G'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

train_data<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>class_dict<span class="token punctuation">)</span>
test_public<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_public<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>class_dict<span class="token punctuation">)</span>
train_inte<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_inte<span class="token punctuation">[</span><span class="token string">'class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>class_dict<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">sub_class_tran</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>
    val<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>val<span class="token operator">+</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
train_inte<span class="token punctuation">[</span><span class="token string">'sub_class'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_inte<span class="token punctuation">[</span><span class="token string">'sub_class'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sub_class_tran<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-2-时间值处理"><a href="#2-2-时间值处理" class="headerlink" title="2.2 时间值处理"></a>2.2 时间值处理</h4><p>对”work_year”值处理</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">workYearDIc</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'nan'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    x <span class="token operator">=</span> x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'&lt; 1'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'(\d+)'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

train_data<span class="token punctuation">[</span><span class="token string">'work_year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'work_year'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>workYearDIc<span class="token punctuation">)</span>
test_public<span class="token punctuation">[</span><span class="token string">'work_year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_public<span class="token punctuation">[</span><span class="token string">'work_year'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>workYearDIc<span class="token punctuation">)</span>
train_inte<span class="token punctuation">[</span><span class="token string">'work_year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_inte<span class="token punctuation">[</span><span class="token string">'work_year'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>workYearDIc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对“issue_date”“earlies_credit_mon”转化为datatime类型 并创建年月日新特征</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">findDig</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>
    fd <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'(\d+-)'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
    <span class="token keyword">if</span> fd <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'1-'</span> <span class="token operator">+</span> val
    <span class="token keyword">return</span> val <span class="token operator">+</span> <span class="token string">'-01'</span>

timeMax <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token string">'1-Dec-21'</span><span class="token punctuation">)</span>
train_data<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>findDig<span class="token punctuation">)</span><span class="token punctuation">)</span>
test_public<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>test_public<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>findDig<span class="token punctuation">)</span><span class="token punctuation">)</span>

train_data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>train_data<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">></span> timeMax<span class="token punctuation">,</span> <span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>train_data<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">></span> timeMax<span class="token punctuation">,</span> <span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">+</span> pd<span class="token punctuation">.</span>offsets<span class="token punctuation">.</span>DateOffset<span class="token punctuation">(</span>years<span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>

test_public<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>test_public<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">></span> timeMax<span class="token punctuation">,</span> <span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_public<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>test_public<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">></span> timeMax<span class="token punctuation">,</span> <span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">+</span> pd<span class="token punctuation">.</span>offsets<span class="token punctuation">.</span>DateOffset<span class="token punctuation">(</span>years<span class="token operator">=</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span>

train_data<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
test_public<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>test_public<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
train_inte<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>train_inte<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
train_inte<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>train_inte<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

train_data<span class="token punctuation">[</span><span class="token string">'issue_date_month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>month
test_public<span class="token punctuation">[</span><span class="token string">'issue_date_month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_public<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>month
train_data<span class="token punctuation">[</span><span class="token string">'issue_date_dayofweek'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>dayofweek
test_public<span class="token punctuation">[</span><span class="token string">'issue_date_dayofweek'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_public<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>dayofweek

train_data<span class="token punctuation">[</span><span class="token string">'earliesCreditMon'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>month
test_public<span class="token punctuation">[</span><span class="token string">'earliesCreditMon'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_public<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>month
train_data<span class="token punctuation">[</span><span class="token string">'earliesCreditYear'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>year
test_public<span class="token punctuation">[</span><span class="token string">'earliesCreditYear'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_public<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>year
train_inte<span class="token punctuation">[</span><span class="token string">'issue_date_month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_inte<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>month
train_inte<span class="token punctuation">[</span><span class="token string">'issue_date_dayofweek'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_inte<span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>dayofweek
train_inte<span class="token punctuation">[</span><span class="token string">'earliesCreditMon'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_inte<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>month
train_inte<span class="token punctuation">[</span><span class="token string">'earliesCreditYear'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_inte<span class="token punctuation">[</span><span class="token string">'earlies_credit_mon'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>year

col_to_drop <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'issue_date'</span><span class="token punctuation">,</span> <span class="token string">'earlies_credit_mon'</span><span class="token punctuation">,</span><span class="token string">'policy_code'</span><span class="token punctuation">]</span>
train_data <span class="token operator">=</span> train_data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>col_to_drop<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
test_public <span class="token operator">=</span> test_public<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>col_to_drop<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">##internet处理</span>
train_inte <span class="token operator">=</span> train_inte<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>col_to_drop<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-3缺失值填充"><a href="#2-3缺失值填充" class="headerlink" title="2.3缺失值填充"></a>2.3缺失值填充</h4><p>利用0填充“pub_dero_bankrup”</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">train_data<span class="token punctuation">[</span><span class="token string">"pub_dero_bankrup"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_data<span class="token punctuation">[</span><span class="token string">"pub_dero_bankrup"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
train_inte<span class="token punctuation">[</span><span class="token string">"pub_dero_bankrup"</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_inte<span class="token punctuation">[</span><span class="token string">"pub_dero_bankrup"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
test_public<span class="token punctuation">[</span><span class="token string">"pub_dero_bankrup"</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_public<span class="token punctuation">[</span><span class="token string">"pub_dero_bankrup"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>利用knn填充f0-f4系列匿名特征</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'f0'</span><span class="token punctuation">,</span><span class="token string">'f1'</span><span class="token punctuation">,</span><span class="token string">'f3'</span><span class="token punctuation">,</span><span class="token string">'f4'</span><span class="token punctuation">,</span><span class="token string">'f2'</span><span class="token punctuation">]</span>
a<span class="token operator">=</span>KNNImputer<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
train_data<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train_data<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-4增加新的相关特征"><a href="#2-4增加新的相关特征" class="headerlink" title="2.4增加新的相关特征"></a>2.4增加新的相关特征</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_data<span class="token punctuation">[</span><span class="token string">'pro'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_data<span class="token punctuation">[</span><span class="token string">'interest'</span><span class="token punctuation">]</span><span class="token operator">*</span>train_data<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
test_public<span class="token punctuation">[</span><span class="token string">'pro'</span><span class="token punctuation">]</span><span class="token operator">=</span>test_public<span class="token punctuation">[</span><span class="token string">'interest'</span><span class="token punctuation">]</span><span class="token operator">*</span>test_public<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
train_inte<span class="token punctuation">[</span><span class="token string">'pro'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_inte<span class="token punctuation">[</span><span class="token string">'interest'</span><span class="token punctuation">]</span><span class="token operator">*</span>train_inte<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
train_data<span class="token punctuation">[</span><span class="token string">'loan_year'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_data<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span><span class="token operator">/</span>train_data<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
test_public<span class="token punctuation">[</span><span class="token string">'loan_year'</span><span class="token punctuation">]</span><span class="token operator">=</span>test_public<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span><span class="token operator">/</span>test_public<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
train_inte<span class="token punctuation">[</span><span class="token string">'loan_year'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_inte<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span><span class="token operator">/</span>train_inte<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
train_data<span class="token punctuation">[</span><span class="token string">'early_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_data<span class="token punctuation">[</span><span class="token string">'early_return_amount'</span><span class="token punctuation">]</span><span class="token operator">/</span>train_data<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span>
test_public<span class="token punctuation">[</span><span class="token string">'early_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>test_public<span class="token punctuation">[</span><span class="token string">'early_return_amount'</span><span class="token punctuation">]</span><span class="token operator">/</span>test_public<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span>
train_inte<span class="token punctuation">[</span><span class="token string">'early_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_inte<span class="token punctuation">[</span><span class="token string">'early_return_amount'</span><span class="token punctuation">]</span><span class="token operator">/</span>train_inte<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span>
train_data<span class="token punctuation">[</span><span class="token string">'early_times_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_data<span class="token punctuation">[</span><span class="token string">'early_return'</span><span class="token punctuation">]</span><span class="token operator">/</span>train_data<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
test_public<span class="token punctuation">[</span><span class="token string">'early_times_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>test_public<span class="token punctuation">[</span><span class="token string">'early_return'</span><span class="token punctuation">]</span><span class="token operator">/</span>test_public<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
train_inte<span class="token punctuation">[</span><span class="token string">'early_times_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_inte<span class="token punctuation">[</span><span class="token string">'early_return'</span><span class="token punctuation">]</span><span class="token operator">/</span>train_inte<span class="token punctuation">[</span><span class="token string">'year_of_loan'</span><span class="token punctuation">]</span>
train_data<span class="token punctuation">[</span><span class="token string">'recircle_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_data<span class="token punctuation">[</span><span class="token string">'recircle_b'</span><span class="token punctuation">]</span><span class="token operator">/</span>train_data<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span>
test_public<span class="token punctuation">[</span><span class="token string">'recircle_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>test_public<span class="token punctuation">[</span><span class="token string">'recircle_b'</span><span class="token punctuation">]</span><span class="token operator">/</span>test_public<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span>
train_inte<span class="token punctuation">[</span><span class="token string">'recircle_ratio'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_inte<span class="token punctuation">[</span><span class="token string">'recircle_b'</span><span class="token punctuation">]</span><span class="token operator">/</span>train_inte<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span>
train_data<span class="token punctuation">[</span><span class="token string">'recircle_amt'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_data<span class="token punctuation">[</span><span class="token string">'recircle_u'</span><span class="token punctuation">]</span><span class="token operator">*</span>train_data<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span>
test_public<span class="token punctuation">[</span><span class="token string">'recircle_amt'</span><span class="token punctuation">]</span><span class="token operator">=</span>test_public<span class="token punctuation">[</span><span class="token string">'recircle_u'</span><span class="token punctuation">]</span><span class="token operator">*</span>test_public<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span>
train_inte<span class="token punctuation">[</span><span class="token string">'recircle_amt'</span><span class="token punctuation">]</span><span class="token operator">=</span>train_inte<span class="token punctuation">[</span><span class="token string">'recircle_u'</span><span class="token punctuation">]</span><span class="token operator">*</span>train_inte<span class="token punctuation">[</span><span class="token string">'total_loan'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-5处理数据中的逻辑错误"><a href="#2-5处理数据中的逻辑错误" class="headerlink" title="2.5处理数据中的逻辑错误"></a>2.5处理数据中的逻辑错误</h4><p>对于特征“early_return”为0，但还款金额”early_return_amount“/”early_return_amount_3mon“不为0的数据值进行修改</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">44444444</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">clear_early_return</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> temp<span class="token punctuation">.</span>early_return<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> temp<span class="token punctuation">.</span>early_return_amount<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            temp<span class="token punctuation">.</span>early_return<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> temp<span class="token punctuation">.</span>early_return<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> temp<span class="token punctuation">.</span>early_return_amount_3mon<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>
            temp<span class="token punctuation">.</span>early_return<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>

clear_early_return<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>
clear_early_return<span class="token punctuation">(</span>test_public<span class="token punctuation">)</span>
clear_early_return<span class="token punctuation">(</span>train_inte<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于还款金额”early_return_amount“/”early_return_amount_3mon“不为0，但还款次数“early_return”为0的数据进行修改（此处错误仅在train_inte中产生）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clean_test</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> tmp<span class="token punctuation">.</span>early_return<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">and</span> tmp<span class="token punctuation">.</span>early_return_amount<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            tmp<span class="token punctuation">.</span>early_return_amount<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>total_loan<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
clean_test<span class="token punctuation">(</span>test_public<span class="token punctuation">)</span>、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="四、核心代码"><a href="#四、核心代码" class="headerlink" title="四、核心代码"></a>四、核心代码</h2><p><strong>LightGBM +交叉验证</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train_model</span><span class="token punctuation">(</span>data_<span class="token punctuation">,</span> test_<span class="token punctuation">,</span> y_<span class="token punctuation">,</span> folds_<span class="token punctuation">)</span><span class="token punctuation">:</span>
    oof_preds <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>data_<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    sub_preds <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>test_<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    feature_importance_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
    feats <span class="token operator">=</span> <span class="token punctuation">[</span>f <span class="token keyword">for</span> f <span class="token keyword">in</span> data_<span class="token punctuation">.</span>columns <span class="token keyword">if</span> f <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'loan_id'</span><span class="token punctuation">,</span> <span class="token string">'user_id'</span><span class="token punctuation">,</span> <span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> n_fold<span class="token punctuation">,</span> <span class="token punctuation">(</span>trn_idx<span class="token punctuation">,</span> val_idx<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>folds_<span class="token punctuation">.</span>split<span class="token punctuation">(</span>data_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        trn_x<span class="token punctuation">,</span> trn_y <span class="token operator">=</span> data_<span class="token punctuation">[</span>feats<span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> y_<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>trn_idx<span class="token punctuation">]</span>
        val_x<span class="token punctuation">,</span> val_y <span class="token operator">=</span>   data_<span class="token punctuation">[</span>feats<span class="token punctuation">]</span><span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> y_<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span>
        clf <span class="token operator">=</span> LGBMClassifier<span class="token punctuation">(</span>
            objective<span class="token operator">=</span><span class="token string">'binary'</span><span class="token punctuation">,</span>
            boosting_type<span class="token operator">=</span><span class="token string">'gbdt'</span><span class="token punctuation">,</span>
            tree_learner<span class="token operator">=</span><span class="token string">'serial'</span><span class="token punctuation">,</span>
            num_leaves<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">,</span>
            max_depth<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>
            learning_rate<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>
            n_estimators<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span>
            subsample<span class="token operator">=</span><span class="token number">0.45</span><span class="token punctuation">,</span>
            feature_fraction<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>
            reg_alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>
            reg_lambda<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>
            random_state<span class="token operator">=</span><span class="token number">2021</span><span class="token punctuation">,</span>
            is_unbalance<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
            num_thread<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>
            metric<span class="token operator">=</span><span class="token string">'auc'</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>

        clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>trn_x<span class="token punctuation">,</span> trn_y<span class="token punctuation">,</span>
                eval_set<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>trn_x<span class="token punctuation">,</span> trn_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>val_x<span class="token punctuation">,</span> val_y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                eval_metric<span class="token operator">=</span><span class="token string">'auc'</span><span class="token punctuation">,</span> early_stopping_rounds<span class="token operator">=</span><span class="token number">40</span>
                <span class="token punctuation">)</span>

        oof_preds<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span> <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>val_x<span class="token punctuation">,</span> num_iteration<span class="token operator">=</span>clf<span class="token punctuation">.</span>best_iteration_<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>
        sub_preds <span class="token operator">+=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>test_<span class="token punctuation">[</span>feats<span class="token punctuation">]</span><span class="token punctuation">,</span> num_iteration<span class="token operator">=</span>clf<span class="token punctuation">.</span>best_iteration_<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> folds_<span class="token punctuation">.</span>n_splits

        fold_importance_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
        fold_importance_df<span class="token punctuation">[</span><span class="token string">"feature"</span><span class="token punctuation">]</span> <span class="token operator">=</span> feats
        fold_importance_df<span class="token punctuation">[</span><span class="token string">"importance"</span><span class="token punctuation">]</span> <span class="token operator">=</span> clf<span class="token punctuation">.</span>feature_importances_
        fold_importance_df<span class="token punctuation">[</span><span class="token string">"fold"</span><span class="token punctuation">]</span> <span class="token operator">=</span> n_fold <span class="token operator">+</span> <span class="token number">1</span>
        feature_importance_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>feature_importance_df<span class="token punctuation">,</span> fold_importance_df<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>


        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Fold %2d AUC : %.6f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>n_fold <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> roc_auc_score<span class="token punctuation">(</span>val_y<span class="token punctuation">,</span> oof_preds<span class="token punctuation">[</span>val_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">del</span> clf<span class="token punctuation">,</span> trn_x<span class="token punctuation">,</span> trn_y<span class="token punctuation">,</span> val_x<span class="token punctuation">,</span> val_y
        gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Full AUC score %.6f'</span> <span class="token operator">%</span> roc_auc_score<span class="token punctuation">(</span>y_<span class="token punctuation">,</span> oof_preds<span class="token punctuation">)</span><span class="token punctuation">)</span>

    test_<span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sub_preds

    <span class="token keyword">return</span> oof_preds<span class="token punctuation">,</span> test_<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'loan_id'</span><span class="token punctuation">,</span> <span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> feature_importance_df

y <span class="token operator">=</span> train<span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span>
folds <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">546789</span><span class="token punctuation">)</span>
oof_preds<span class="token punctuation">,</span> test_preds<span class="token punctuation">,</span> importances <span class="token operator">=</span> train_model<span class="token punctuation">(</span>train<span class="token punctuation">,</span> test<span class="token punctuation">,</span> y<span class="token punctuation">,</span> folds<span class="token punctuation">)</span>
test_preds<span class="token punctuation">.</span>rename<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'loan_id'</span><span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'baseline891.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>SCUT</category>
      </categories>
      <tags>
        <tag>SCUT</tag>
        <tag>CCF</tag>
      </tags>
  </entry>
</search>
