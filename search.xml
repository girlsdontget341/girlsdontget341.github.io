<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>408一轮计网复习笔记</title>
    <url>/2022/05/19/408%E8%AE%A1%E7%BD%91%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1计算机网络体系结构"><a class="markdownIt-Anchor" href="#1计算机网络体系结构"></a> 1.计算机网络体系结构</h1>
<h2 id="计算机网络概述"><a class="markdownIt-Anchor" href="#计算机网络概述"></a> 计算机网络概述</h2>
<p>计算机网络︰是一个将分散的、具有独立功能的<strong>计算机系统</strong>，通过<strong>通信设备</strong>与<strong>线路</strong>连接起来，由功能完善的<strong>软件</strong>实现<strong>资源共享</strong>和<strong>信息传递</strong>的系统。</p>
<p>计算机网络是互连的、自治的计算机集合。（互连：通过通信链路互联互通，自治：无主从关系）</p>
<h3 id="计算机网络的功能"><a class="markdownIt-Anchor" href="#计算机网络的功能"></a> <strong>计算机网络的功能</strong></h3>
<ul>
<li><mark>数据通信</mark>：最基本和最重要的功能。用来实现联网计算机之间各种信息的传输，并将分散在不同地理位置的计算机联系起来，进行统一的调配、控制和管理。例如，文件传输、电子邮件等应用，离开了计算机网络将无法实现。</li>
<li>资源共享：资源共享可以是软件共享、数据共享，也可以是硬件共享。它使计算机网络中的资源互通有无、分工协作，从而极大地提高硬件资源、软件资源和数据资源的利用率。</li>
<li>分布式处理：当计算机网络中的某个计算机系统负荷过重时，可以将其处理的某个复杂任务分配给网络中的其他计算机系统，从而利用空闲计算机资源以提高整个系统的利用率。</li>
<li>提高可靠性：计算机网络中的各台计算机可以通过网络互为替代机。</li>
<li>负载均衡：将工作任务均衡地分配给计算机网络中的各台计算机。</li>
</ul>
<h3 id="计算机网络的发展"><a class="markdownIt-Anchor" href="#计算机网络的发展"></a> <strong>计算机网络的发展</strong></h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205191934763.png" alt="image-20220519193405543"></p>
<p>网络把许多计算机连接在一起,而互联网则把许多网络连接在一起因特网是世界上最大的互联网。</p>
<p>1985年起，美国国家科学基金会NSF围绕6个大型计算机中心建设计算机网络,即国家科学基金网NSFNET。</p>
<p>ISP:因特网服务提供者/因特网服务提供商,是—个向广大用户综合提供互联网接入业务、信息业务、和增值业务的公司，如中国电信、中国联动、中国移动等。分为主干ISP、地区ISP和本地ISP。</p>
<h3 id="计算机网络的组成"><a class="markdownIt-Anchor" href="#计算机网络的组成"></a> <strong>计算机网络的组成</strong></h3>
<ul>
<li>
<p>从组成部分上，分为<strong>软件、硬件、协议</strong></p>
<p>硬件主要由主机（也称端系统)、通信链路（如双绞线、光纤)、交换设备（如路由器、交换机等）和通信处理机（如网卡）等组成。软件主要包括各种实现资源共享的软件和方便用户使用的各种工具软件（如网络操作系统、邮件收发程序、FTP程序、聊天程序等)。<strong>软件部分多属于应用层。协议是计算机网络的核心</strong>，如同交通规则制约汽车驾驶一样，协议规定了网络传输数据时所遵循的规范。</p>
</li>
<li>
<p>从工作方式上，分为<strong>边缘部分（用户直接使用）和核心部分（为边缘部分服务）</strong><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205191942642.png" alt="image-20220519194256573"></p>
</li>
<li>
<p>从功能组成上，分为<strong>通信子网（数据通信）和资源子网（资源共享/数据处理）</strong></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205191939612.png" alt="image-20220519193933555"></p>
<h3 id="计算机网络分类"><a class="markdownIt-Anchor" href="#计算机网络分类"></a> 计算机网络分类</h3>
<ul>
<li>
<p>分布范围分</p>
<ul>
<li>
<p>广域网（WAN）：交换技术 长距离通信</p>
</li>
<li>
<p>城域网（MAN）</p>
</li>
<li>
<p>局域网（LAN）：广播技术</p>
</li>
<li>
<p>个人区域网（RAN）</p>
<p><mark>注意:若中央处理器之间的距离非常近(如仅1m的数量级或甚至更小)，则一般称为多处理器系统，而不称为计算机网络</mark>。</p>
</li>
</ul>
</li>
<li>
<p>按使用者分</p>
<ul>
<li>公用网</li>
<li>专用网</li>
</ul>
</li>
<li>
<p>按交换技术分类</p>
<ul>
<li>
<p>电路交换</p>
<p>在源结点和目的结点之间建立一条专用的通路用于传送数据，包括建立连接、传输数据和断开连接三个阶段。<strong>最典型的电路交换网是传统电话网络。</strong><br>
该类网络的主要特点是整个报文的比特流连续地从源点直达终点，好像是在一条管道中传送。<strong>优点是数据直接传送、时延小。缺点是线路利用率低、不能充分利用线路容量、不便于进行差错控制。</strong></p>
</li>
<li>
<p>报文交换</p>
<p>用户数据加上源地址、目的地址、校验码等辅助信息，然后封装成报文。整个报文传送到相邻结点，全部存储后，再转发给下一个结点，重复这一过程直到到达目的结点。每个报文可以单独选择到达目的结点的路径。<br>
报文交换网络也称<strong>存储-转发</strong>网络，主要特点是整个报文先传送到相邻结点，全部存储后查找转发表，转发到下一个结点。<strong>优点是可以较为充分地利用线路容量，可以实现不同链路之间不同数据传输速率的转换，可以实现格式转换，可以实现一对多、多对一的访问，可以实现差错控制。缺点是增大了资源开销(如辅助信息导致处理时间和存储资源的开销)，增加了缓冲时延，需要额外的控制机制来保证多个报文的顺序不乱序，缓冲区难以管理（因为报文的大小不确定，接收方在接收到报文之前不能预知报文的大小)。</strong></p>
</li>
<li>
<p>分组交换</p>
<p>也称包交换网络。其原理是，将数据分成较短的面定长度的数据块，在每个数据块中加上目的地址、源地址等辅助信息组成分组(包)，以<strong>存储-转发</strong>方式传输。其主要特点是单个分组（它只是整个报文的一部分）传送到相邻结点，存储后查找转发表，转发到下一个结点。<strong>除具备报文交换网络的优点外，分组交换网络还具有自身的优点:缓冲易于管理;包的平均时延更小，网络占用的平均缓冲区更少﹔更易于标准化;更适合应用。现在的主流网络基本上都可视为分组交换网络。</strong></p>
</li>
</ul>
</li>
<li>
<p>按拓扑结构分类</p>
<p>网络拓扑结构是指由<strong>网中结点（路由器、主机等）与通信线路（网线)之间</strong>的几何关系（如总线形、环形）表示的网络结构，<strong>主要指通信子网的拓扑结构</strong>。</p>
<p>按网络的拓扑结构，主要分为总线形、星形、环形和网状网络等，<strong>星形、总线形和环形网络多用于局域网,网状网络多用于广域网。</strong></p>
<ul>
<li>总线型  优点：建网容易、增减结点容易、节省线路。缺点：重负载时通信效率不高，任意一处对故障敏感</li>
<li>星型  便于集中控制和管理，端用户之间的通信必经过中央设备 成本高，中央对故障敏感</li>
<li>环型 eg：令牌环局域网</li>
<li>网状 可靠性高 控制复杂 线路成本高</li>
</ul>
</li>
<li>
<p>按传输技术分</p>
<ul>
<li>
<p>广播式网络：共享公共通信信道</p>
</li>
<li>
<p>点对点网络：<strong>使用分组存储转发和路由选择机制</strong></p>
<p>广域网基本都属于点对点</p>
</li>
</ul>
</li>
<li>
<p>按传输介质分</p>
<ul>
<li>有线网络</li>
<li>无线网络</li>
</ul>
</li>
</ul>
<h3 id="计算机网络性能指标"><a class="markdownIt-Anchor" href="#计算机网络性能指标"></a> 计算机网络性能指标</h3>
<ul>
<li>
<p>速率：数据率/数据传输率/比特率</p>
<p>​            单位b/s，kb/s，Mb/s，Gb/s，Tb/s</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205192000587.png" alt="image-20220519200024520"></p>
</li>
<li>
<p>带宽：表示网络的通信线路传送数据的能力，指单位时间内从网络中某一点到另一点所能通过的**“最高数据率”**，单位同速率</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205192002101.png" alt="image-20220519200229039"></p>
<ul>
<li>
<p>吞吐量：单位时间欸通过某个网络（信道/接口）的数据量。单位同上。受网络带宽和网络额定速率所影响。</p>
</li>
<li>
<p>时延：指数据(报文/分组/比特流）从网络(或链路）的一端传送到另一端所需的时间。也叫延迟或迟延。单位是s。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205192005278.png" alt="image-20220519200544187"></p>
</li>
</ul>
<p>​		注意:做题时，排队时延和处理时延一般可忽略不计（除非题目另有说明)。<strong>另外，对于高速链路，提高的仅是数据发送速率而非比特在链路上的传播速率。提高数据的发送速率只是为了减少数据的发送时延。</strong></p>
<ul>
<li>时延带宽积：称为以比特为单位的链路长度</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205192008164.png" alt="image-20220519200827094"></p>
<ul>
<li>
<p>往返时延：指从发送端发出一个短分组，到发送端收到来自接收端的确认(接收端收到数据后立即发送确认)，总共经历的时延。在互联网中，往返时延还包括各中间结点的处理时延、排队时延及转发数据时的发送时延。</p>
<p>其中max为传播时延*2</p>
</li>
<li>
<p>信道利用率：指出某一信道有百分之多少的时间是有数据通过的，即<strong>信道利用率=有数据通过时间/(有+无)数据通过时间。</strong></p>
</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205192011506.png" alt="image-20220519201121428" style="zoom:200%;">
<h2 id="计算机网络体系结构与参考模型"><a class="markdownIt-Anchor" href="#计算机网络体系结构与参考模型"></a> 计算机网络体系结构与参考模型</h2>
<p><strong>分层基本原则</strong></p>
<ul>
<li>各层之间相互独立，每层只实现一种相对独立的功能。</li>
<li>每层之间界面自然清晰，易于理解，相互交流尽可能少。</li>
<li>结构上可分割开。每层都采用最合适的技术来实现。</li>
<li>保持下层对上层的独立性，上层单向使用下层提供的服务。</li>
<li>整个分层结构应该能促进标准化工作。</li>
</ul>
<p>实体:第n层中的活动元素称为n层实体。同一层的实体叫<strong>对等实体</strong>。</p>
<p>协议:为进行网络中的对等实体数据交换而建立的规则、标准或约定称为网络协议。<strong>【水平】</strong></p>
<p>​	语法:规定传输数据的格式</p>
<p>​	语义:规定所要完成的功能</p>
<p>​	同步:规定各种操作的顺序</p>
<p>接口（访问服务点SAP) :上层使用下层服务的入口。</p>
<p>服务:下层为相邻上层提供的功能调用。<strong>【垂直】</strong></p>
<p><strong>注意：在一层完成的全部功能并非都称为服务，只有那些能够被高层实体“看得见”的功能才能称为服务。</strong></p>
<p>我们把计算机网络的各层及其协议的集合称为网络的体系结构（从<strong>功能</strong>上描述）</p>
<p>在各个层次中，每个报文都分为两部分SDU PCI，他们共同组成了PDU</p>
<ul>
<li>
<p>SDU服务数据单元:为完成用户所要求的功能而应传送的数据。</p>
</li>
<li>
<p>PCI协议控制信息:控制协议操作的信息。</p>
</li>
<li>
<p>PDU协议数据单元:对等层次之间传送的数据单位。</p>
</li>
</ul>
<p>层次结构的具体含义：</p>
<ul>
<li>第n层的实体不仅要使用第n-1层的服务来实现自身定义的功能，还要向第n +1层提供本层的服务，该服务是第n层及其下面各层提供的服务总和。</li>
<li>最低层只提供服务，是整个层次结构的基础;中间各层既是下一层的服务使用者，又是上一层的服务提供者;最高层面向用户提供服务。</li>
<li>上一层只能通过相邻层间的接口使用下一层的服务，而不能调用其他层的服务:下一层所提供服务的实现细节对上一层透明。</li>
<li>两台主机通信时，对等层在逻辑上有一条直接信道，表现为不经过下层就把信息传送到对方。</li>
</ul>
<p><strong>仅仅在相邻层间有接口，且所提供服务的具体实现细节对上一层完全屏蔽。</strong></p>
<p><strong>体系结构是抽象的，而实现是指能运行的一些软件和硬件。</strong></p>
<h3 id="osi参考模型"><a class="markdownIt-Anchor" href="#osi参考模型"></a> OSI参考模型</h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205201108506.png" alt="image-20220520110838322"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205201110548.png" alt="image-20220520111021455"></p>
<ul>
<li>
<p>应用层：所有能和用户交互产生网络流量的程序 FTP SMTP HTTP</p>
</li>
<li>
<p>表示层：处理两个通信系统中交换信息的表示方式  JPEG ASCII</p>
<ul>
<li>格式变换</li>
<li>加密解密</li>
<li>压缩和恢复</li>
</ul>
</li>
<li>
<p>会话层：向表示层实体/用户进程建立连接并在连接上有序地传输数据，也叫建立同步 ADSP ASP</p>
<ul>
<li>建立、管理、终止会话</li>
<li>可以使用<strong>校验点</strong>在会话通信失效时从校验点/同步点继续恢复通信，实现数据同步。（适用于大文件）</li>
</ul>
</li>
<li>
<p>传输层：负责主机中两个进程的通信，即<strong>端到端的通信</strong>。（因为一个进程由由一个端口来标识，所以称为端到端）传输单位是<strong>报文段或用户数据报</strong></p>
<ul>
<li>
<p>提供可靠/不可靠传输</p>
</li>
<li>
<p>差错控制</p>
</li>
<li>
<p>流量控制</p>
</li>
<li>
<p>复用分用：</p>
<p>复用︰多个应用层进程可同时使用下面运输层的服务。<br>
分用:   运输层把收到的信息分别交付给上面应用层中相应的进程。</p>
</li>
</ul>
</li>
<li>
<p>网络层：任务是把分组从源端传到目的端，为分组交换网上的不同主机提供和通信服务。传输单位是<strong>数据报</strong> IP\IPX\ICMP\IGMP\ARP\RARP\OSPF</p>
<ul>
<li>路由选择:选择最佳路径</li>
<li>流量控制</li>
<li>拥塞控制</li>
<li>差错控制</li>
</ul>
</li>
<li>
<p>数据链路层：任务是把网络层传下啦的数据报组装成帧。传输单位是<strong>帧</strong>。</p>
<ul>
<li>成帧（定义帧的开始和结束）</li>
<li>差错控制（可能帧错/位错）</li>
<li>流量控制</li>
<li>传输控制（信道的访问/接入控制）</li>
</ul>
</li>
<li>
<p>物理层：任务是在物理媒体上实现比特流的透明传输。传输单位是<strong>比特</strong></p>
<ul>
<li>定义接口特性</li>
<li>定义传输模式 单工、半双工、双工</li>
<li>定义传输速率</li>
<li>比特同步</li>
<li>比特编码</li>
</ul>
</li>
</ul>
<h3 id="tcpip参考模型"><a class="markdownIt-Anchor" href="#tcpip参考模型"></a> TCP/IP参考模型</h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205201955682.png" alt="image-20220520195510581"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205201956316.png" alt="image-20220520195600258"></p>
<p>网际层是TCP/IP模型的关键部分</p>
<p>传输层与OSI中的传输层功能类似，使用以下两种协议：</p>
<ul>
<li>TCP：面向连接 可靠</li>
<li>UDP：无连接 不可靠 “尽最大努力交付”</li>
</ul>
<p>应用层包括所有的高级协议 eg：虚拟终端协议（Telent），文件传输协议（FTP）、域名解析（DNS）、电子邮件协议（SMTP）、超文本传输协议（HTTP）。</p>
<p><strong>TCP/IP与OSI模型的比较</strong></p>
<ul>
<li>
<p><strong>相似之处</strong></p>
<ul>
<li>分层</li>
<li>基于独立的协议栈</li>
<li>可以实现异构网络互连</li>
</ul>
</li>
<li>
<p><strong>不同点</strong></p>
<ul>
<li>
<p>OSI定义了三点：服务、协议、接口</p>
</li>
<li>
<p>OSI先出现没有特别偏向协议 TCP/IP不会出现协议不匹配模型的情况</p>
</li>
<li>
<p>TCP/IP设计之初就考虑了异构网互联 将IP作为重要层次</p>
</li>
<li>
<p><strong>OSI参考模型在网络层支持无连接和面向连接的通信，但在传输层仅有面向连接的通信。而TCP/IP模型认为可靠性是端到端的问题，因此它在网际层仅有一种无连接的通信模式，但传输层支持无连接和面向连接两种模式</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205202006093.png" alt="image-20220520200617028"></p>
</li>
</ul>
</li>
</ul>
<p><strong>5层参考模型</strong></p>
<p>综合上述两种的优点</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205202007615.png" alt="image-20220520200717544"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205202007993.png" alt="image-20220520200732915"></p>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title>张宇1000题错题</title>
    <url>/2022/04/06/%E5%BC%A0%E5%AE%871000%E9%A2%98%E9%94%99%E9%A2%98/</url>
    <content><![CDATA[<h1 id="第一讲"><a class="markdownIt-Anchor" href="#第一讲"></a> 第一讲</h1>
 <div class="pdfobject-container" data-target="/pdf/张宇1000题第1讲错题.pdf" data-height="500px"></div>
<h1 id="第二讲第三讲"><a class="markdownIt-Anchor" href="#第二讲第三讲"></a> 第二讲&amp;&amp;第三讲</h1>
<div class="pdfobject-container" data-target="/pdf/张宇1000题第2、3讲错题.pdf" data-height="500px"></div>
<h1 id="第四讲"><a class="markdownIt-Anchor" href="#第四讲"></a> 第四讲</h1>
<div class="pdfobject-container" data-target="/pdf/张宇1000题第4讲错题.pdf" data-height="500px"></div>
<h1 id="第五讲"><a class="markdownIt-Anchor" href="#第五讲"></a> 第五讲</h1>
<div class="pdfobject-container" data-target="/pdf/张宇1000题第5讲错题.pdf" data-height="500px"></div>
<h1 id="第六讲"><a class="markdownIt-Anchor" href="#第六讲"></a> 第六讲</h1>
<div class="pdfobject-container" data-target="/pdf/张宇1000题第6讲错题.pdf" data-height="500px"></div>
<h1 id="第八讲"><a class="markdownIt-Anchor" href="#第八讲"></a> 第八讲</h1>
<div class="pdfobject-container" data-target="/pdf/张宇1000题第8讲错题.pdf" data-height="500px"></div>
<h1 id="第九讲"><a class="markdownIt-Anchor" href="#第九讲"></a> 第九讲</h1>
<div class="pdfobject-container" data-target="/pdf/张宇1000题第9讲错题.pdf" data-height="500px"></div>
<h1 id="第十讲"><a class="markdownIt-Anchor" href="#第十讲"></a> 第十讲</h1>
<div class="pdfobject-container" data-target="/pdf/张宇1000题第10讲错题.pdf" data-height="500px"></div>
<h1 id="第十一讲"><a class="markdownIt-Anchor" href="#第十一讲"></a> 第十一讲</h1>
<div class="pdfobject-container" data-target="/pdf/张宇1000题第11讲错题.pdf" data-height="500px"></div>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>考研</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>三年a班有感</title>
    <url>/2022/01/17/%E4%B8%89%E5%B9%B4a%E7%8F%AD%E6%9C%89%E6%84%9F/</url>
    <content><![CDATA[<p>​        怎么说呢，我几乎不看日剧，看过为数不多印象很深的也只有十元的《非自然死亡》。看这部剧的契机主要就是当时期末刚考完+游戏一直输不想玩+无聊刷B站刷到 看这封面男主很帅就打开看看，看着看着就上头了。从结果上帝视角来说，我觉得这是一部<strong>揭示道理深刻</strong>，情节离谱却跌宕的好剧。</p>
<p>​        简单说，主要讲的是，某高中三年a班即将毕业的29名学生（30-1），在临毕业的最后十天，被美术老师柊一颯“绑架”作为人质，目的找出班上自杀女生景山澪奈的真正原因。（<em>我的观感是看这个剧每集都像大结局。。。</em>）</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171009964.png" alt="image-20220117100945621"></p>
<p>​      <mark>下面就是一些小小的体会</mark></p>
<p>​		我觉得这个日剧好的地方就在于从很多方面揭示了不止是日本乃至中国全世界人类出现的问题，而且用这种极端的方式，弘扬了一位教师应做的，很难不让人印象深刻。</p>
<ul>
<li><strong>欺软怕硬</strong> 剧中男主柊一颯作为一名老师，在班级上没有得到丝毫的尊重，班级上任意一名同学都随意耻笑、捣乱甚至人身攻击，而在使用炸弹威慑之后，没有一个人对老师的要求说漏，观感就像大老虎变成了小猫咪？（bushi），反差令人发笑</li>
<li><strong>为了保全自己失去理智</strong> 很简单，柊一颯要求找出景山死亡真相，否则杀了一个人，与景山关系最好的小樱被要求代表回答，结果是小樱为了保全大家说是因为自己，显然回答错误，得知要杀一个人的同学们惊慌失措，一致让柊老师杀了小樱，真是气抖冷。。。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171025140.jpg" alt="src=http___b-ssl.duitang.com_uploads_item_201902_07_20190207213047_escmd.thumb.700_0.jpg&amp;refer=http___b-ssl.duitang"></p>
<ul>
<li>
<p><strong>利己</strong> 剧中景山之前的“朋友”宇佐美接近景山 成为朋友只是为了自己在MINDVOICE上获得更多的粉丝 毕竟景山是全国游泳大赛冠军 天才美少女 而在景山发现了宇佐美的真实意图后 故意疏远她 选择了真心与自己作为朋友的小樱 宇佐美为此不惜陷害景山（就是一系列低俗的恶作剧） 最终酿成大祸</p>
<p><em>为了减少剧透，先就列举这几个</em></p>
</li>
</ul>
<p>​       其实还有很多这些方面的<strong>劣根</strong>性问题存在，但这部剧主要揭示的问题毫无疑问是 <strong>校园暴力</strong>和 <strong>网络暴力</strong> 。景山作为全国游泳大赛冠军，美好的未来，因为身边同学某些奇奇怪怪的原因，被做假视频陷害，被全班孤立，最好的朋友甚至也渐行渐远，网络上的舆论由赞美变成了辱骂，就在这种每天精神折磨下，景山好像见到路人也会对她指指点点羞辱她，终于受不了了选择死亡。</p>
<p>​		在这个网络愈发发达的社会，信息碎片化传播的时代，所见的每一则新闻都可能反转反转再反转，而身为吃瓜群众的我们选择的却是随大流，舆论方向在哪我们就说什么，失去了思考的能力，可以说是被牵着鼻子走，确实，这和无良媒体的报道脱不了干系，但在网络上发表言论前，最好的选择是思考。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171043781.png" alt="image-20220117104346561"></p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171040233.png" alt="image-20220117104052506" style="zoom:80%;">
<p><strong>共情</strong> 如果角色互换 你会怎么样？既然如此，为什么不能怀揣善意对别人呢？</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171042974.png" alt="image-20220117104235605"></p>
<p><strong>所谓网络言论自由这层美丽的糖衣包裹着数不清的言语利刃，你的一句话，或许就是别人崩溃的导火索，言论自由不是不负责任没脑子言论，是网络社会的多样、包容，所以，说一句话前，务必三思。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171049842.png" alt="image-20220117104934191"></p>
<p>最后再次强推苏打主演的这部剧，剧好看是一方面，苏打是真帅啊…不会有人不喜欢帅哥吧）</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201171051880.png" alt="image-20220117105140793"></p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>日剧</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch自学笔记</title>
    <url>/2022/01/14/PyTorch%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="pytorch"><a class="markdownIt-Anchor" href="#pytorch"></a> PyTorch</h1>
<h2 id="加载数据集dataset类实战"><a class="markdownIt-Anchor" href="#加载数据集dataset类实战"></a> 加载数据集&amp;&amp;Dataset类实战</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br></pre></td></tr></table></figure>
<p>torch工具区的dataset区引入抽象类Dataset</p>
<p>所有子类继承他 并需要重写_<em>getitem</em>_ _<em>len_</em>,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span>(<span class="params">Dataset</span>):</span><span class="comment">#继承</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,root_dir,label_dir</span>):</span><span class="comment">#初始化</span></span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.label_dir = label_dir</span><br><span class="line">        self.path = os.path.join(self.root_dir,self.label_dir)</span><br><span class="line">        self.img_path = os.listdir(self.path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, idx</span>):</span><span class="comment">#重写 获取每个图片</span></span><br><span class="line">        img_name = self.img_path[idx]</span><br><span class="line">        img_item_path = os.path.join(self.root_dir,self.label_dir,img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        label = self.label_dir</span><br><span class="line">        <span class="keyword">return</span> img,label</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span><span class="comment">#重写 图片数量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br></pre></td></tr></table></figure>
<p>引入os的包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.path = os.path.join(self.root_dir,self.label_dir)</span><br><span class="line">self.img_path = os.listdir(self.path)</span><br></pre></td></tr></table></figure>
<p>os.path.join合并目录</p>
<p>os.listdir读取目录 返回一个列表</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142116354.png" alt="image-20220107160037203"></p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142029328.png" alt="image-20220107160013774" style="zoom:80%;">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure>
<p>读取图片的包&amp;&amp;展示图片</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142029142.png" alt="image-20220107160138571"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142029425.png" alt="image-20220107160152086"></p>
<p>类实例化后的数据集可以合并</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ants_dataset = MyData(root_dir,ants_label_dir)</span><br><span class="line">bees_dataset = MyData(root_dir,bees_label_dir)</span><br><span class="line">train_dataset= ants_dataset + bees_dataset</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(train_dataset))</span><br></pre></td></tr></table></figure>
<h2 id="tensorboard使用"><a class="markdownIt-Anchor" href="#tensorboard使用"></a> tensorboard使用</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)<span class="comment">#实例化这个类 参数代表文件夹名字 文件夹里面是生成的事件</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#简单例子 描绘y=5x </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;y=5x&quot;</span>,<span class="number">5</span>*i,i)<span class="comment">#参数： 题目 纵轴值 横轴值</span></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030197.png" alt="image-20220109192046512"></p>
<p><strong>图片可查看很多东西</strong></p>
<p>**<a href="http://localhost:6006/**%E4%B8%BA%E9%BB%98%E8%AE%A4tensorboard%E7%BD%91%E5%9D%80">http://localhost:6006/**为默认tensorboard网址</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030992.png" alt="image-20220109192756643"></p>
<p>后面加 --port=xxxx改端口号（保证与其他服务器不同）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">image_path = <span class="string">&quot;datasets/train/ants_image/5650366_e22b7e1065.jpg&quot;</span></span><br><span class="line">image_path2=<span class="string">&quot;datasets/train/bees_image/16838648_415acd9e3f.jpg&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">img2 = Image.<span class="built_in">open</span>(image_path2)</span><br><span class="line">img_array = np.array(img)</span><br><span class="line">img_array2 = np.array(img2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(img_array))</span><br><span class="line"><span class="built_in">print</span>(img_array.shape)</span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">writer.add_image(<span class="string">&quot;bees&quot;</span>,img_array2,<span class="number">1</span>,dataformats=<span class="string">&#x27;HWC&#x27;</span>)<span class="comment">#add_image支持的图片类型有要求  dataformats保证图片格式与读取相同（高、宽、频道数）</span></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030238.png" alt="image-20220109193411068"></p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030525.png" alt="image-20220109193552629" style="zoom:75%;">
<p><em>使用同一标题 不同迭代次数的图片显示可滑动查看</em></p>
<h2 id="常见transforms的使用"><a class="markdownIt-Anchor" href="#常见transforms的使用"></a> 常见transforms的使用</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2<span class="comment">#opencv的包 可以直接以array的形式读取图片</span></span><br></pre></td></tr></table></figure>
<h3 id="totensor"><a class="markdownIt-Anchor" href="#totensor"></a> ToTensor</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##totensor</span></span><br><span class="line">img_path = <span class="string">&quot;datasets/train/bees_image/29494643_e3410f0d37.jpg&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">tensor = transforms.ToTensor()</span><br><span class="line">tensor_img = tensor(img)</span><br><span class="line"><span class="built_in">print</span>(tensor_img)</span><br><span class="line"></span><br><span class="line">cv_img = cv2.imread(img_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(cv_img))<span class="comment">#opencv方式读入 转换同上</span></span><br></pre></td></tr></table></figure>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030910.png" alt="image-20220110121741841" style="zoom:67%;">
<h3 id="normalize"><a class="markdownIt-Anchor" href="#normalize"></a> Normalize</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#normalize</span></span><br><span class="line">trans_norm = transforms.Normalize([<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>],[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>])</span><br><span class="line">img_norm = trans_norm(tensor_img)</span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">writer.add_image(<span class="string">&quot;tensor_img&quot;</span>,tensor_img,<span class="number">1</span>)</span><br><span class="line">writer.add_image(<span class="string">&quot;norm_img&quot;</span>,img_norm)</span><br></pre></td></tr></table></figure>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030757.png" alt="image-20220110122002199" style="zoom:67%;">
<p>初始化带上平均值和标准差（以列表形式） 列表的长度取决于图片的频道数</p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030916.png" alt="image-20220110122123325" style="zoom:67%;">
<p>效果如上 会改变色调</p>
<h3 id="resize"><a class="markdownIt-Anchor" href="#resize"></a> Resize</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#resize</span></span><br><span class="line">trans_resize = transforms.Resize((<span class="number">512</span>,<span class="number">512</span>))</span><br><span class="line">img_resize = trans_resize(img)</span><br><span class="line">img_resize = tensor(img_resize)</span><br><span class="line">writer.add_image(<span class="string">&quot;resize&quot;</span>,img_resize,<span class="number">0</span>)</span><br><span class="line">img_resize2 = trans_resize(tensor_img)</span><br><span class="line">writer.add_image(<span class="string">&quot;resize2&quot;</span>,img_resize2,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142030610.png" alt="image-20220110122327732"></p>
<p>改变图片尺寸 输入可以是PIL类型或直接输入tensor类型</p>
<p>初始化时可以是一个元组（即图片大小） 若只输入int星 可理解为等比缩放</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031734.png" alt="image-20220110122603553"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031503.png" alt="image-20220110122619246"></p>
<p>原图-》改变后的</p>
<h3 id="compose"><a class="markdownIt-Anchor" href="#compose"></a> Compose</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#resize2  compose</span></span><br><span class="line">trans_resize2 = transforms.Resize(<span class="number">512</span>)</span><br><span class="line">trans_compose = transforms.Compose([trans_resize2,tensor])</span><br><span class="line">img_resize3 = trans_compose(img)</span><br><span class="line">writer.add_image(<span class="string">&quot;compose_resize&quot;</span>,img_resize3,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031732.png" alt="image-20220110122747177"></p>
<p>初始化以列表形式 列表里元素是transforms类型 （要按照执行顺序输入）</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031598.png" alt="image-20220110122851471"></p>
<p>为等比例缩放后的图片 按顺序执行compose里的transform</p>
<h3 id="randomcrop"><a class="markdownIt-Anchor" href="#randomcrop"></a> RandomCrop</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#randomcrop随即裁剪</span></span><br><span class="line">trans_randomcrop = transforms.RandomCrop(<span class="number">50</span>)</span><br><span class="line">trans_compose2 = transforms.Compose([trans_randomcrop,tensor])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img_crop = trans_compose2(img)</span><br><span class="line">    writer.add_image(<span class="string">&quot;randomcrop&quot;</span>,img_crop,i)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031790.png" alt="image-20220110123155582"></p>
<p>随机裁剪 初始化的参数可以指定裁剪大小 或 int类型默认裁剪大小为（int * int）</p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031380.png" alt="image-20220110123326809" style="zoom:150%;">
<p>一部分 可以拖拽查看十个部分</p>
<p><strong>其余方法 可查看官方文档 获取输入输出信息及格式 按住CTRL进入即可</strong></p>
<h2 id="torchvision中数据集使用"><a class="markdownIt-Anchor" href="#torchvision中数据集使用"></a> torchvision中数据集使用</h2>
<p>官网找torchvision.datasets</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031014.png" alt="image-20220113143155193"></p>
<p>以CIFAR数据集为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">]</span><br><span class="line">)</span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./datasets_CIFAR10&quot;</span>, train=<span class="literal">True</span>, transform=dataset_transform, download=<span class="literal">True</span>)</span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./datasets_CIFAR10&quot;</span>, train=<span class="literal">False</span>, transform=dataset_transform, download=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<ul>
<li>root设定数据集路径</li>
<li>train 设置是否为训练集（反之则为测试集）</li>
<li>tranform 采取的一系列transform操作</li>
<li>download 是否下载</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(test_set[<span class="number">0</span>])<span class="comment">#返回图片和 tag</span></span><br><span class="line"><span class="built_in">print</span>(test_set.classes)<span class="comment">#每一个测试集图片的标签集合</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;datasets_transform&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img, tag = test_set[i]</span><br><span class="line">    writer.add_image(<span class="string">&quot;test_img_resize2&quot;</span>, img, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031800.png" alt="image-20220113143933803"></p>
<h2 id="dataloader使用"><a class="markdownIt-Anchor" href="#dataloader使用"></a> dataloader使用</h2>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031798.png" alt="image-20220113144104917" style="zoom:80%;">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./datasets_CIFAR10&quot;</span>,train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">4</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;dataloader&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    step = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        imgs, tags = data</span><br><span class="line">        writer.add_images(<span class="string">&quot;eopch:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch),imgs, step)</span><br><span class="line">        step=step+<span class="number">1</span></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p>dataloader参数</p>
<ul>
<li>dataset 选择的数据集</li>
<li>batch_size一批选择的数量</li>
<li>shuffle 多次选择是否洗牌（打乱顺序）</li>
<li>num_workers一般为0 表示线程工作数</li>
<li>drop_last 最后一页数量不够时是否取余或全部删除</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031007.png" alt="image-20220113144506417"></p>
<p>​                                                                                                       说明shuffle</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201142031597.png" alt="image-20220113144744801"></p>
<p>​                                                                                                       drop_last对比</p>
<h2 id="神经网络基本骨架nnmoudle"><a class="markdownIt-Anchor" href="#神经网络基本骨架nnmoudle"></a> 神经网络基本骨架nn.moudle</h2>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161655823.png" alt="image-20220116165510672"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ssy</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Ssy, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span></span><br><span class="line">        output = <span class="built_in">input</span> * <span class="number">2</span> +<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">ssy = Ssy()</span><br><span class="line">x = torch.tensor(<span class="number">341</span>)</span><br><span class="line">output = ssy(x)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>
<p>此处即把输入的tenso类型341 转换为341*2+1输出</p>
<p>即网络内部是（*2+1）的工作</p>
<h2 id="卷积层"><a class="markdownIt-Anchor" href="#卷积层"></a> 卷积层</h2>
<p><strong>卷积层具体原理见机器学习</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161701841.png" alt="image-20220116170151741"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161703820.png" alt="image-20220116170311739"></p>
<p>参数：</p>
<ul>
<li>输入频道数：一般为3（RGB三通道）</li>
<li>输出频道数</li>
<li>内核大小</li>
<li>步长：一次走几步</li>
<li>填充：默认为0</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载数据集</span></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&quot;./datasets_CIFAR10&quot;</span>,train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor())</span><br><span class="line"><span class="comment">#调用dataloader</span></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;conv2d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ssy</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Ssy, self).__init__()</span><br><span class="line">        <span class="comment">#卷积操作 变为6通道 内核大小为3（具体矩阵会自动变化调整）</span></span><br><span class="line">        self.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span><span class="comment">#神经网络中实现卷积层</span></span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">ssy = Ssy()</span><br><span class="line">step=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs, target = data</span><br><span class="line">    output = ssy(imgs)</span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line">    writer.add_images(<span class="string">&quot;imgs&quot;</span>,imgs,step)</span><br><span class="line"><span class="comment">#需要把卷积后的图像重新变为3通道 否则不能显示</span></span><br><span class="line">    output = torch.reshape(output,(-<span class="number">1</span>,<span class="number">3</span>,<span class="number">30</span>,<span class="number">30</span>))</span><br><span class="line">    writer.add_images(<span class="string">&quot;imgs_conv2d&quot;</span>,output,step)</span><br><span class="line">    step=step+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161707223.png" alt="image-20220116170755123"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201161708067.png" alt="image-20220116170814942"></p>
<p><em>由于3通道变为6通道 一页显示了128个图片</em></p>
<h2 id="池化层"><a class="markdownIt-Anchor" href="#池化层"></a> 池化层</h2>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172143303.png" alt="image-20220117214320130"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172143392.png" alt="image-20220117214338303"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172200524.png" alt="image-20220117220057439"></p>
<p>参数：</p>
<ul>
<li>
<p>内核大小</p>
</li>
<li>
<p>步长：默认为内核大小</p>
</li>
<li>
<p>填充</p>
</li>
<li>
<p>空洞大小 详见</p>
</li>
<li>
<p>ceilmode：选择是否舍弃</p>
</li>
</ul>
<h3 id="池化原理"><a class="markdownIt-Anchor" href="#池化原理"></a> 池化原理</h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172154489.png" alt="image-20220117215439360"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172155642.png" alt="image-20220117215518562"></p>
<p>即 内核类似卷积操作覆盖输入矩阵上元素 并选出最大的作为输出</p>
<p><strong>与卷积不同的是 池化的步长默认为内核大小</strong></p>
<p>当遇到如上情况 ceil_mode=True即不舍弃残缺的矩阵 从中选择最大的</p>
<p>ceil_mode=False 即舍弃矩阵 内核继续向下移动</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172158356.png" alt="image-20220117215834265"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">data = torchvision.datasets.CIFAR10(<span class="string">&quot;./datasets_CIFAR10&quot;</span>, train=<span class="literal">False</span>, transform= torchvision.transforms.ToTensor() )</span><br><span class="line"></span><br><span class="line">dataloader= DataLoader(data,batch_size=<span class="number">64</span> )</span><br><span class="line"></span><br><span class="line">matrix_in = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">                          [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">                          [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                          [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                          [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]], dtype= torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(matrix_in, (-<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>))<span class="comment">#注意输入的格式</span></span><br><span class="line">                                            <span class="comment">#-1表示模糊 即函数自适应调整大小</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;max_pool&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ssy</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Ssy, self).__init__()</span><br><span class="line">        self.maxpool = MaxPool2d(kernel_size=<span class="number">3</span>, ceil_mode=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span></span><br><span class="line">        output = self.maxpool(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">ssy = Ssy()</span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    img, tag = data</span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, img, step)</span><br><span class="line">    output = ssy(img)</span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output,step)</span><br><span class="line">    step = step+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172202156.png" alt="image-20220117220221068"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201172202173.png" alt="image-20220117220238106"></p>
<p>显而易见，池化后图片变模糊了，神经网络中常用池化层减少输入数据量，保留必要纹理信息，加快训练速度。</p>
<h2 id="非线性激活"><a class="markdownIt-Anchor" href="#非线性激活"></a> 非线性激活</h2>
<h3 id="relu"><a class="markdownIt-Anchor" href="#relu"></a> ReLU</h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192019307.png" alt="image-20220119201946145"></p>
<p>inplace为true即输出直接替换输入</p>
<p>置为false生成一个新的变量输出</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192020126.png" alt="image-20220119202053032"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU, Sigmoid</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>,-<span class="number">1</span>],</span><br><span class="line">                     [-<span class="number">25</span>,<span class="number">100.2</span>]],dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span>= torch.reshape(<span class="built_in">input</span>,(-<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ssy</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Ssy, self).__init__()</span><br><span class="line">        self.relu1 = ReLU()</span><br><span class="line">        <span class="comment">#self.sigmoid = Sigmoid()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span></span><br><span class="line">        output = self.relu1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">ssy = Ssy()</span><br><span class="line">output = ssy(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192022910.png" alt="image-20220119202233849"></p>
<p>很明显结果与截断函数一致</p>
<h3 id="sigmoid"><a class="markdownIt-Anchor" href="#sigmoid"></a> Sigmoid</h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192023261.png" alt="image-20220119202320156"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192024904.png" alt="image-20220119202401836"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> ReLU, Sigmoid</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">data = torchvision.datasets.CIFAR10(<span class="string">&quot;./datasets_CIFAR10&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ssy</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Ssy, self).__init__()</span><br><span class="line">        self.relu1 = ReLU()</span><br><span class="line">        self.sigmoid = Sigmoid()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,<span class="built_in">input</span></span>):</span></span><br><span class="line">        output = self.sigmoid(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">ssy = Ssy()</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line"></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, tags = data</span><br><span class="line">    writer.add_images(<span class="string">&quot;imgs&quot;</span>,imgs,step)</span><br><span class="line">    imgs_sigmoid = ssy(imgs)</span><br><span class="line">    writer.add_images((<span class="string">&quot;imgs_sigmoid&quot;</span>), imgs_sigmoid,step)</span><br><span class="line">    step =step +<span class="number">1</span></span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192032330.png" alt="image-20220119203244227"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201192033618.png" alt="image-20220119203302536"></p>
<p>目的是增加一些非线性特征便于训练</p>
<h2 id="正则化层"><a class="markdownIt-Anchor" href="#正则化层"></a> 正则化层</h2>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261203671.png" alt="image-20220126120301483"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261203822.png" alt="image-20220126120346719"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261205180.png" alt="image-20220126120500105"></p>
<p>（详见官方文档）</p>
<h2 id="recurrent-layer"><a class="markdownIt-Anchor" href="#recurrent-layer"></a> Recurrent Layer</h2>
<p>多用于文字识别等</p>
<p>详见官方文档</p>
<h2 id="线性层"><a class="markdownIt-Anchor" href="#线性层"></a> 线性层</h2>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261240031.png" alt="image-20220126124050880"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202201261241006.png" alt="image-20220126124124912"></p>
<p><strong>目的是把5*5—&gt;1*25—&gt;1*10</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../dataset_/datasets_CIFAR10&quot;</span>, train=<span class="literal">False</span>, transform= torchvision.transforms.ToTensor())</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset,batch_size= <span class="number">64</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SSY</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SSY, self).__init__()</span><br><span class="line">        self.linear1 = Linear(<span class="number">196608</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span></span><br><span class="line">        output = self.linear1(<span class="built_in">input</span>)</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">ssy = SSY()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, tag = data</span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line">    <span class="comment"># imgs = torch.reshape(imgs, (1, 1, 1, -1))</span></span><br><span class="line">    imgs = torch.flatten(imgs)<span class="comment">#flatten即展平 作用与上相同</span></span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line">    output = ssy(imgs)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203041121963.png" alt="image-20220304112103630"></p>
<h2 id="sequential"><a class="markdownIt-Anchor" href="#sequential"></a> Sequential</h2>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071636179.png" alt="image-20220307163649019"></p>
<p><em>有点类似于transforms中的Compose。。</em></p>
<p>实例</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071639450.png" alt="Structure-of-CIFAR10-quick-model.png"></p>
<p>网络搭建根据图片顺序（卷积-池化-卷积-池化-卷积-池化-展平-线性层-线性层）</p>
<p><strong>计算卷积层stride与padding大小</strong></p>
<ul>
<li>
<p>根据公式</p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071643624.png" alt="image-20220307164323532" style="zoom:67%;">
</li>
<li>
<p>经验</p>
<p><mark>为了保持卷积后大小不会发生变化</mark></p>
<p>一般来说，在stride为1的情况下，padding等于奇数内核大小 <strong>一半的向下取整</strong>即（x-1）/2</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="comment">#网络中注释和非注释内容执行效果一致</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SSY</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SSY, self).__init__()</span><br><span class="line">        <span class="comment"># self.conv1 = Conv2d(3,32,5,padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool1 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.conv2 = Conv2d(32,32,5,padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool2 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.conv3 = Conv2d(32,64,5,padding=2)</span></span><br><span class="line">        <span class="comment"># self.maxpool3 = MaxPool2d(2)</span></span><br><span class="line">        <span class="comment"># self.flatten = Flatten()</span></span><br><span class="line">        <span class="comment"># self.linear1 = Linear(1024,64)</span></span><br><span class="line">        <span class="comment"># self.linear2 = Linear(64,10)</span></span><br><span class="line">        self.model1 = nn.Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        <span class="comment"># x = self.conv1(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool1(x)</span></span><br><span class="line">        <span class="comment"># x = self.conv2(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool2(x)</span></span><br><span class="line">        <span class="comment"># x = self.conv3(x)</span></span><br><span class="line">        <span class="comment"># x = self.maxpool3(x)</span></span><br><span class="line">        <span class="comment"># x = self.flatten(x)</span></span><br><span class="line">        <span class="comment"># x = self.linear1(x)</span></span><br><span class="line">        <span class="comment"># x = self.linear2(x)</span></span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">ssy = SSY()</span><br><span class="line"><span class="built_in">print</span>(ssy)</span><br><span class="line"></span><br><span class="line"><span class="comment">#一般为了检查网络构建参数是否正确</span></span><br><span class="line"><span class="built_in">input</span> = torch.ones((<span class="number">64</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">output = ssy(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../tensorboard_dirs/logs_seq&quot;</span>)</span><br><span class="line">writer.add_graph(ssy, <span class="built_in">input</span>)</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071649112.png" alt="image-20220307164933023" style="zoom:67%;">
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071650582.png" alt="image-20220307165027508" style="zoom:50%;">
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203071651380.png" alt="image-20220307165137299" style="zoom:67%;">
<p><em>使用tensorboard可以查看网络搭建具体情况，路线上会显示传输数据的大小</em></p>
<h2 id="loss-function"><a class="markdownIt-Anchor" href="#loss-function"></a> Loss Function</h2>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072301059.png" alt="image-20220307230114908" style="zoom:80%;">
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072302019.png" alt="image-20220307230232939" style="zoom:80%;">
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>], dtype=torch.float32)</span><br><span class="line">targets = torch.tensor([<span class="number">2</span>,<span class="number">4.5</span>,<span class="number">9</span>], dtype = torch.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># input = torch.reshape(input,(1,1,1,3))</span></span><br><span class="line"><span class="comment"># targets = torch.reshape(targets,(1,1,1,3))</span></span><br><span class="line"></span><br><span class="line">loss = nn.L1Loss()</span><br><span class="line">result = loss(<span class="built_in">input</span>, targets)</span><br><span class="line"></span><br><span class="line">loss_mse = nn.MSELoss()</span><br><span class="line">resu_mse = loss_mse(<span class="built_in">input</span>, targets)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)<span class="comment">##6.5/3</span></span><br><span class="line"><span class="built_in">print</span>(resu_mse)<span class="comment">#19.25/3</span></span><br></pre></td></tr></table></figure>
<h3 id="交叉熵"><a class="markdownIt-Anchor" href="#交叉熵"></a> 交叉熵</h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072315769.png" alt="image-20220307231532686"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.tensor([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>], dtype=torch.float32)</span><br><span class="line">loss_cro = nn.CrossEntropyLoss()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.shape)</span><br><span class="line">input2 = torch.reshape(<span class="built_in">input</span>,(<span class="number">1</span>,<span class="number">3</span>))<span class="comment">##直接使用input会报错，input的shape为[3]需要转变为[1,3]</span></span><br><span class="line"><span class="built_in">print</span>(input2.shape)</span><br><span class="line">y = torch.tensor([<span class="number">1</span>])</span><br><span class="line">res_cro = loss_cro(input2, y)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line">dataset = torchvision.datasets.CIFAR10(<span class="string">&quot;../dataset_/datasets_CIFAR10&quot;</span>,train=<span class="literal">False</span>,transform=torchvision.transforms.ToTensor(),download=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">dataloader = DataLoader(dataset,batch_size=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SSY</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(SSY, self).__init__()</span><br><span class="line">        self.model1 = nn.Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        x = self.model1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">ssy = SSY()</span><br><span class="line"></span><br><span class="line">loss_ = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">    imgs, tag = data</span><br><span class="line">    output = ssy(imgs)</span><br><span class="line">    res = loss_(output,tag)</span><br><span class="line">    <span class="comment"># print(res)</span></span><br><span class="line">    res.backward()<span class="comment">#利用反向传播确定梯度权重 如下图</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072320387.png" alt="image-20220307232004242"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203072320525.png" alt="image-20220307232025394"></p>
<h2 id="优化器"><a class="markdownIt-Anchor" href="#优化器"></a> 优化器</h2>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202203111151363.png" alt="image-20220311115121158"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssy = SSY()</span><br><span class="line"></span><br><span class="line">loss_ = nn.CrossEntropyLoss()</span><br><span class="line">optim = torch.optim.SGD(ssy.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    running_loss = <span class="number">0.00</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> dataloader:</span><br><span class="line">        imgs, tag = data</span><br><span class="line">        output = ssy(imgs)</span><br><span class="line">        res = loss_(output,tag)</span><br><span class="line">        <span class="comment"># print(res)</span></span><br><span class="line">        optim.zero_grad()<span class="comment">#梯度置0</span></span><br><span class="line">        res.backward()<span class="comment">#反向传播确定梯度参数</span></span><br><span class="line">        optim.step()<span class="comment">#更新参数（优化）</span></span><br><span class="line">        running_loss += res</span><br><span class="line">    <span class="built_in">print</span>(running_loss)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PyTorch</category>
      </categories>
      <tags>
        <tag>PyTorch基础</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>408数据结构一轮笔记</title>
    <url>/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1绪论"><a class="markdownIt-Anchor" href="#1绪论"></a> 1.绪论</h1>
<h2 id="数据结构基本概念"><a class="markdownIt-Anchor" href="#数据结构基本概念"></a> 数据结构基本概念</h2>
<h3 id="基本概念"><a class="markdownIt-Anchor" href="#基本概念"></a> 基本概念</h3>
<ul>
<li>
<p>数据</p>
<p>数据是<strong>信息的载体</strong>，是描述客观事物属性的数、字符及所有能输入到计算机 中<strong>并被计算机程序识别和处理</strong>的符号的集合。数据是计算机程序加工的原料。</p>
</li>
<li>
<p>数据元素、数据项</p>
<p><strong>数据元素</strong>是数据的基本单位，通常作为一个整体进行考虑和处理。 一个数据元素可由若干数据项组成，<strong>数据项</strong>是构成数据元素的不可分割的最小单位。</p>
</li>
<li>
<p>数据对象</p>
<p>数据对象是<strong>具有相同性质</strong>的数据元素的集合，是数据的一个子集。</p>
</li>
<li>
<p>数据类型</p>
<p>数据类型是一个值的集合和定义在刺激和上的一组操作的总称</p>
<ul>
<li>原子类型。其值不可再分的数据类型</li>
<li>结构类型。其值可以再分为若干成分的数据类型</li>
<li>抽象数据类型（ADT）。抽象数据组织及与之相关的操作。</li>
</ul>
</li>
<li>
<p>数据结构</p>
</li>
</ul>
<p>​		数据结构是相互之间存在<strong>一种或多种特定关系</strong>的数据元素的集合。</p>
<h3 id="数据结构三要素"><a class="markdownIt-Anchor" href="#数据结构三要素"></a> 数据结构三要素</h3>
<h4 id="1逻辑结构"><a class="markdownIt-Anchor" href="#1逻辑结构"></a> 1.逻辑结构</h4>
<p>​	<strong>与数据的存储无关，独立于计算机。</strong></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/202203231041042.png" alt="img"></p>
<h4 id="2存储结构物理结构"><a class="markdownIt-Anchor" href="#2存储结构物理结构"></a> 2.存储结构（物理结构）</h4>
<ul>
<li>
<p>顺序存储</p>
<p>把逻辑上相邻的元素存储在物理位置 上也相邻的存储单元中，元素之间的关系由存储 单元的邻接关系来体现。<strong>优点：实现随机存取；缺点：只能使用相邻的一整块存储单元，可能会产生外部碎片。</strong></p>
</li>
<li>
<p>链式存储</p>
<p>逻辑上相邻的元素在物理位置上<strong>可以 不相邻</strong>，借助指示元素存储地址的指针来表示元 素之间的逻辑关系。<strong>优点：不会出现碎片现象，充分利用所有存储单元；缺点：每个元素因存储指针占用额外的存储单元，且只能实现顺序存取。</strong></p>
</li>
<li>
<p>索引存储</p>
<p>在存储元素信息的同时，还建立附加 的索引表。索引表中的每项称为索引项，索引项 的一般形式是（关键字，地址）。<strong>优点：检索速度快；缺点：附加的索引表占用额外空间。</strong></p>
</li>
<li>
<p>散列存储</p>
<p>根据元素的关键字直接计算出该元素 的存储地址，又称哈希（Hash）存储。<strong>优点：检索、增加、删除节点速度都很快；缺点：若散列函数不好，可能出现元素存储单元的冲突，解决冲突会增加时间开销。</strong></p>
</li>
</ul>
<h4 id="3数据运算"><a class="markdownIt-Anchor" href="#3数据运算"></a> 3.数据运算</h4>
<p>​	针对于某种逻辑结构，结合实际需求，定义基本运算。<strong>运算的定义针对逻辑结构，运算的实现针对存储结构。</strong></p>
<h2 id="算法和算法评价"><a class="markdownIt-Anchor" href="#算法和算法评价"></a> 算法和算法评价</h2>
<h3 id="算法的基本概念"><a class="markdownIt-Anchor" href="#算法的基本概念"></a> 算法的基本概念</h3>
<p><strong>算法（Algorithm）是对特定问题求解步骤的一种描述</strong>，它是指令的有限序列，其中的每条指令 表示一个或多个操作</p>
<p><em><strong>程序=数据结构+算法</strong></em></p>
<h4 id="算法的5个重要特性"><a class="markdownIt-Anchor" href="#算法的5个重要特性"></a> 算法的5个重要特性</h4>
<ul>
<li>有穷性。一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成。  <strong>注：算法必须是有穷的，而程序可以是无穷的</strong></li>
<li>确定性。算法中每条指令必须有确切的含义，对于<strong>相同的输入</strong>只能得出<strong>相同的输出</strong>。</li>
<li>可行性。算法中描述的操作都可以通过<strong>已经实现的基本运算执行有限次</strong>来实现。</li>
<li>输入。一个算法有<strong>零个或多个输入</strong>，这些输入取自于某个特定的对象的集合。</li>
<li>输出。一个算法有<strong>一个或多个输出</strong>，这些输出是与输入有着某种特定关系的量</li>
</ul>
<p>“好”算法的特质</p>
<ul>
<li>正确性。算法应能够正确地解决求解问题。</li>
<li>可读性。算法应具有良好的可读性，以帮助人们理解。</li>
<li>健壮性。输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li>
<li>高效率与低存储量需求。</li>
</ul>
<h3 id="算法效率的度量"><a class="markdownIt-Anchor" href="#算法效率的度量"></a> 算法效率的度量</h3>
<h4 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h4>
<p>​		一个语句的频度是指该语句在算法中被重复执行的次数。算法中所有语句的频度之和记为T(n)，它是该算法问题规模n的函数，时间复杂度主要分析T(n)的数量级。算法中基本运算（最深层循环内的语句）的频度与T(n)同数量级，因此通常采用算法中基本运算的频度f(n)来分析算法的时间复杂度。因此，算法的时间复杂度记为</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=O(f(n))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>取f(n)中<strong>随n增长最快的项</strong>，将其系数置为1作为时间复杂度的度量。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mrow><mo fence="true">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">)</mo></mrow><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo fence="true">)</mo></mrow><mo>&lt;</mo><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow><mo>&lt;</mo><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo fence="true">)</mo></mrow><mo>&lt;</mo><mi>O</mi><mrow><mo fence="true">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo fence="true">)</mo></mrow><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mrow><mo fence="true">(</mo><msup><mi>n</mi><mi>n</mi></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O(1)&lt;O\left(\log _{2} n\right)&lt;O(n)&lt;O\left(n log_{2} n\right)&lt;O\left(n^{2}\right)&lt;O\left(n^{3}\right)&lt;O\left(2^{n}\right)&lt;O(n !)&lt;O\left(n^{n}\right)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2141179999999998em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2141179999999998em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">!</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></span></p>
<ol>
<li>
<p>加法规则</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=T_{1}(n)+T_{2}(n)=O(f(n))+O(g(n))=O(\max (f(n), g(n)))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">max</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
</li>
<li>
<p>乘法规则</p>
</li>
</ol>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>T</mi><mn>1</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>×</mo><msub><mi>T</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>×</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>×</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)=T_{1}(n) \times T_{2}(n)=O(f(n)) \times O(g(n))=O(f(n) \times g(n))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>结论：</p>
<ul>
<li>顺序执行的代码只会 影响常数项，可以忽略</li>
<li>只需挑循环中的一个 基本操作分析它的执行次数与n的关系即可</li>
<li>如果有多层嵌套循环， 只需关注最深层循环循环了几次</li>
</ul>
<p>最坏时间复杂度：最坏情况下算法的时间复杂度</p>
<p>平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间</p>
<p>最好时间复杂度：最好情况下算法的时间复杂度</p>
<h4 id="空间复杂度"><a class="markdownIt-Anchor" href="#空间复杂度"></a> 空间复杂度</h4>
<p><strong>只需关注存储空间大小 与问题规模相关的变量</strong></p>
<p>算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它是问题规模n的函数。记为</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(n)=O(g(n))
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p>
<p>一个程序在执行时除需要存储空间来存放本身所用的指令、常数、变量和输入数据外，还需要一些对数据进行操作的工作单元和存储一些为实现计算所需信息的辅助空间。若输入数据所占空间只取决于问题本身，和算法无关，则只需分析除输入和程序之外的额外空间。</p>
<p><strong>算法原地工作是指算法所需的辅助空间为常量，即O(1)。</strong></p>
<p><strong>一般函数递归带来的空间复杂度为递归调用的深度</strong></p>
<h1 id="2线性表"><a class="markdownIt-Anchor" href="#2线性表"></a> 2.线性表</h1>
<p>线性表是具有<strong>相同数据类型</strong>的n （n≥0）个数据元素的<strong>有限序列</strong></p>
<h2 id="顺序表"><a class="markdownIt-Anchor" href="#顺序表"></a> 顺序表</h2>
<p>顺序表-用顺序存储的方式实现线性表。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。<strong>逻辑顺序与物理顺序相同。</strong></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/202203231125225.png" alt="img"></p>
<h3 id="顺序表实现"><a class="markdownIt-Anchor" href="#顺序表实现"></a> 顺序表实现</h3>
<h4 id="静态分配"><a class="markdownIt-Anchor" href="#静态分配"></a> 静态分配</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MaxSize];<span class="comment">//静态数组存放数据元素</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;<span class="comment">//静态分配顺序表 内存满了无能为力</span></span><br></pre></td></tr></table></figure>
<p>静态分配 给各个数据元素分配连续的存储空间 大小为maxsize*sizeof(int)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MaxSize;i++)<span class="comment">//静态下 设置所有初始值为0</span></span><br><span class="line">        l.data[i]=<span class="number">0</span>;</span><br><span class="line">    l.length=<span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MaxSize; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;data[%d]=%d\n&quot;</span>,i , L.data[i]);</span><br><span class="line">   &#125;<span class="comment">//错误 内存中遗留脏数据 没有分配内存 且访问数据表应该i&lt;L.length</span></span><br></pre></td></tr></table></figure>
<p>若不为线性表设置初始值，会输出乱码。。</p>
<h4 id="动态分配"><a class="markdownIt-Anchor" href="#动态分配"></a> 动态分配</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10<span class="comment">//初始长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;<span class="comment">//利用指针动态分配</span></span><br><span class="line">    <span class="keyword">int</span> MAXSIZE;<span class="comment">//最大容量</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//动态分配顺序表</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseSize</span><span class="params">(SqList &amp;l, <span class="keyword">int</span> len)</span><span class="comment">//增加动态数组长度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p=l.data;<span class="comment">//p指针接收旧存储空间</span></span><br><span class="line">    l.data = <span class="keyword">new</span> <span class="keyword">int</span>[l.MAXSIZE + len];<span class="comment">//分配增加表长后的内存空间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l.data[i]=p[i];<span class="comment">//数据复制到新区域</span></span><br><span class="line">    &#125;</span><br><span class="line">    l.MAXSIZE = l.MAXSIZE + len;<span class="comment">//表最大长度增加len</span></span><br><span class="line">    <span class="keyword">delete</span> p;<span class="comment">//释放原有内存空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SqList &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l.data = <span class="keyword">new</span> <span class="keyword">int</span> [InitSize];<span class="comment">//申请一片连续的存储空间</span></span><br><span class="line">    l.length = <span class="number">0</span>;</span><br><span class="line">    l.MAXSIZE = InitSize;<span class="comment">//最大值为初始值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><mark>顺序表特点</mark></p>
<p>①随机访问，即可以在 O(1) 时间内找到第 i 个元素。</p>
<p>②存储密度高，每个节点只存储数据元素</p>
<p>③拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）</p>
<p>④插入、删除操作不方便，需要移动大量元素</p>
<h4 id="顺序表的插入"><a class="markdownIt-Anchor" href="#顺序表的插入"></a> 顺序表的插入</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;l,<span class="keyword">int</span> i,<span class="keyword">int</span>  e)</span><span class="comment">//插入操作。在表L中的第i个位置上插入指定元素e</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;l.length+<span class="number">1</span>)<span class="comment">//判断插入范围 可插入最后一个</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(l.length&gt;l.MAXSIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(l.length==l.MAXSIZE)</span><br><span class="line">        <span class="built_in">IncreaseSize</span>(l,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=l.length;j&gt;=i;j--)<span class="comment">//从表后遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        l.data[j]=l.data[j<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    l.data[i<span class="number">-1</span>]=e;</span><br><span class="line">    l.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最好情况：新元素插入到表尾，不需要移动元素 i = n+1，循环0次；最好时间复杂度 = O(1)</p>
<p>最坏情况：新元素插入到表头，需要将原有的 n 个元素全都向后移动 i = 1，循环 n 次；最坏时间复杂度 = O(n);</p>
<p>平均情况：平均时间复杂度 = O(n)</p>
<h4 id="顺序表的删除"><a class="markdownIt-Anchor" href="#顺序表的删除"></a> 顺序表的删除</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;l, <span class="keyword">int</span> i, <span class="keyword">int</span> &amp;e)</span><span class="comment">//删除操作。删除表L中第i个位置的元素，</span></span></span><br><span class="line"><span class="function"><span class="comment">//并用e返回删除元素的值。</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;l.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = l.data[i<span class="number">-1</span>];<span class="comment">//删除元素赋给e</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;l.length;j++)<span class="comment">//向后遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        l.data[j<span class="number">-1</span>]=l.data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    l.data[l.length]=<span class="number">0</span>;</span><br><span class="line">    l.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注：注意引用“&amp;”的作用</strong></p>
<p>时间复杂度与插入相同。</p>
<h4 id="顺序表的查找"><a class="markdownIt-Anchor" href="#顺序表的查找"></a> 顺序表的查找</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按位查找：查找第i个位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L.data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按值查找：查找值为i的元素位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; L.length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L.data[j] == i) &#123;</span><br><span class="line">            <span class="keyword">return</span> j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 没有查找到则返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按位查找时间复杂度O(1)</p>
<p>按值查找时间复杂度O(n)</p>
<h2 id="单链表"><a class="markdownIt-Anchor" href="#单链表"></a> 单链表</h2>
<p>线性表的链式存储又称单链表。</p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/202203231203920.png" alt="img"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;<span class="comment">//存放一个数据元素</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指向下一节点的指针</span></span><br><span class="line">&#125;LNode,*LinkList;<span class="comment">//LNode *等价 LinkList</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不带头节点的单链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l =<span class="literal">NULL</span>;<span class="comment">//定义空表 防止内存脏数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(LinkList l)</span><span class="comment">//判断链表是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(l==<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带头节点的单链表 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l = <span class="keyword">new</span> LNode;</span><br><span class="line">    <span class="keyword">if</span> (l==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    l-&gt;next =<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//l-&gt;next = l//循环单链表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(LinkList l)</span><span class="comment">//判断链表是否为空</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>(l-&gt;next==<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>带头结点的单链表 头节点不存放数据 只是为了操作方便</p>
<h3 id="单链表的插入和删除"><a class="markdownIt-Anchor" href="#单链表的插入和删除"></a> 单链表的插入和删除</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextNode</span><span class="params">(LinkList p,<span class="keyword">int</span> e)</span><span class="comment">//后插 在p节点 后插入元素e O(1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = <span class="keyword">new</span> LNode;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="comment">//防止内存分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data = e;<span class="comment">//顺序不能错</span></span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertList</span><span class="params">(LinkList &amp;l, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span><span class="comment">//在第i个位置插入元素e O(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    <span class="comment">//为不带头节点 多加的代码注意 第一个节点的情况</span></span><br><span class="line">    <span class="comment">// if(i==1)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     LNode *s =new LNode;</span></span><br><span class="line">    <span class="comment">//     s-&gt;data = e;</span></span><br><span class="line">    <span class="comment">//     s-&gt;next= l;</span></span><br><span class="line">    <span class="comment">//     l= s;</span></span><br><span class="line">    <span class="comment">//     return true;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    LNode *p =<span class="built_in">GetElem</span>(l,i<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">InsertNextNode</span>(p,e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertPriorNode</span><span class="params">(LNode *p,<span class="keyword">int</span> e)</span><span class="comment">//在p节点之前插入元素e O(1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = <span class="keyword">new</span> LNode;</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next;<span class="comment">//偷天换日</span></span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    s-&gt;data = p-&gt;data;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="comment">//大概思路是后插s节点，把s节点变成p节点，前p节点变成元素e</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;l, <span class="keyword">int</span> i ,<span class="keyword">int</span> &amp;e)</span><span class="comment">//删除表中第i个位置的元素 O(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p = <span class="built_in">GetElem</span>(l,i<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = p-&gt;next;</span><br><span class="line">    e = q-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode *p)</span><span class="comment">//删除指定节点p O(1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = p-&gt;next;<span class="comment">//注：如果p是最后一个节点，第二行会出现问题 此时只能给出头指针从前往后寻找o（n）</span></span><br><span class="line">    p-&gt;data = q-&gt;data;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="单链表的查找"><a class="markdownIt-Anchor" href="#单链表的查找"></a> 单链表的查找</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LNode * <span class="title">GetElem</span><span class="params">(LinkList l,<span class="keyword">int</span> i)</span><span class="comment">//O(n) 按位查找</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode *p;<span class="comment">//指针p指向当前扫描到的节点</span></span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;<span class="comment">//记录当前指向的是第几个节点（不带头结点时j=1）</span></span><br><span class="line">    p = l;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;j&lt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LNode * <span class="title">LocateElem</span><span class="params">(LinkList l,<span class="keyword">int</span> e)</span><span class="comment">//按值查找 直至找到==e节点 O(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode *p = l-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;p-&gt;data!=e)</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(LinkList l)</span><span class="comment">//表长</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LNode *p = l;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p-&gt;next !=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="单链表的建立"><a class="markdownIt-Anchor" href="#单链表的建立"></a> 单链表的建立</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList &amp;l)</span><span class="comment">//正向尾插法建立单链表 O(n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    l = <span class="keyword">new</span> LNode;<span class="comment">//建立头节点l</span></span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    LNode *r=l,*s;<span class="comment">//r为尾指针</span></span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">while</span> (x!=<span class="number">-1</span>)<span class="comment">//让-1作为链表结束的值</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;<span class="comment">//指向新建的节点</span></span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;<span class="comment">//尾指针节点为空</span></span><br><span class="line">    <span class="keyword">return</span> l;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;l)</span><span class="comment">//头插法建立链表 其实是输入顺序的逆序！！</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    LNode *s;</span><br><span class="line">    l = <span class="keyword">new</span> LNode;</span><br><span class="line">    l-&gt;next =<span class="literal">NULL</span>;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="keyword">while</span> (x!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="keyword">new</span> LNode;</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = l-&gt;next;</span><br><span class="line">        l-&gt;next = s;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双链表"><a class="markdownIt-Anchor" href="#双链表"></a> 双链表</h2>
<p>双链表节点中有两个指针next和prior，分别指向后继节点和前驱节点</p>
<p>单链表：无法逆向检索，有时候不太方便</p>
<p>双链表：可进可退，存储密度更低一丢丢</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitDLinkList</span><span class="params">(DLinkList &amp;l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l = <span class="keyword">new</span> DNode;</span><br><span class="line">    <span class="keyword">if</span>(l = <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    l-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    l-&gt;prior = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// l-&gt;next = l;循环双链表</span></span><br><span class="line">    <span class="comment">// l-&gt;prior = l;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双链表的插入"><a class="markdownIt-Anchor" href="#双链表的插入"></a> 双链表的插入</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextNode</span><span class="params">(DNode *p, DNode *s)</span><span class="comment">//在p节点后加s节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>||s==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next!=<span class="literal">NULL</span>)<span class="comment">//防止p是最后一个节点</span></span><br><span class="line">        p-&gt;next-&gt;prior = s;</span><br><span class="line">    s-&gt;prior = p;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="双链表的删除"><a class="markdownIt-Anchor" href="#双链表的删除"></a> 双链表的删除</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNextNode</span><span class="params">(DNode *p)</span><span class="comment">//删除p节点的后继节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    DNode *q = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">        q-&gt;next-&gt;prior = p;</span><br><span class="line">    <span class="keyword">delete</span> q;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyList</span><span class="params">(DLinkList &amp;l)</span><span class="comment">//销毁链表</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeleteNextNode</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> l;</span><br><span class="line">    l = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="循环链表"><a class="markdownIt-Anchor" href="#循环链表"></a> 循环链表</h2>
<p>表位指针不指向NULL，指向头节点。</p>
<p>初始化时改为l-&gt;next = l;即可。</p>
<p>循环单链表从一个结点出发可以找到其他任何一个节点。</p>
<p>循环双链表头节点的prior指针指向尾节点，尾节点的next指针指向头节点。</p>
<p>初始化时l-&gt;next=l;l-&gt;prior=l;</p>
<p>基本操作与上述相同；</p>
<h2 id="静态链表"><a class="markdownIt-Anchor" href="#静态链表"></a> 静态链表</h2>
<p>静态链表借助数组来描述线性表的链式存储结构，结点也有数据域data和指针域next，与前面所讲的链表中的指针不同的是，<strong>这里的指针是结点的相对地址（数组下标)，又称游标</strong>。和顺序表一样，<strong>静态链表也要预先分配一块连续的内存空间。</strong></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/202203231609891.png" alt="img"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">int</span> next;<span class="comment">//下一个元素的下标</span></span><br><span class="line">&#125;SLinkList [MAXSIZE];<span class="comment">//可用 SLinkList 定义“一个长度为 MaxSize 的Node 型数组”</span></span><br></pre></td></tr></table></figure>
<p>优点：增、删 操作不需要大量移动元素</p>
<p>缺点：不能随机存取，只能从头结点开始依次往后查找；容量固定不可变</p>
<h2 id="顺序表和链表的比较"><a class="markdownIt-Anchor" href="#顺序表和链表的比较"></a> 顺序表和链表的比较</h2>
<ul>
<li>逻辑结构</li>
</ul>
<p>​		都属于线性表，都是线性结构</p>
<ul>
<li>
<p>存储结构（顺序表/链表）</p>
<p><strong>优点：支持随机存取、存储密度高</strong></p>
<p><strong>缺点：大片连续空间分配不方便，改变容量不方便</strong></p>
<p><strong>优点：离散的小空间分配方便，改变容量方便</strong></p>
<p><strong>缺点：不可随机存取，存储密度低</strong></p>
</li>
<li>
<p>空间分配</p>
<p>顺序表：需要<strong>预分配大片连续空间</strong>。 若分配空间过小，则之后不 方便拓展容量；若分配空间 过大，<strong>则浪费内存资源</strong></p>
<p>链表：只需分配一个头结点（也可 以不要头结点，只声明一个 头指针），<strong>之后方便拓展</strong></p>
</li>
<li>
<p>增/删</p>
<p>顺序表：</p>
<p>插入/删除元素要将后续元素都后移/前移</p>
<p>时间复杂度 O(n)，时间开销主要来自移动元素</p>
<p>若数据元素很大，所需时间代价很高</p>
<p>链表：</p>
<p>修改指针即可；</p>
<p>时间复杂度 O(n)，时间开销主要来自查找目标元素</p>
<p><strong>查找元素代价更低。</strong></p>
</li>
<li>
<p>查</p>
<p>顺序表：按位查找：O(1) 按值查找：O(n)</p>
<p><strong>若表内元素有序，可在 O(log2n) 时间内找到</strong>。</p>
<p>链表：按位查找/按值查找均为O(1)</p>
</li>
</ul>
<p>综上：</p>
<p>​	表长难以预估，经常增加/删除元素     ----链表</p>
<p>​	表长可预估，查询（搜索）操作较多   ----顺序表</p>
<h1 id="3栈队列和数组"><a class="markdownIt-Anchor" href="#3栈队列和数组"></a> 3.栈，队列和数组</h1>
<h2 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h2>
<h3 id="基本概念-2"><a class="markdownIt-Anchor" href="#基本概念-2"></a> 基本概念</h3>
<p><strong>栈（stack）是<mark>只允许在一端进行插入或删除</mark>的线性表</strong></p>
<p>逻辑结构：与普通线性表相同</p>
<p>栈顶：允许进行插入和删除的那一端</p>
<p>栈底：固定的，不允许插入和删除的那一端</p>
<p>空栈：不含任何元素的空表</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204011617825.png" alt="image-20220401161721665"></p>
<p>操作特性：<strong>先进后出（LIFO)</strong></p>
<p><strong>数学性质：</strong></p>
<p>n个不同元素进栈，<strong>出栈元素不同排列的个数为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup></mrow><annotation encoding="application/x-tex">\frac{1}{n+1} C_{2 n}^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24810799999999997em;"><span></span></span></span></span></span></span></span></span></span>（称为卡特兰数）</strong></p>
<h3 id="栈的顺序存储结构"><a class="markdownIt-Anchor" href="#栈的顺序存储结构"></a> 栈的顺序存储结构</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 10<span class="comment">//定义栈中元素最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MAXSIZE];<span class="comment">//静态数组存放栈中元素</span></span><br><span class="line">    <span class="keyword">int</span> top;<span class="comment">//栈顶指针</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure>
<h4 id="基本操作初始化-栈空判断-复杂度均为o1"><a class="markdownIt-Anchor" href="#基本操作初始化-栈空判断-复杂度均为o1"></a> 基本操作——初始化、栈空判断  复杂度均为O（1）</h4>
<p><strong>(以下操作默认栈顶指针top指向-1即栈顶元素)</strong> 若top为0即指向栈顶元素下一个单元，语句将变化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(SqStack &amp;s)</span><span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s.top = <span class="number">-1</span>;<span class="comment">//初始化栈顶指针为-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(SqStack s)</span><span class="comment">//判断是否为空栈</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>栈长：s.top+1;</p>
<p><strong>进栈操作</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进栈操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;s, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top == MAXSIZE - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s.data[++s.top] = x;<span class="comment">//++s.top先执行  等价于s.top=s.top+1;s.data[s.top]=x</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>出栈操作</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//出栈操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;s, <span class="keyword">char</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = s.data[s.top--];<span class="comment">//s.top--后执行 等价于x=s.data[s.top]; s.top=s.top-1;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>读栈顶元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetTop</span><span class="params">(SqStack &amp;s, <span class="keyword">char</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.top==<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=s.data[s.top];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="共享栈"><a class="markdownIt-Anchor" href="#共享栈"></a> 共享栈</h4>
<p>​	利用栈底位置相对不变的特性，可让两个顺序栈共享一个一维数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间延伸。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204011636264.png" alt="image-20220401163655136"></p>
<p>​	两个栈的栈顶指针都指向栈顶元素，top0=-1时0号栈为空，top1=MaxSize时1号栈为空;<strong>仅当两个栈顶指针相邻（top1-top0=1)时，判断为栈满</strong>。当0号栈进栈时top0 先加1再赋值，1号栈进栈时top1 先减1再赋值;出栈时则刚好相反。<br>
​	共享栈是为了更<strong>有效地利用存储空间</strong>，两个栈的空间相互调节，只有在整个存储空间被占满时才发生上溢。其存取数据的时间复杂度均为O(1)，所以对<strong>存取效率没有什么影响</strong>。</p>
<h2 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h2>
<h3 id="基本概念-3"><a class="markdownIt-Anchor" href="#基本概念-3"></a> 基本概念</h3>
<p>队列也是一种操作受限的线性表，<strong>只允许在表一端进行插入，而在表的另一端进行删除</strong>。</p>
<p>操作特性：<strong>先进先出（FIFO）</strong></p>
<p>队头（Front)。允许删除的一端，又称队首。</p>
<p>队尾(Rear）。允许插入的端。</p>
<p>空队列。不含任何元素的空表。</p>
<h3 id="队列的顺序存储结构"><a class="markdownIt-Anchor" href="#队列的顺序存储结构"></a> 队列的顺序存储结构</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 10 <span class="comment">//队列中最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MAXSIZE]; <span class="comment">//存放队列元素</span></span><br><span class="line">    <span class="keyword">int</span> front,rear;    <span class="comment">//队头指针和对位指针</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure>
<p>初始状态（队空条件):<strong>Q.front==Q.rear==0。</strong></p>
<p>进队操作:队不满时，先送值到队尾元素，再将队尾指针加1。</p>
<p>出队操作:队不空时，先取队头元素值,再将队头指针加1。</p>
<h4 id="循环队列"><a class="markdownIt-Anchor" href="#循环队列"></a> 循环队列</h4>
<p>上述办法可以判别对空，但显然<strong>不能</strong>用<strong>q.rear=MAXSIZE</strong>作为判断队满的条件，如下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204011651609.png" alt="image-20220401165118511"></p>
<p>显然仍有存储空间。</p>
<p>由此，引入循环队列，把顺序队列想成一个环状的空间，即把存储队列元素的表从逻辑上视为一个坏，称为循环队列。</p>
<p>初始时:Q.front=Q.rear=0。<br>
队首指针进1:Q.front=(Q.frontt1)%MaxSize。<br>
队尾指针进1:Q.rear=(Q.rear+1) %MaxSize。<br>
队列长度:(Q.rear+MaxSize-Q.front) %MaxSize。</p>
<p><strong>判断队满</strong></p>
<ul>
<li>
<p>牺牲一个存储单元，约定“队头指针在队尾指针的下一位置”作为标志</p>
</li>
<li>
<p>类型中新增表示队列元素个数的数据成员size。则队空的条件为Q.size==0,队满的条件为Q.size=MAXSIZE;</p>
</li>
<li>
<p>类型中增设tag 数据成员，以区分是队满还是队空。tag等于0时，若因删除导致Q.front==Q.rear，则为队空;tag等于1时，若因插入导致Q.front==Q.rear,则为队满。每次删除都令tag为0，插入都令tag为1。</p>
</li>
</ul>
<h4 id="基本操作"><a class="markdownIt-Anchor" href="#基本操作"></a> 基本操作</h4>
<p>初始化、判空（注意初始化时front和rear指针指向的位置）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.front = q.rear = <span class="number">0</span>;<span class="comment">//初始化均为0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(SqQueue q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.front == q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>进队</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;q, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((q.rear+<span class="number">1</span>)%MAXSIZE==q.front)<span class="comment">//判断队满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    q.data[q.rear]=x;</span><br><span class="line">    q.rear = (q.rear+<span class="number">1</span>)%MAXSIZE;<span class="comment">//队尾+1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>出队</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;q, <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.rear==q.front)<span class="comment">//判断对空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = q.data[q.front];</span><br><span class="line">    q.front = (q.front+<span class="number">1</span>)%MAXSIZE;<span class="comment">//队头+1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="队列的链式存储结构"><a class="markdownIt-Anchor" href="#队列的链式存储结构"></a> 队列的链式存储结构</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span><span class="comment">//链式队列节点</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//链式队列</span></span><br><span class="line">    LinkNode *front,*rear;<span class="comment">//头尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure>
<h4 id="基本操作-2"><a class="markdownIt-Anchor" href="#基本操作-2"></a> 基本操作</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;q)</span><span class="comment">//带头结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.front = q.rear =<span class="keyword">new</span> LinkNode;</span><br><span class="line">    q.front-&gt;next = <span class="literal">nullptr</span>;<span class="comment">//头尾指针指向头结点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;q)</span><span class="comment">//不带头结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.front = q.rear = <span class="literal">nullptr</span>;   <span class="comment">//初始置空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>入队</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;q,<span class="keyword">int</span> x)</span><span class="comment">//带头结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkNode *s = <span class="keyword">new</span> LinkNode;</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    q.rear-&gt;next = s;</span><br><span class="line">    q.rear =s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;q,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkNode *s = <span class="keyword">new</span> LinkNode;</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(q.front == <span class="literal">nullptr</span>)&#123;<span class="comment">//不带头结点需特别处理空队列入队</span></span><br><span class="line">        q.front = s;</span><br><span class="line">        q.rear = s;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        q.rear-&gt;next = s;</span><br><span class="line">        q.rear =s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>出队</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;q,<span class="keyword">int</span> &amp;x)</span><span class="comment">//带头结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.front==q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode *p = q.front-&gt;next;</span><br><span class="line">    x=p-&gt;data;</span><br><span class="line">    q.front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q.rear==p)<span class="comment">//最后一个节点出队</span></span><br><span class="line">        q.rear=q.front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;q,<span class="keyword">int</span> &amp;x)</span><span class="comment">//不带头结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q.front==<span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LinkNode *p = q.front;<span class="comment">//p指向出队的结点</span></span><br><span class="line">    x=p-&gt;data;</span><br><span class="line">    q.front = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(q.rear==p)</span><br><span class="line">        q.rear=<span class="literal">nullptr</span>;</span><br><span class="line">    	q.front=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双端队列"><a class="markdownIt-Anchor" href="#双端队列"></a> 双端队列</h2>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012204708.png" alt="image-20220401220400547"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012204227.png" alt="image-20220401220420150"></p>
<p>判断输出序列合法性 思路同栈。</p>
<h2 id="栈的应用"><a class="markdownIt-Anchor" href="#栈的应用"></a> 栈的应用</h2>
<h3 id="括号匹配"><a class="markdownIt-Anchor" href="#括号匹配"></a> 括号匹配</h3>
<p>​	假设表达式中允许包含两种括号:圆括号和方括号，其嵌套的顺序任意均为正确的格式，[()或([())或((]均为不正确的格式。</p>
<p>算法：<br>
<strong>1)初始设置一个空栈,顺序读入括号。</strong><br>
<strong>2）若是右括号，则或者使置于栈顶的最急迫期待得以消解，或者是不合法的情况（括号序</strong><br>
<strong>列不匹配，退出程序)。</strong><br>
<strong>3）若是左括号，则作为一个新的更急迫的期待压入栈中，自然使原有的在栈中的所有未消</strong><br>
<strong>解的期待的急迫性降了一级。算法结束时，栈为空，否则括号序列不匹配。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012208006.png" alt="image-20220401220802914"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bracketCheck</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqStack s;</span><br><span class="line">    <span class="built_in">InitStack</span>(s);<span class="comment">//初始化一个栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">&#x27;(&#x27;</span>|| str[i]==<span class="string">&#x27;[&#x27;</span>||str[i]==<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">            <span class="built_in">Push</span>(s,str[i]);<span class="comment">//从左到右扫描，把扫描到的左括号入栈</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">IsEmpty</span>(s))<span class="comment">//如果扫描到右括号且栈为空 匹配失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">char</span> topelem;</span><br><span class="line">                <span class="built_in">Pop</span>(s,topelem);<span class="comment">//栈非空，弹出栈顶元素匹配</span></span><br><span class="line">                <span class="keyword">if</span>(str[i]==<span class="string">&#x27;)&#x27;</span> &amp;&amp; topelem!=<span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(str[i]==<span class="string">&#x27;]&#x27;</span> &amp;&amp; topelem!=<span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span>(str[i]==<span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; topelem!=<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">IsEmpty</span>(s);<span class="comment">//所有括号都匹配后检查栈是否为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表达式求值"><a class="markdownIt-Anchor" href="#表达式求值"></a> 表达式求值</h3>
<p>中缀表达式：普通的算数表达式</p>
<p>后缀表达式（逆波兰表达式）：运算符在两个操作数后面（无界限符）</p>
<p>前缀表达式（波兰表达式）：运算符在两个操作数前面（无界限符）</p>
<p><strong>中缀转后缀手算：</strong></p>
<p>①确定中缀表达式中各个运算符的运算顺序</p>
<p>②选择下一个运算符，按照「左操作数右操作数运算符」的方式组合成一个新的操作数</p>
<p>③如果还有运算符没被处理，就继续②</p>
<p>注：为保证手算和机算结果相同，采用“左优先”原则（即只要左边能优先计算就先算左边的）</p>
<p><strong>后缀表达式的手算方法</strong>：</p>
<p>从左向右扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算。（注意运算左右顺序）</p>
<p><strong>后缀表达式的计算（机算）：</strong></p>
<p><mark>用栈实现</mark>后缀表达式的计算:<br>
①从左往右扫描下一个元素，直到处理完所有元素</p>
<p>②若扫描到操作数则压入栈,并回到①;否则执行③</p>
<p>③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①</p>
<p>注：先弹出的栈顶元素是右操作数，符合“后进先出”。</p>
<p><strong>中缀转前缀手算：</strong></p>
<p>同后缀原理，采用“右优先原则”</p>
<p><strong>前缀表达式计算（机算）：</strong></p>
<p>用栈实现变为<mark>从右向左</mark>扫描，别的同后缀。</p>
<p><strong>中缀转后缀表达式（机算）：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012222630.png" alt="image-20220401222203533"></p>
<p><strong>中缀表达式的计算（栈）</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012225580.png" alt="image-20220401222536489"></p>
<h3 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h3>
<p>函数调用的特点：最后调用的函数最先执行结束（LIFO）</p>
<p><strong>递归算法可以把原始问题转换为属性相同，但规模较小的问题</strong>。</p>
<p>缺点：可能造成多层递归，造成效率低下</p>
<p>优点：代码简单，易理解。</p>
<h3 id="队列的应用"><a class="markdownIt-Anchor" href="#队列的应用"></a> 队列的应用</h3>
<ul>
<li>树的层次遍历</li>
<li>图的广度优先搜索</li>
<li>操作系统中FCFS（先来先服务）</li>
<li>数据缓冲区</li>
</ul>
<h2 id="数组和特殊矩阵"><a class="markdownIt-Anchor" href="#数组和特殊矩阵"></a> 数组和特殊矩阵</h2>
<p>数组是由n个相同数据元素构成的有限序列。</p>
<p>数组是线性表的推广。</p>
<p><strong>存储结构</strong></p>
<p>一维数组：LOC <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><msup><mi>i</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">+i^{*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.772026em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord"><span class="mord mathdefault">i</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.688696em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∗</span></span></span></span></span></span></span></span></span></span></span></span> sizeof(ElemType)</p>
<p>M行N列二维数组b[i][j]：</p>
<ul>
<li>行优先：LOC + (i*N + j) * sizeof(ElemType)</li>
<li>列优先：LOC + ( j *M+ i ) * sizeof(ElemType)</li>
</ul>
<h3 id="特殊矩阵注意行列优先和题干的数组下标即可"><a class="markdownIt-Anchor" href="#特殊矩阵注意行列优先和题干的数组下标即可"></a> 特殊矩阵（注意行列优先和题干的数组下标即可）</h3>
<p>对称矩阵：只存放上（下）三角元素即可</p>
<p>三角矩阵（上（下）三角的元素均为常量）：存储方式与对称矩阵类似，只需额外多一块空间存储常量元素</p>
<p>三对角矩阵：</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012241608.png" alt="image-20220401224105518"></p>
<p><strong>存储对应关系均可自己推导，不列举公式</strong></p>
<p>稀疏矩阵：非零元素远远少于矩阵元素的个数</p>
<p>​	存储策略：三元组&lt;行，列，值&gt;</p>
<p>​					   十字链表法</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204012244837.png" alt="image-20220401224429737"></p>
<h1 id="4串"><a class="markdownIt-Anchor" href="#4串"></a> 4.串</h1>
<h2 id="串的定义和实现"><a class="markdownIt-Anchor" href="#串的定义和实现"></a> 串的定义和实现</h2>
<p>串，即字符串（string）是<strong>由零个或多个字符串组成的有限序列</strong>，一般记为S=‘abcd…’</p>
<p>n=0时的串称作空串</p>
<p>子串：串中任意多个连续的字符组成的子序列称为该序列的子串</p>
<p>主串：包含子串的串</p>
<p>字符在主串中的位置:字符在串中的序号。</p>
<p>子串在主串中的位置:子串的第一个字符在主串中的位置。</p>
<p>串是一种特殊的<em>线性表</em>，数据元素间成线性关系，串的基本操作（增删改查）通常以子串为操作对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定长顺序存储表示</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch[MAXLEN];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SString;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204122100983.png" alt="image-20220412205959808"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆分配存储表示</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *ch;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;HString;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitString</span><span class="params">(HString S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S.ch = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(MAXLEN * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));<span class="comment">//用完需要手动释放</span></span><br><span class="line">    S.length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//串的链式存储</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StringNode, *String;</span><br><span class="line"><span class="comment">//存储密度 若想提高存储密度可以将ch换为ch[4]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求子串 用Sub返回串的第pos个字符起长度为len的子串</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SubString</span><span class="params">(SString &amp;Sub, SString S, <span class="keyword">int</span> pos, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pos + len &gt; S.length <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pos; i&lt;S.length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Sub.ch[i-pos+<span class="number">1</span>] = S.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Sub.length = len;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较 若S&gt;T,返回值大于0；若S=T，返回值=0；若S&lt;T，返回值小于0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StrCompare</span><span class="params">(SString S, SString T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;S.length &amp;&amp; i&lt;T.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i]!=T.ch[i])</span><br><span class="line">            <span class="keyword">return</span> S.ch[i]-T.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S.length - T.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定位操作 主串S中存在与串T值相同的子串，则返回它在主串中第一次出现的位置；否则为0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index</span><span class="params">(SString s, SString t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>, n = s.length, m=t.length;</span><br><span class="line">    SString Sub;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;= n-m+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SubString</span>(Sub, s, i, m);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">StrCompare</span>(Sub, t)!=<span class="number">0</span>)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="串的模式匹配"><a class="markdownIt-Anchor" href="#串的模式匹配"></a> 串的模式匹配</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//朴素模式匹配算法 复杂度O（mn）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pattern_matching</span><span class="params">(SString s, SString t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>, j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=s.length &amp;&amp; j&lt;t.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.ch[i]==t.ch[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i = i - j + <span class="number">2</span>;</span><br><span class="line">            j = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;t.length)</span><br><span class="line">        <span class="keyword">return</span> i-t.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="kmp算法"><a class="markdownIt-Anchor" href="#kmp算法"></a> <mark>KMP算法</mark></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//KMP算法 时间复杂度o(m+n)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(SString S, SString T, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>, j=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=S.length &amp;&amp; j&lt;=T.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span> ||S.ch[i] == T.ch[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;T.length)</span><br><span class="line">        <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求next数组"><a class="markdownIt-Anchor" href="#求next数组"></a> 求next数组</h4>
<ul>
<li>
<p>手算</p>
<ul>
<li>next[1]=0;next[2]=1</li>
<li>在不匹配的位置前边，划一根分界线模式串一步一步往后退，直到分界线之前“能对上&quot;，或模式串完全跨过分界线为止，把j指向的位置填入next[j]</li>
</ul>
</li>
<li>
<p>代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求next数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(SString t, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;t.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">0</span> || t.ch[i] == t.ch[j]) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            j=next[j];a</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="kmp的优化"><a class="markdownIt-Anchor" href="#kmp的优化"></a> KMP的优化</h4>
<p>使用nextval数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//求nextval</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_nextval</span><span class="params">(SString t, <span class="keyword">int</span> next[], <span class="keyword">int</span> nextval[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    nextval[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;t.length;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t.ch[next[j]]==t.ch[j])</span><br><span class="line">            nextval[j]=nextval[next[j]];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nextval[j]=next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="5树与二叉树"><a class="markdownIt-Anchor" href="#5树与二叉树"></a> 5.树与二叉树</h1>
<h2 id="树的基本概念"><a class="markdownIt-Anchor" href="#树的基本概念"></a> 树的基本概念</h2>
<h3 id="树的定义"><a class="markdownIt-Anchor" href="#树的定义"></a> 树的定义</h3>
<p>树是n个结点的有限集。<strong>当n=0，称为空树。</strong></p>
<p>当n&gt;1时，其余结点可分为m (m&gt;0）个<strong>互不相交的有限集合</strong>Ti, T… Tm，其中每个集合本身又是一</p>
<p>棵树，并且称为根结点的<strong>子树</strong>。</p>
<p>非空树应满足（特性）：</p>
<ul>
<li>有且仅有一个根节点</li>
<li>没有后继的结点称为“叶子结点”（终端结点）</li>
<li>有后继的结点称为“分支结点”（非终端结点）</li>
<li>除了根节点以外，<strong>任何一个结点都有且仅有一个前驱</strong></li>
<li>每个结点可以有0个或多个后继</li>
</ul>
<p>树适合表示具有<strong>层次结构</strong>的数据。</p>
<p><strong>n个结点的树中有n-1条边。</strong></p>
<p>属性:<br>
结点的层次(深度）—一从上往下数</p>
<p>结点的高度――从下往上数</p>
<p>树的高度（深度）―一总共多少层</p>
<p>结点的度――有几个孩子（分支)</p>
<p><mark>树的度――各结点的度的最大值</mark></p>
<p>森林。森林是m（m≥0）棵互不相交的树的集合。</p>
<h3 id="树的性质"><a class="markdownIt-Anchor" href="#树的性质"></a> 树的性质</h3>
<ul>
<li><strong>结点数=总度数+1</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204291038745.png" alt="image-20220429103829563"></p>
<ul>
<li><strong>度为m的树第i层至多有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">m^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个结点</strong></li>
<li><strong>m叉树第i层至多有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">m^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.824664em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.824664em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个结点</strong></li>
<li><strong>高度为h的m叉树至多有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{m^{h}-1}{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4462509999999997em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0429199999999998em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285713em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个结点</strong></li>
<li><strong>高度为h的<em>m叉树</em>至少有h个结点。</strong></li>
<li><strong>高度为h、<em>度为m的树</em>至少有h+m-1个结点。</strong></li>
<li><strong>具有n个结点的m叉树的最小高度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>m</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo fence="true">⌉</mo></mrow><annotation encoding="application/x-tex">\left\lceil\log _{m}(n(m-1)+1)\right\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">⌉</span></span></span></span></span></strong></li>
</ul>
<h2 id="二叉树的概念"><a class="markdownIt-Anchor" href="#二叉树的概念"></a> 二叉树的概念</h2>
<p>二叉树是n (n≥0）个结点的有限集合:</p>
<p>①或者为空二叉树，即n= 0。</p>
<p>②或者由一个根结点和两个互不相交的被称为根的<strong>左子树</strong>和<strong>右子树</strong>组成。左子树和右子树又分别是一棵二叉树。</p>
<p>特点:</p>
<p>①每个结点至多只有两棵子树</p>
<p>②左右子树不能颠倒（二叉树是<strong>有序树</strong>)</p>
<p><mark>注意区别:度为2的有序树</mark></p>
<h3 id="几个特殊的二叉树"><a class="markdownIt-Anchor" href="#几个特殊的二叉树"></a> 几个特殊的二叉树</h3>
<ul>
<li>
<p>满二叉树。高度为h，含有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个结点的二叉树</p>
<ul>
<li>只有最后一层有叶子结点</li>
<li>不存在度为1的结点</li>
<li>按层序从1开始编号，结点i的左孩子为2i，右孩子为2i+1;结点i的父节点为[i/2]（向下取整）</li>
</ul>
</li>
<li>
<p>完全二叉树。当且仅当其每个结点都与高度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span> 的 满二叉树中编号为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>∼</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">1 \sim n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 的结点一一对应时, 称为 完全二叉树。</p>
<ul>
<li>只有最后两层可能有叶子结点</li>
<li>最多只有一个度为1的结点</li>
<li>同满二叉树第(3)点</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>≤</mo><mo stretchy="false">⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">i\leq\lfloor n / 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌋</span></span></span></span> 为分支结点, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>&gt;</mo><mo stretchy="false">⌊</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">i&gt;\lfloor n / 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌋</span></span></span></span> 为叶子结点</li>
<li>如果某结点只有一个孩子，那么一定是<strong>左孩子</strong>。</li>
</ul>
</li>
<li>
<p>二叉排序树。一棵二叉树或者是空二叉树，或者是具有如下性质的二叉树:</p>
<ul>
<li>左子树上所有结点的关键字均小于根结点的关键字;</li>
<li>右子树上所有结点的关键字均大于根结点的关键字。</li>
<li>左子树和右子树又各是一棵二叉排序树。</li>
<li>二叉排序树可用于元素的排序、搜索</li>
</ul>
</li>
<li>
<p>平衡二叉树。树上任一结点的左子树和右子树的<strong>深度之差不超过1</strong>。</p>
</li>
</ul>
<h3 id="二叉树的常考性质"><a class="markdownIt-Anchor" href="#二叉树的常考性质"></a> <mark>二叉树的常考性质</mark></h3>
<ul>
<li><strong>非空二叉树中度为0、1、2的结点个数分别为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><msub><mi>n</mi><mn>1</mn></msub><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_0 n_1 n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 则有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0 = n_2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></strong></li>
<li>二叉树第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">i</mi></mrow><annotation encoding="application/x-tex">\mathrm{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">i</span></span></span></span></span> 层至多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi mathvariant="normal">i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{\mathrm{i}-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.830502em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.830502em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">i</span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个结点 ( <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">i</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\mathrm{i} \geq 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.80383em;vertical-align:-0.13597em;"></span><span class="mord"><span class="mord mathrm">i</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> )</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 叉树第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">i</mi></mrow><annotation encoding="application/x-tex">\mathrm{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66786em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">i</span></span></span></span></span> 层至多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="normal">m</mi><mrow><mi mathvariant="normal">i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">\mathrm{m}^{\mathrm{i}-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.830502em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">m</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.830502em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">i</span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个结点 ( <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">i</mi><mo>≥</mo><mn>1</mn><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left.\mathrm{i} \geq 1\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mord mathrm">i</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li>
<li>高度为h的二叉树至多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个结点（满二叉树）</li>
<li>高度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">h</mi></mrow><annotation encoding="application/x-tex">\mathrm{h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">h</span></span></span></span></span> 的m叉树至多有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{m^{h}-1}{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4462509999999997em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0429199999999998em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9270285714285713em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 个结点</li>
<li>具有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 结点的完全二叉树的高度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo fence="true">⌉</mo></mrow><annotation encoding="application/x-tex">\left\lceil\log _{2}(n+1)\right\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">⌉</span></span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo fence="true">⌊</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">⌋</mo></mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\left\lfloor\log _{2} n\right\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">⌋</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>
<ul>
<li>高为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">h</mi></mrow><annotation encoding="application/x-tex">\mathrm{h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">h</span></span></span></span></span> 的满二叉树共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个结点</li>
<li>高为 h-1 的满二叉树共有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个结点</li>
<li>高为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">h</mi></mrow><annotation encoding="application/x-tex">\mathrm{h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">h</span></span></span></span></span> 的完全二叉树至少 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个结点，至多 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 个结点</li>
</ul>
</li>
<li>对于<strong>完全二叉树</strong>，可以由结点数n推出度为0，1，2的结点个数
<ul>
<li>完全二叉树最多只有一个度为1结点，所以度为1的结点个数为0或1</li>
</ul>
</li>
</ul>
<h2 id="二叉树的存储结构"><a class="markdownIt-Anchor" href="#二叉树的存储结构"></a> 二叉树的存储结构</h2>
<h3 id="顺序存储"><a class="markdownIt-Anchor" href="#顺序存储"></a> 顺序存储</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> value;      <span class="comment">//结点中的数据元素</span></span><br><span class="line">    <span class="keyword">bool</span> IsEmpty;	<span class="comment">//结点是否为空</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TreeNode t[MAXSIZE];</span><br></pre></td></tr></table></figure>
<p>顺序存储指用一组地址连续的存储单元依次自上而下、自左向右存储完全二叉树上的结点元素。</p>
<p>建议从数组下标为1的地方开始存储树中的结点</p>
<p>（<strong>完全二叉树、满二叉树用顺序存储比较合适</strong>）</p>
<h3 id="链式存储"><a class="markdownIt-Anchor" href="#链式存储"></a> 链式存储</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;							<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span>		<span class="comment">//左右孩子指针</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure>
<p><strong>n个结点的二叉链表共有n+1个空链域（可用于构建线索二叉树）</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BiTree root = <span class="literal">nullptr</span>;</span><br><span class="line">root = (BiTree) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BiTNode));</span><br><span class="line">root-&gt;data = <span class="number">1</span>;</span><br><span class="line">root-&gt;lchild= <span class="literal">nullptr</span>;</span><br><span class="line">root-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">BiTNode *p = (BiTNode *) <span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span> (BiTNode));</span><br><span class="line">p-&gt;data = <span class="number">2</span>;</span><br><span class="line">p-&gt;lchild = <span class="literal">nullptr</span>;</span><br><span class="line">p-&gt;rchild = <span class="literal">nullptr</span>;</span><br><span class="line">root-&gt;lchild = p;</span><br></pre></td></tr></table></figure>
<p>方便找到指定结点的左/右孩子</p>
<p>若想找到指定结点的父结点只能从根结点遍历–&gt;三叉链表，创建一个父指针，方便查找父结点。</p>
<h2 id="二叉树的遍历和线索二叉树"><a class="markdownIt-Anchor" href="#二叉树的遍历和线索二叉树"></a> 二叉树的遍历和线索二叉树</h2>
<h3 id="二叉树的遍历"><a class="markdownIt-Anchor" href="#二叉树的遍历"></a> 二叉树的遍历</h3>
<p>遍历：按照某种次序把所有结点都访问一遍</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202204291153138.png" alt="image-20220429115328924"></p>
<p><strong>先序遍历：根左右（NLR）</strong></p>
<p><strong>中序遍历：左根右（LNR）</strong></p>
<p><strong>后序遍历：左右根（LRN）</strong></p>
<p>先序遍历(PreOrder）的操作过程如下:</p>
<p>1.若二叉树为空，则什么也不做;</p>
<p>2.若二叉树非空:<br>
①访问根结点;</p>
<p>​	②先序遍历左子树;</p>
<p>​	③先序遍历右子树。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree T)</span><span class="comment">//根左右</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!= <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="built_in">PreOrder</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">PreOrder</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>中序遍历( InOrder）的操作过程如下:</p>
<p>1.若二叉树为空，则什么也不做;</p>
<p>2.若二叉树非空:</p>
<p>​	①中序遍历左子树;</p>
<p>​	②访问根结点;</p>
<p>​	③中序遍历右子树。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T!= <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InOrder</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="built_in">InOrder</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后序遍历( PostOrder）的操作过程如下:</p>
<p>1.若二叉树为空，则什么也不做;</p>
<p>2.若二叉树非空:</p>
<p>​	①后序遍历左子树;</p>
<p>​	②后序遍历右子树;</p>
<p>​	③访问根结点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (T!= <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PostOrder</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">PostOrder</span>(T-&gt;rchild);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应用（求树的深度）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TreeDepth</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T== <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="built_in">TreeDepth</span>(T-&gt;lchild);</span><br><span class="line">        <span class="keyword">int</span> r=<span class="built_in">TreeDepth</span>(T-&gt;rchild);</span><br><span class="line">        <span class="keyword">return</span> l&gt;r?l+<span class="number">1</span>:r+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>层序遍历</strong></p>
<p>算法思想：<br>
①初始化一个辅助队列</p>
<p>②根结点入队</p>
<p>③若队列非空，则队头结点出队，访问该结点，同时让该结点的左右孩子入队</p>
<p>④重复③直至队列为空</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">(BiTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqQueue Q;</span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="built_in">EnQueue</span>(Q, T);</span><br><span class="line">    BiTree p;<span class="comment">//仅传入指针即可</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">IsEmpty</span>(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q,p);<span class="comment">//p在这里与T建立联系</span></span><br><span class="line">        <span class="built_in">visit</span>(p);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;lchild!= <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">EnQueue</span>(Q,p-&gt;lchild);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rchild!= <span class="literal">nullptr</span>)</span><br><span class="line">            <span class="built_in">EnQueue</span>((Q,p-&gt;rchild));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>由遍历序列构造二叉树</strong></p>
<p><strong>前序、中序、后序、层序均可能对应多种二叉树形态</strong></p>
<p>前序+<strong>中序</strong>、后序+<strong>中序</strong>、层序+<strong>中序</strong>才能唯一确定一棵二叉树（必须有中序）</p>
<ul>
<li>根据根结点及左右子树位置判断树的构造</li>
</ul>
<h3 id="线索二叉树"><a class="markdownIt-Anchor" href="#线索二叉树"></a> 线索二叉树</h3>
<p><strong>基本概念</strong></p>
<ul>
<li>
<p>线索二叉树利用<strong>二叉树的空指针</strong>存储其前驱或后继的指针。</p>
</li>
<li>
<p>线索指 指向前驱、后继的指针</p>
</li>
<li>
<p>左孩子指针充当前驱<strong>线索</strong></p>
</li>
<li>
<p>右孩子指针充当后继<strong>线索</strong></p>
</li>
</ul>
<p>存储结构</p>
<p>与二叉树相比，还需增加两个标志域标识指针说明指向指向左（右）孩子还是指向前驱（后继）</p>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205110955383.png" alt="image-20220511095453180" style="zoom:150%;">
<p>举例：</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205110956704.png" alt="image-20220511095629605"></p>
<p><em><strong>根据遍历顺序确定前驱、后继</strong></em></p>
<h4 id="二叉树线索化"><a class="markdownIt-Anchor" href="#二叉树线索化"></a> 二叉树线索化</h4>
<p>中序线索化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadNode</span>* <span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">    <span class="keyword">int</span> ltag,rtag;</span><br><span class="line">&#125;ThreadNode,*ThreadTree;</span><br><span class="line"></span><br><span class="line">ThreadNode* pre = <span class="literal">nullptr</span>;<span class="comment">//全局变量pre 指向当前访问结点的前驱</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ThreadNode *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThread</span><span class="params">(ThreadTree T)</span><span class="comment">//中序遍历二叉树 一边遍历一边线索化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!= <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InThread</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="built_in">InThread</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;lchild== <span class="literal">nullptr</span>)<span class="comment">//左子树为空 建立前驱线索</span></span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;lchild=pre;</span><br><span class="line">        q-&gt;ltag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre!= <span class="literal">nullptr</span> &amp;&amp; pre-&gt;rchild== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        pre-&gt;rchild=q;<span class="comment">//建立前驱结点的后继线索</span></span><br><span class="line">        pre-&gt;rtag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateInThreadTree</span><span class="params">(ThreadTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(T!= <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InThread</span>(T);</span><br><span class="line">        <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)<span class="comment">//处理遍历的最后一个结点</span></span><br><span class="line">            pre-&gt;rtag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111047596.png" alt="image-20220511104706464"></p>
<p>先序线索化</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111055300.png" alt="image-20220511105539206"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ThreadNode* pre = <span class="literal">nullptr</span>;<span class="comment">//全局变量pre 指向当前访问结点的前驱</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ThreadNode *q)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreThread</span><span class="params">(ThreadTree T)</span><span class="comment">//中序遍历二叉树 一边遍历一边线索化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T!= <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">visit</span>(T);</span><br><span class="line">        <span class="keyword">if</span>(T-&gt;ltag==<span class="number">0</span>)<span class="comment">//避免可能出现的死循环（访问第3个结点后 左指针指向B 此时若继续访问会造成回溯访问B 造成死循环）</span></span><br><span class="line">        	<span class="built_in">PreThread</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">PreThread</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ThreadNode* q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;lchild== <span class="literal">nullptr</span>)<span class="comment">//左子树为空 建立前驱线索</span></span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;lchild=pre;</span><br><span class="line">        q-&gt;ltag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pre!= <span class="literal">nullptr</span> &amp;&amp; pre-&gt;rchild== <span class="literal">nullptr</span>)&#123;</span><br><span class="line">        pre-&gt;rchild=q;<span class="comment">//建立前驱结点的后继线索</span></span><br><span class="line">        pre-&gt;rtag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pre = q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatePreThreadTree</span><span class="params">(ThreadTree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(T!= <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">PreThread</span>(T);</span><br><span class="line">        <span class="keyword">if</span>(pre-&gt;rchild==<span class="literal">NULL</span>)<span class="comment">//处理遍历的最后一个结点</span></span><br><span class="line">            pre-&gt;rtag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111056539.png" alt="image-20220511105656424"></p>
<p>后序线索化和中序类似，改为左根右即可；</p>
<p><strong>中序线索二叉树找中序后继</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111101259.png" alt="image-20220511110132164"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ThreadNode *<span class="title">FirstNode</span><span class="params">(ThreadNode* p)</span><span class="comment">//找到最左下结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;ltag==<span class="number">0</span>)&#123;</span><br><span class="line">        p=p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadNode * <span class="title">NextNode</span><span class="params">(ThreadNode* p)</span><span class="comment">//寻找中序遍历下的后继</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;rtag==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">FirstNode</span>(p-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(ThreadNode *T)</span><span class="comment">//利用前两种算法 实现中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ThreadNode *p=<span class="built_in">FirstNode</span>(T);p!= <span class="literal">nullptr</span>;p= <span class="built_in">NextNode</span>(p))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">visit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>中序线索二叉树找前驱</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111112259.png" alt="image-20220511111243164"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ThreadNode *<span class="title">LastNode</span><span class="params">(ThreadNode* p)</span><span class="comment">//找到最右下结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;rtag==<span class="number">0</span>)&#123;</span><br><span class="line">        p=p-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadNode *<span class="title">PreNode</span><span class="params">(ThreadNode* p)</span><span class="comment">//寻找中序遍历下的前驱</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;ltag==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> p-&gt;lchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">LastNode</span>(p-&gt;Lchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RevInOrder</span><span class="params">(ThreadNode *T)</span><span class="comment">//利用前两种算法 实现逆序中序遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(ThreadNode *p=<span class="built_in">LastNode</span>(T);p!= <span class="literal">nullptr</span>;p= <span class="built_in">PreNode</span>(p))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">visit</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111118026.png" alt="image-20220511111800912"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111119394.png" alt="image-20220511111959298"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111120728.png" alt="image-20220511112031627"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111121231.png" alt="image-20220511112104119"></p>
<h2 id="树-森林"><a class="markdownIt-Anchor" href="#树-森林"></a> 树、森林</h2>
<p>树是n (n≥0）个结点的有限集合，n=0时，称为空树，这是一种特殊情况。在任意一棵非空树中应满足:<br>
1)有且仅有一个特定的称为根的结点。<br>
2）当n&gt;1时，其余结点可分为m (m&gt;0）个<strong>互不相交的有限集合</strong>T1, T2… Tm，其中每个集合本身又是一棵树，并且称为根结点的子树。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111125605.png" alt="image-20220511112511493"></p>
<p><strong>可以很快得到每个结点的双亲结点，但求结点的孩子需要遍历整个链表</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111130088.png" alt="image-20220511113037990"></p>
<p><strong>寻找子女非常直接，寻找双亲需要遍历n个结点孩子链表指针域所指向的n个孩子链表</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111133760.png" alt="image-20220511113346659"></p>
<p>每个节点包括3部分内容：结点值，指向结点第一个孩子的指针，指向结点下一个兄弟的指针</p>
<p><strong>优点：方便实现树与二叉树转化</strong></p>
<p><strong>缺点：从当前结点寻找双亲结点很麻烦（若增设一个parent域指向父结点，则也很简单）</strong></p>
<h3 id="树-森林-二叉树转化"><a class="markdownIt-Anchor" href="#树-森林-二叉树转化"></a> 树、森林、二叉树转化</h3>
<p><strong>树转换成二叉树的画法</strong>:</p>
<p>①在兄弟结点之间加一连线:</p>
<p>②对每个结点，只保留它与第一个孩子的连线，而与其他孩子的连线全部抹掉:</p>
<p>③以树根为轴心，顺时针旋转45°。</p>
<p><strong>森林转换成二叉树的画法:</strong></p>
<p>①将森林中的每棵树转换成相应的二叉树;</p>
<p>②每棵树的根也可视为兄弟关系，在每棵树的根之间加一根连线</p>
<p>③以第一棵树的根为轴心顺时针旋转45°。</p>
<p><strong>二叉树转换为森林的规则:</strong></p>
<p>若二叉树非空，则二叉树的根及其左子树为第一棵树的二叉树形式，故将根的右链断开。二叉树根的右子树又可视为一个由除第一棵树外的森林转换后的二叉树,应用同样的方法，直到最后只剩一棵没有右子树的二叉树为止，最后再将每棵二叉树依次转换成树，就得到了原森林</p>
<p><strong>二叉树转换为树或森林是唯一的。</strong></p>
<h3 id="树和森林的遍历"><a class="markdownIt-Anchor" href="#树和森林的遍历"></a> 树和森林的遍历</h3>
<p>树的遍历是指用某种方式访问树中的每个结点，且仅访问一次。主要有两种方式:</p>
<p>1)<strong>先根遍历</strong>。若树非空，先访问根结点，再依次遍历根结点的每棵子树，遍历子树时仍遵<br>
循先根后子树的规则。其遍历序列与这棵树相应二叉树的先序序列相同。</p>
<p>2<strong>后根遍历</strong>。若树非空，先依次遍历根结点的每棵子树，再访问根结点，遍历子树时仍遵‘<br>
循先子树后根的规则。其遍历序列与这棵树相应二叉树的中序序列相同。</p>
<p>另外，树也有层次遍历，与二叉树的层次遍历思想基本相同，即按层序依次访问各结点。</p>
<p>按照森林和树相互递归的定义，可得到森林的两种遍历方法。</p>
<p>1）先序遍历森林。若森林为非空，则按如下规则进行遍历:</p>
<ul>
<li>访问森林中第一棵树的根结点。</li>
<li>先序遍历第一棵树中根结点的子树森林。</li>
<li>先序遍历除去第一棵树之后剩余的树构成的森林。</li>
</ul>
<p>2）中序遍历森林。森林为非空时，按如下规则进行遍历:</p>
<ul>
<li>中序遍历森林中第一棵树的根结点的子树森林。</li>
<li>访问第一棵树的根结点。</li>
<li>中序遍历除去第一棵树之后剩余的树构成的森林。</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111148884.png" alt="image-20220511114809782" style="zoom:150%;">
<h2 id="树与二叉树的应用"><a class="markdownIt-Anchor" href="#树与二叉树的应用"></a> 树与二叉树的应用</h2>
<h3 id="哈夫曼树与哈夫曼编码"><a class="markdownIt-Anchor" href="#哈夫曼树与哈夫曼编码"></a> 哈夫曼树与哈夫曼编码</h3>
<p><strong>结点的权</strong>:有某种现实含义的数值（如:表示结点的重要性等)</p>
<p>结点的<strong>带权路径长度</strong>:从树的根到该结点的路径长度（经过的边数)与该结点上权值的乘积</p>
<p><strong>树的带权路径长度</strong>:树中所有<strong>叶结点</strong>的带权路径长度之和(WPL, Weighted Path Length)</p>
<p>在含有n个带权叶结点的二叉树中，其中带权路径长度（WPL)<strong>最小</strong>的二叉树称为<strong>哈夫曼树</strong>，也称<strong>最优二叉树</strong></p>
<p>给定n个权值分别为wi, W…, w,的结点，<strong>构造哈夫曼树的算法</strong>描述如下:</p>
<p>1）将这n个结点分别作为n棵仅含一个结点的二叉树，构成森林F。</p>
<p>2）构造一个新结点，从F中选取两棵根结点权值最小的树作为新结点的左、右子树，并且<br>
将新结点的权值置为左、右子树上根结点的权值之和。</p>
<p>3)从F中删除刚才选出的两棵树，同时将新得到的树加入F中。</p>
<p>4）重复步骤2）和3)，直至F中只剩下一棵树为止。</p>
<p><strong>哈夫曼树特点</strong></p>
<ul>
<li>
<p>每个初始结点最终都成为叶结点，且权值越小的结点到根结点的路径长度越大2)哈夫曼树的结点总数为2n -1</p>
</li>
<li>
<p>哈夫曼树中不存在度为1的结点。</p>
</li>
<li>
<p>哈夫曼树并不唯一，但WPL必然相同且为最优</p>
</li>
</ul>
<h4 id="哈夫曼编码"><a class="markdownIt-Anchor" href="#哈夫曼编码"></a> 哈夫曼编码</h4>
<p><strong>可变长度编码</strong>―—允许对不同字符用不等长的二进制位表示</p>
<p>若没有一个编码是另一个编码的前缀，则称这样的编码为<strong>前缀编码</strong>（无歧义）</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111200913.png" alt="image-20220511120020791"></p>
<h2 id="并查集"><a class="markdownIt-Anchor" href="#并查集"></a> 并查集</h2>
<p>集合的两个基本操作――“并”和“查”</p>
<p>Find ——“查”操作:确定一个指定元素所属集合</p>
<p>Union ——“并”操作:将两个不想交的集合合并为一个</p>
<p>注:并查集( Disjoint Set）是逻辑结构――集合的一种具体实现，只进行“并”和“查”两种基本操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">int</span> UFsets[MAXSIZE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSets</span><span class="params">(<span class="keyword">int</span> s[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXSIZE;i++)</span><br><span class="line">        s[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> x)</span><span class="comment">//O（n） 返回所属根结点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(s[x]&gt;=<span class="number">0</span>)</span><br><span class="line">        x=s[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> root1,<span class="keyword">int</span> root2)</span><span class="comment">//O(1) 两个集合合并为1个</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root1==root2) <span class="keyword">return</span> ;</span><br><span class="line">    s[root2]=root1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Union的优化</strong></p>
<p><strong>尽量不让树再长高，用根结点的绝对值表示该树的结点总数，Union时小树合并到大树</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> root1,<span class="keyword">int</span> root2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root1==root2) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(s[root2]&gt;s[root1])&#123;</span><br><span class="line">        s[root1]+=s[root2];</span><br><span class="line">        s[root2]=root1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        s[root2]+=s[root1];</span><br><span class="line">        s[root1]=root2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111224503.png" alt="image-20220511122411408"></p>
<p><strong>find操作的优化</strong></p>
<p>压缩路径：先找到根结点，再将查找路径上所有结点都挂到根结点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = x;</span><br><span class="line">    <span class="keyword">while</span>(s[root]&gt;=<span class="number">0</span>)</span><br><span class="line">        root=s[root];</span><br><span class="line">    <span class="keyword">while</span>(x!=root)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=s[x];</span><br><span class="line">        s[x]=root;</span><br><span class="line">        x=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>每次Find操作，先找根，再“压缩路径”，可使树的高度不超过0(α(n))。α(n)是一个增长很缓慢</strong><br>
<strong>的函数，对于常见的n值，通常α(n)≤4，因此优化后并查集的Find、Union操作时间开销都很低</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205111231838.png" alt="image-20220511123155719"></p>
<h1 id="6图"><a class="markdownIt-Anchor" href="#6图"></a> 6.图</h1>
<h2 id="基本概念-4"><a class="markdownIt-Anchor" href="#基本概念-4"></a> 基本概念</h2>
<p>图G由顶点集V和边集E组成，记为G=(V,E)，其中v(G)表示图G中顶点的<strong>有限非空集</strong>; E(G)表示图G中顶点之间的关系(边）集合。若V={v1, … , vn,}，则用|V|表示图G中顶点的个数，也称<strong>图G的阶</strong>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo><mo>∣</mo><mi>u</mi><mo>∈</mo><mi>V</mi><mo separator="true">,</mo><mi>v</mi><mo>∈</mo><mi>V</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">E=\{(u, v) \mid u \in V, v \in V\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">}</span></span></span></span>，用|E|表示图G中边的条数。</p>
<p><strong>注意:线性表可以是空表，树可以是空树，但图不可以是空，即v一定是非空集</strong></p>
<p><strong>无向图</strong></p>
<p>若E是无向边(简称边)的有限集合时，则图G为无向图。边是顶点的无序对，记为(v, w)或(w, v)，因为(v,w)=(w,v)，其中v、w是顶点。可以说顶点w和顶点v互为邻接点。边(v, w)依附于顶点w和v，或者说边(v, w)和顶点v、w相关联。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mn>2</mn></msub><mo>=</mo><mrow><mo fence="true">(</mo><msub><mi>V</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>2</mn></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">G_{2}=\left(V_{2}, E_{2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">{</mo><mi mathvariant="normal">A</mi><mo separator="true">,</mo><mi mathvariant="normal">B</mi><mo separator="true">,</mo><mi mathvariant="normal">C</mi><mo separator="true">,</mo><mi mathvariant="normal">D</mi><mo separator="true">,</mo><mi mathvariant="normal">E</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">V_{2}=\{\mathrm{A}, \mathrm{B}, \mathrm{C}, \mathrm{D}, \mathrm{E}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathrm">A</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">B</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">C</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">D</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">E</span></span><span class="mclose">}</span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">(</mo><mi mathvariant="normal">A</mi><mo separator="true">,</mo><mi mathvariant="normal">B</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi mathvariant="normal">B</mi><mo separator="true">,</mo><mi mathvariant="normal">D</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi mathvariant="normal">B</mi><mo separator="true">,</mo><mi mathvariant="normal">E</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi mathvariant="normal">C</mi><mo separator="true">,</mo><mi mathvariant="normal">D</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi mathvariant="normal">C</mi><mo separator="true">,</mo><mi mathvariant="normal">E</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mo stretchy="false">(</mo><mi mathvariant="normal">D</mi><mo separator="true">,</mo><mi mathvariant="normal">E</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">E_{2}=\{(\mathrm{A}, \mathrm{B}),(\mathrm{B}, \mathrm{D}),(\mathrm{B}, \mathrm{E}),(\mathrm{C}, \mathrm{D}),(\mathrm{C}, \mathrm{E}),(\mathrm{D}, \mathrm{E})\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">A</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">B</span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">B</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">D</span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">B</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">E</span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">C</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">D</span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">C</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">E</span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">D</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">E</span></span><span class="mclose">)</span><span class="mclose">}</span></span></span></span></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180852366.png" alt="image-20220518085246181"></p>
<p><strong>有向图</strong></p>
<p>若E是有向边(也称弧)的有限集合时，则图G为有向图。弧是顶点的有序对，记为&lt;v, w&gt;，其中v、w是顶点，v称为弧尾，w称为弧头，&lt;v,w&gt;称为从顶点v到顶点w的弧，也称v邻接到w，或w邻接自v。&lt;v, w&gt;≠&lt;w, v&gt;</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>G</mi><mn>1</mn></msub><mo>=</mo><mrow><mo fence="true">(</mo><msub><mi>V</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>E</mi><mn>1</mn></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">G_{1}=\left(V_{1}, E_{1}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">{</mo><mi mathvariant="normal">A</mi><mo separator="true">,</mo><mi mathvariant="normal">B</mi><mo separator="true">,</mo><mi mathvariant="normal">C</mi><mo separator="true">,</mo><mi mathvariant="normal">D</mi><mo separator="true">,</mo><mi mathvariant="normal">E</mi><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">V_{1}=\{\mathrm{A}, \mathrm{B}, \mathrm{C}, \mathrm{D}, \mathrm{E}\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mord"><span class="mord mathrm">A</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">B</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">C</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">D</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">E</span></span><span class="mclose">}</span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mo>=</mo><mo stretchy="false">{</mo><mo stretchy="false">⟨</mo><mi mathvariant="normal">A</mi><mo separator="true">,</mo><mi mathvariant="normal">B</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mi mathvariant="normal">A</mi><mo separator="true">,</mo><mi mathvariant="normal">C</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mi mathvariant="normal">A</mi><mo separator="true">,</mo><mi mathvariant="normal">D</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mi mathvariant="normal">A</mi><mo separator="true">,</mo><mi mathvariant="normal">E</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mi mathvariant="normal">B</mi><mo separator="true">,</mo><mi mathvariant="normal">A</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mi mathvariant="normal">B</mi><mo separator="true">,</mo><mi mathvariant="normal">C</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mi mathvariant="normal">B</mi><mo separator="true">,</mo><mi mathvariant="normal">E</mi><mo stretchy="false">⟩</mo><mo separator="true">,</mo><mo stretchy="false">⟨</mo><mi mathvariant="normal">C</mi><mo separator="true">,</mo><mi mathvariant="normal">D</mi><mo stretchy="false">⟩</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">E_{1}=\{\langle\mathrm{A}, \mathrm{B}\rangle,\langle\mathrm{A}, \mathrm{C}\rangle,\langle\mathrm{A}, \mathrm{D}\rangle,\langle\mathrm{A}, \mathrm{E}\rangle,\langle\mathrm{B}, \mathrm{A}\rangle,\langle\mathrm{B}, \mathrm{C}\rangle,\langle\mathrm{B}, \mathrm{E}\rangle,\langle\mathrm{C}, \mathrm{D}\rangle\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mopen">⟨</span><span class="mord"><span class="mord mathrm">A</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">B</span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathrm">A</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">C</span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathrm">A</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">D</span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathrm">A</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">E</span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathrm">B</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">A</span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathrm">B</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">C</span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathrm">B</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">E</span></span><span class="mclose">⟩</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">⟨</span><span class="mord"><span class="mord mathrm">C</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">D</span></span><span class="mclose">⟩</span><span class="mclose">}</span></span></span></span></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180854378.png" alt="image-20220518085443282"></p>
<p><strong>简单图</strong></p>
<p>①不存在重复边;</p>
<p>②不存在顶点到自身的边</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180857559.png" alt="image-20220518085742470"></p>
<p><strong>多重图</strong></p>
<p>图G中某两个结点之间的边数多于一条，又允许顶点通过同一条边和自己关联,则G为多重图</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180859068.png" alt="image-20220518085914992"></p>
<p><strong>顶点的度、入度、出度</strong></p>
<p>对于==无向图:==顶点v的度是指依附于该顶点的边的条数，记为TD(v)。</p>
<p>在具有n个顶点、e条边的无向图中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi mathvariant="normal">TD</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mn>2</mn><mi>e</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n} \operatorname{TD}\left(v_{i}\right)=2 e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mord mathrm">T</span><span class="mord mathrm">D</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">e</span></span></span></span></p>
<p>即<strong>无向图的全部顶点的度的和等于边数的2倍</strong></p>
<p>对于<mark>有向图</mark>:</p>
<p>入度是以顶点v为终点的有向边的数目，记为ID(v);</p>
<p>出度是以顶点v为起点的有向边的数目，记为OD(v)。</p>
<p>顶点v的度等于其入度和出度之和，即TD(v)=ID(v)+OD(v)。</p>
<p><strong>在具有n个顶点、e条边的有向图中，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mrow><mi mathvariant="normal">I</mi><mi mathvariant="normal">D</mi></mrow><mrow><mo fence="true">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mrow><mi mathvariant="normal">O</mi><mi mathvariant="normal">D</mi></mrow><mrow><mo fence="true">(</mo><msub><mi>v</mi><mi>i</mi></msub><mo fence="true">)</mo></mrow><mo>=</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">\sum_{i=1}^{n} \mathrm{ID}\left(v_{i}\right)=\sum_{i=1}^{n} \mathrm{OD}\left(v_{i}\right)=e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">I</span><span class="mord mathrm">D</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.104002em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathrm">O</span><span class="mord mathrm">D</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span></strong></p>
<p><strong>顶点-顶点的关系描述</strong></p>
<ul>
<li>路径――顶点p到顶点q之间的一条路径是指顶点序列，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><msub><mi>i</mi><mn>1</mn></msub></msub><mo separator="true">,</mo><msub><mi>v</mi><msub><mi>h</mi><mn>2</mn></msub></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>v</mi><msub><mi>i</mi><mi>m</mi></msub></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">v_{p}, v_{i_{1}}, v_{h_{2}}, \cdots, v_{i_{m}}, v_{q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.716668em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></li>
<li>回路――第一个顶点和最后一个顶点相同的路径称为回路或环</li>
<li>简单路径――在路径序列中，顶点不重复出现的路径称为简单路径。</li>
<li>简单回路――除第一个顶点和最后一个顶点外，其余顶点不重复出现的回路称为简单回路。</li>
<li>路径长度一一路径上边的数目</li>
<li>点到点的距离――从顶点u出发到顶点v的最短路径若存在，则此路径的长度称为从u到v的距离。若从u到v根本不存在路径，则记该距离为无穷（ ∞)。</li>
<li>无向图中，若从顶点v到顶点w有路径存在，则称v和w是<strong>连通的</strong></li>
<li>有向图中，若从顶点v到顶点w和从顶点w到顶点v之间都有路径，则称这两个顶点是<strong>强连通的</strong></li>
</ul>
<p><strong>连通图、强连通图</strong></p>
<p>若图G中任意两个顶点都是连通的，则称图G为<strong>连通图</strong>，否则称为非连通图。</p>
<p><mark>常见考点:</mark><br>
对于n个顶点的<strong>无向图G,</strong><br>
若G是<strong>连通图</strong>，则最少有n-1条边<br>
若G是<strong>非连通图</strong>，则最多可能有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mi>C</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">C_{n-1}^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1205469999999997em;vertical-align:-0.30643899999999996em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999998em;"><span style="top:-2.451892em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.30643899999999996em;"><span></span></span></span></span></span></span></span></span></span>条边</p>
<p>若图中任何一对顶点都是强连通的，则称此图<strong>强连通图</strong>。</p>
<p><mark>常见考点:</mark><br>
对于n个顶点的<strong>有向图G</strong>，<br>
若G是<strong>强连通图</strong>，则<strong>最少</strong>有n条边(形成回路)</p>
<p><strong>子图</strong></p>
<p>设有两个图G=(V,E)和G’= (v’,E’)，若v’是v的子集，且E’是E的子集，则称G’是G的子图。</p>
<p>若有满足v(G’) = v(G)的子图G’，则称其为G的生成子图</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180927879.png" alt="image-20220518092726786"></p>
<p>（无向图、子图、生成子图）</p>
<p><strong>并非任意挑几个点，几条边都能构成子图，因为这样的子集可能不是图</strong></p>
<p><strong>连通分量、强连通分量</strong></p>
<p>无向图中的极大连通子图称为连通分量。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180934841.png" alt="image-20220518093449749"></p>
<p>有向图中的极大强连通子图称为有向图的强连通分量</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180937400.png" alt="image-20220518093706302"></p>
<p><strong>生成树</strong></p>
<p><strong>连通图的生成树是包含图中全部顶点的一个极小连通子图。</strong></p>
<p>若图中顶点数为n，则它的生成树含有n-1条边。对生成树而言，若砍去它的一条边，则会变成非连通图，若加上一条边则会形成一个回路。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180941448.png" alt="image-20220518094112370"></p>
<p>在非连通图中，连通分量的生成树构成了非连通图的生成森林。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205180940981.png" alt="image-20220518094057888"></p>
<p><strong>边的权、带权图/网</strong></p>
<p>边的权――在一个图中，每条边都可以标上具有某种含义的数值，该数值称为该边的权值。</p>
<p>带权图/网—―边上带有权值的图称为带权图，也称网。</p>
<p>带权路径长度――当图是带权图时，一条路径上所有边的权值之和，称为该路径的带权路径长度</p>
<p><strong>无向完全图</strong></p>
<p>无向完全图――无向图中任意两个顶点之间都存在边<br>
若无向图的顶点数|V|=n，</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>∈</mo><mrow><mo fence="true">[</mo><mn>0</mn><mo separator="true">,</mo><msubsup><mi>C</mi><mi>n</mi><mn>2</mn></msubsup><mo fence="true">]</mo></mrow><mo>=</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">|E| \in\left[0, C_{n}^{2}\right]=[0, n(n-1) / 2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">]</span></span></span></span></p>
<p><strong>有向完全图</strong></p>
<p>有向完全图—一有向图中任意两个顶点之间都存在方向相反的两条弧</p>
<p>若有向图的顶点数|V|=n，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>∈</mo><mrow><mo fence="true">[</mo><mn>0</mn><mo separator="true">,</mo><mn>2</mn><msubsup><mi>C</mi><mi>n</mi><mn>2</mn></msubsup><mo fence="true">]</mo></mrow><mo>=</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">|E| \in\left[0,2 C_{n}^{2}\right]=[0, n(n-1)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></p>
<p>边数很少的图称为<strong>稀疏图</strong></p>
<p>反之称为<strong>稠密图</strong></p>
<p>没有绝对的界限, 一般来说 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>&lt;</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mi>log</mi><mo>⁡</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|E|&lt;|V| \log |V|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∣</span></span></span></span> 时, 可以将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> 视为稀疏图</p>
<p>树——一不存在回路，且连通的无向图</p>
<p>有向树——一个顶点的入度为0、其余顶点的入度均为1的有向图，称为有向树。</p>
<p>n个顶点的树，必有n-1条边。</p>
<p>常见考点:n个顶点的图，<strong>若|E|&gt;n-1，则一定有回路</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181010425.png" alt="image-20220518101005318"></p>
<h2 id="图的存储"><a class="markdownIt-Anchor" href="#图的存储"></a> 图的存储</h2>
<h3 id="邻接矩阵法"><a class="markdownIt-Anchor" href="#邻接矩阵法"></a> 邻接矩阵法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXVertexNum 100</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> Vertex[MAXVertexNum];<span class="comment">//顶点表</span></span><br><span class="line">    <span class="keyword">int</span> Edge[MAXVertexNum][MAXVertexNum];<span class="comment">//邻接矩阵，边表</span></span><br><span class="line">    <span class="keyword">int</span> vexnum, arcnum;<span class="comment">//顶点数，边数</span></span><br><span class="line">&#125;MGraph;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181029142.png" alt="image-20220518102935060"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181030999.png" alt="image-20220518103000898"></p>
<p>空间复杂度: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mrow><mo fence="true">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow><mo>−</mo></mrow><annotation encoding="application/x-tex">\mathrm{O}\left(|\mathrm{V}|^{2}\right)-</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathrm" style="margin-right:0.01389em;">V</span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span></span></span></span>只和顶点数相关, 和实际的边数无关</p>
<p>适合用于存储稠密图</p>
<p>无向图的邻接矩阵是对称矩阵, 可以压缩存储 (只存储上三角区/下三角区)</p>
<p>设图G的邻接矩阵为A（矩阵元素为0/1)，则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="bold">A</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">\mathbf{A}^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">A</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span> 的元素 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi mathvariant="normal">A</mi><mi>n</mi></msup><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\mathrm{A}^{n}[i][j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">A</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span>等于由顶点i到顶点j的长度为n的路径的数目</p>
<h3 id="邻接表法"><a class="markdownIt-Anchor" href="#邻接表法"></a> 邻接表法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span><span class="comment">//边</span></span><br><span class="line">    <span class="keyword">int</span> adjvex;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;ArcNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span><span class="comment">//顶点</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    ArcNode *first;</span><br><span class="line">&#125;VNode,Adjlist[MAXVertexNum];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Adjlist  vertices;</span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;</span><br><span class="line">&#125;ALGraph;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181043399.png" alt="image-20220518104350302"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181044658.png" alt="image-20220518104412571"></p>
<h3 id="十字链表"><a class="markdownIt-Anchor" href="#十字链表"></a> 十字链表</h3>
<p>邻接表找顶点的入边不方便，而邻接矩阵空间复杂度高</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181048729.png" alt="image-20220518104819645"></p>
<p>空间复杂度:o(|VI+|El)<br>
如何找到指定顶点的所有出边?—―顺着绿色线路找</p>
<p>如何找到指定顶点的所有入边?――顺着橙色线路找</p>
<p><strong>注意:十字链表只用于存储有向图</strong></p>
<h3 id="邻接多重表"><a class="markdownIt-Anchor" href="#邻接多重表"></a> 邻接多重表</h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181056733.png" alt="image-20220518105629650"></p>
<p>删除边-结点等操作很方便</p>
<p>注意：邻接多重表用于储存无向图</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181052917.png" alt="image-20220518105218833"></p>
<h2 id="图的遍历"><a class="markdownIt-Anchor" href="#图的遍历"></a> 图的遍历</h2>
<h3 id="广度优先搜索"><a class="markdownIt-Anchor" href="#广度优先搜索"></a> 广度优先搜索</h3>
<p>**广度优先遍历(Breadth-First-Search, BFS)要点:</p>
<p><strong>1找到与一个顶点相邻的所有顶点</strong></p>
<p><strong>2.标记哪些顶点被访问过</strong></p>
<p><strong>3.需要一个辅助队列</strong></p>
<p>-FirstNeighbor(G,x):求图G中顶点x的第一个邻接点，若有则返回顶点号。若x没有邻接点或图中不存在x，则返回-1。</p>
<p>-NextNeighbor(G,x,y):假设图G中顶点y是顶点x的一个邻接点，返回除y之外顶点x的下一个邻接点的顶点号，若y是x的最后一个邻接点，则返回-1。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[MAXVERTEXNUM]; <span class="comment">//访问标记数组</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Graph g, <span class="keyword">int</span> v)</span><span class="comment">//从顶点v出发遍历图g</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);<span class="comment">//访问点v</span></span><br><span class="line">    visited[v]=<span class="literal">true</span>;<span class="comment">//将v点标记</span></span><br><span class="line">    <span class="built_in">Enqueue</span>(Q,v);<span class="comment">//顶点v入队</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isEmpty</span>(Q))&#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q,v);</span><br><span class="line">        <span class="keyword">for</span>(w=<span class="built_in">FirstNeighbor</span>(G,v);w&gt;=<span class="number">0</span>;w=<span class="built_in">NextNeighbor</span>(G,v,w))</span><br><span class="line">        &#123;<span class="comment">//遍历所有v的邻接点</span></span><br><span class="line">            <span class="keyword">if</span>(!visited[w])<span class="comment">//w为v的未被访问的邻接点</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w]=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同一个图的邻接矩阵表示方式唯一，因此广度优先遍历序列唯一</p>
<p>同一个图邻接表表示方式不唯一，因此广度优先遍历序列不唯一</p>
<p>上述算法可能出现的问题：<strong>如果是非连通图，无法遍历完所有节点</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181548314.png" alt="image-20220518154829223"></p>
<p>改进：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[MAXVERTEXNUM]; <span class="comment">//访问标记数组</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//BFS</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">InitQueue</span>(Q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])<span class="comment">//对每个连通分量都进行一次BFS</span></span><br><span class="line">            <span class="built_in">BFS</span>(g,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(Graph g, <span class="keyword">int</span> v)</span><span class="comment">//从顶点v出发遍历图g</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);<span class="comment">//访问点v</span></span><br><span class="line">    visited[v]=<span class="literal">true</span>;<span class="comment">//将v点标记</span></span><br><span class="line">    <span class="built_in">Enqueue</span>(Q,v);<span class="comment">//顶点v入队</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isEmpty</span>(Q))&#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q,v);</span><br><span class="line">        <span class="keyword">for</span>(w=<span class="built_in">FirstNeighbor</span>(G,v);w&gt;=<span class="number">0</span>;w=<span class="built_in">NextNeighbor</span>(G,v,w))</span><br><span class="line">        &#123;<span class="comment">//遍历所有v的邻接点</span></span><br><span class="line">            <span class="keyword">if</span>(!visited[w])<span class="comment">//w为v的未被访问的邻接点</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">visit</span>(w);</span><br><span class="line">                visited[w]=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结论:对于无向图，调用BFS函数的次数=连通分量数</strong></p>
<p>空间复杂度:最坏情况，辅助队列大小为O(V）</p>
<p><mark>邻接矩阵存储的图:</mark></p>
<p>访问个顶点需要O（V)的时间</p>
<p>查找每个顶点的邻接点都需要O(V）的时间，而总共有个顶点时间复杂度=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="bold">V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(|\mathbf{V}|^{2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">V</span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></p>
<p><mark>邻接表存储的图:</mark></p>
<p>访问个顶点需要O(V)的时间</p>
<p>查找各个顶点的邻接点共需要O(E)的时间,时间复杂度=O(IV|+|E|)</p>
<p>广度优先生成树由广度优先遍历过程确定。</p>
<p>由于邻接表的表示方式不唯一，因此基于邻接表的广度优先生成树也不唯一。</p>
<h3 id="深度优先遍历"><a class="markdownIt-Anchor" href="#深度优先遍历"></a> 深度优先遍历</h3>
<p>类似树的先根遍历</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[MAXVERTEXNUM]; <span class="comment">//访问标记数组</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph g, <span class="keyword">int</span> v)</span><span class="comment">//从顶点v出发遍历图g</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);<span class="comment">//访问点v</span></span><br><span class="line">    visited[v]=<span class="literal">true</span>;<span class="comment">//将v点标记</span></span><br><span class="line">    <span class="keyword">for</span>(w=<span class="built_in">FirstNeighbor</span>(G,v);w&gt;=<span class="number">0</span>;w=<span class="built_in">NextNeighbor</span>(G,v,w))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])<span class="comment">//w为v的未被访问的邻接点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(g,w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同理，对于非连通图，无法遍历完所有结点</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181608063.png" alt="image-20220518160759975"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[MAXVERTEXNUM]; <span class="comment">//访问标记数组</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            <span class="built_in">DFS</span>(g,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph g, <span class="keyword">int</span> v)</span><span class="comment">//从顶点v出发遍历图g</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);<span class="comment">//访问点v</span></span><br><span class="line">    visited[v]=<span class="literal">true</span>;<span class="comment">//将v点标记</span></span><br><span class="line">    <span class="keyword">for</span>(w=<span class="built_in">FirstNeighbor</span>(G,v);w&gt;=<span class="number">0</span>;w=<span class="built_in">NextNeighbor</span>(G,v,w))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])<span class="comment">//w为v的未被访问的邻接点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(g,w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>空间复杂度:最坏情况，函数调用栈大小为O(V），最好为O(1)</p>
<p><mark>邻接矩阵存储的图:</mark></p>
<p>访问个顶点需要O（V)的时间</p>
<p>查找每个顶点的邻接点都需要O(V）的时间，而总共有个顶点时间复杂度=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="bold">V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(|\mathbf{V}|^{2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">V</span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></p>
<p><mark>邻接表存储的图:</mark></p>
<p>访问个顶点需要O(V)的时间</p>
<p>查找各个顶点的邻接点共需要O(E)的时间,时间复杂度=O(IV|+|E|)</p>
<p>深度优先生成树由深度优先遍历过程确定。</p>
<p>由于邻接表的表示方式不唯一，因此基于邻接表的深度优先生成树也不唯一。</p>
<p><strong>总结</strong></p>
<p><strong>对无向图进行BFS/DFS遍历</strong></p>
<p>调用BFS/DFS函数的次数=连通分量数，</p>
<p>对于连通图,只需调用1次 BFS/DFS</p>
<p><strong>对有向图进行BFS/DFS遍历</strong></p>
<p>调用BFS/DFS函数的次数要具体问题具体分析</p>
<p>若起始顶点到其他各顶点都有路径，则只需调用1次BFS/DFS函数</p>
<p>对于强连通图，从任一结点出发都只需调用1次BFS/DFS</p>
<h2 id="最小生成树"><a class="markdownIt-Anchor" href="#最小生成树"></a> 最小生成树</h2>
<p>对于一个<strong>带权连通无向图</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G=(V, E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>, 生成树不同, 每棵树的权 (即树中所有边上的权值 之和）也可能不同。设 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> 的所有生成树的集合, <strong>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span></span></span></span> 中边的权值之和最小的生成 树</strong>, 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span> 称为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> 的最小生成树 (Minimum-Spanning-Tree, MST)。</p>
<ul>
<li>
<p>最小生成树可能有多个，但边的权值之和总是唯一且最小的</p>
</li>
<li>
<p>最小生成树的边数=顶点数–1。砍掉一条则不连通，增加一条边则会出现回路</p>
</li>
<li>
<p>如果一个连通图本身就是一棵树，则其最小生成树就是它本身</p>
</li>
<li>
<p>只有连通图才有生成树，非连通图只有生成森林</p>
</li>
</ul>
<h3 id="prim算法"><a class="markdownIt-Anchor" href="#prim算法"></a> Prim算法</h3>
<p><strong>从某一个顶点开始构建生成树;每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181642327.gif" alt="GIF 2022-05-18 16-40-50"></p>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mrow><mo fence="true">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{O}\left(|\mathrm{V}|^{2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathrm" style="margin-right:0.01389em;">V</span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>适用于边稠密图</p>
<h3 id="kruskal算法"><a class="markdownIt-Anchor" href="#kruskal算法"></a> Kruskal算法</h3>
<p><strong>每次选择—条权值最小的边，使这条边的两头连通（原本已经连通的就不选)，所有结点都连通</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181654747.gif" alt="GIF 2022-05-18 16-53-07"></p>
<p>时间复杂度： $O\left(|E| \log _{2} \mid\right. E| <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span>适合用于边稀疏图</p>
<h2 id="最小路径"><a class="markdownIt-Anchor" href="#最小路径"></a> 最小路径</h2>
<h3 id="bfs求单源最短路径"><a class="markdownIt-Anchor" href="#bfs求单源最短路径"></a> BFS求单源最短路径</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS_Distance</span><span class="params">(Graph g, <span class="keyword">int</span> v)</span><span class="comment">//从顶点v出发遍历图g</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        d[i]=<span class="number">0</span>;</span><br><span class="line">        path[i]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    d[v]=<span class="number">0</span>;</span><br><span class="line">    visited[v]=<span class="literal">true</span>;<span class="comment">//将v点标记</span></span><br><span class="line">    <span class="built_in">Enqueue</span>(Q,v);<span class="comment">//顶点v入队</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isEmpty</span>(Q))&#123;</span><br><span class="line">        <span class="built_in">DeQueue</span>(Q,v);</span><br><span class="line">        <span class="keyword">for</span>(w=<span class="built_in">FirstNeighbor</span>(G,v);w&gt;=<span class="number">0</span>;w=<span class="built_in">NextNeighbor</span>(G,v,w))</span><br><span class="line">        &#123;<span class="comment">//遍历所有v的邻接点</span></span><br><span class="line">            <span class="keyword">if</span>(!visited[w])<span class="comment">//w为v的未被访问的邻接点</span></span><br><span class="line">            &#123;</span><br><span class="line">                d[w]=d[v]+<span class="number">1</span>;</span><br><span class="line">                path[w]=v;</span><br><span class="line">                visited[w]=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">EnQueue</span>(Q,w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>只适用于无权图，或者所有边权值都相等的图</strong></p>
<h3 id="dijkstra算法"><a class="markdownIt-Anchor" href="#dijkstra算法"></a> Dijkstra算法</h3>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181727917.gif" alt="dj2"></p>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><msup><mrow><mo fence="true">(</mo><mi mathvariant="normal">n</mi><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\mathrm{O}\left(\mathrm{n}\right)^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.204008em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">n</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span> 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mrow><mo fence="true">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{O}\left(|\mathrm{V}|^{2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathrm" style="margin-right:0.01389em;">V</span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></p>
<p>Dijkstra<strong>算法不适用于有负权值的带权图</strong></p>
<h3 id="floyd算法"><a class="markdownIt-Anchor" href="#floyd算法"></a> Floyd算法</h3>
<p>Floyd算法:求出每一对顶点之间的最短路径</p>
<p>使用动态规划思想，将问题的求解分为多个阶段</p>
<p>对于n个顶点的图G，求任意一对顶点Vi-&gt;Vj之间的最短路径可分为如下几个阶段:</p>
<ul>
<li>#初始:不允许在其他顶点中转，最短路径是?</li>
<li>#0:若允许在Vo中转，最短路径是?</li>
<li>#1∶若允许在Vo、V中转,最短路径是?#2:若允许在Vo、V1、V2中转，最短路径是?..</li>
<li>#n-1∶若允许在Vo、V1、V…Vn-1中转，最短路径是?</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181840292.gif" alt="GIF 2022-05-18 18-39-48"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181842271.png" alt="image-20220518184225174"></p>
<p>时间复杂度, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mrow><mo fence="true">(</mo><mi mathvariant="normal">V</mi><mo>∣</mo><msup><mrow></mrow><mn>3</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{O}\left(\mathrm{V} \mid{ }^{3}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathrm" style="margin-right:0.01389em;">V</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord"></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span><br>
空间复杂度, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mrow><mo fence="true">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{O}\left(|\mathrm{V}|^{2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathrm" style="margin-right:0.01389em;">V</span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></p>
<p><strong>Floyd算法不能解决带有“负权回路&quot;的图（有负权值的边组成回路)，这种图有可能没有最短路径</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181843377.png" alt="image-20220518184355292"></p>
<h2 id="有向无环图"><a class="markdownIt-Anchor" href="#有向无环图"></a> 有向无环图</h2>
<p>有向无环图:若一个有向图中不存在环，则称为有向无环图，简称DAG图(Directed Acyclic Graph)</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181845369.png" alt="image-20220518184518288"></p>
<p><strong>顶点中不能出现重复的操作数</strong></p>
<p>方法：</p>
<p>Step 1:把各个操作数不重复地排成一排</p>
<p>Step 2:标出各个运算符的生效顺序（先后顺序有点出入无所谓)</p>
<p>Step 3:按顺序加入运算符，注意“分层”</p>
<p>Step 4:从底向上逐层检查同层的运算符是否可以合体</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181847378.png" alt="image-20220518184722301"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181847304.png" alt="image-20220518184736217"></p>
<h2 id="拓扑排序"><a class="markdownIt-Anchor" href="#拓扑排序"></a> 拓扑排序</h2>
<p>**AOV网(**Activity on vertex Network，用顶点表示活动的网):</p>
<p>用<strong>DAG图〈有向无环图）表示一个工程</strong>。顶点表示活动，有向边&lt;V,V&gt;表示活动V必须先于活动V进行</p>
<p><strong>拓扑排序:</strong></p>
<p>在图论中，由一个有向无环图的顶点组成的序列，当且仅当满足下列条件时，称为该图的一个拓扑排序:<br>
①每个顶点出现且只出现一次。</p>
<p>②若顶点A在序列中排在顶点B的前面，则在图中不存在从顶点B到顶点A的路径。</p>
<p>或定义为:拓扑排序是对有向无环图的顶点的一种排序，它使得若存在一条从顶点A到顶点B的路径，则在排序中顶点B出现在顶点A的后面**。每个AOV网都有一个或多个拓扑排序序列。**</p>
<p><strong>拓扑排序的实现:</strong></p>
<p>①从AOV网中选择一个没有前驱(入度为O)的顶点并输出。</p>
<p>②从网中删除该顶点和所有以它为起点的有向边。</p>
<p>③重复①和②直到当前的AOV网为空或当前网中不存在无前驱的顶点为止。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Topologicalsort</span> <span class="params">(Graph G)</span></span>&#123;</span><br><span class="line">    <span class="built_in">Initstack</span>(S)<span class="comment">//初始化栈，存储入度为o的顶点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">        <span class="keyword">if</span> (indegree[i]==<span class="number">0</span>)</span><br><span class="line">        	<span class="built_in">Push</span>(S,i);<span class="comment">//将所有入度为o的顶点进栈</span></span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span> ;<span class="comment">//计数,记录当前已经输出的顶点数</span></span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">IsEmpty</span>(S))&#123;<span class="comment">//栈不空，则存在入度为0的顶点</span></span><br><span class="line">        <span class="built_in">Pop</span>(S,i);<span class="comment">//栈顶元素出栈</span></span><br><span class="line">        print[count++]=i;<span class="comment">//输出顶点i</span></span><br><span class="line">        <span class="keyword">for</span>(p=G.vertices[i].firstarc;p;p=p-&gt;nextarc)&#123;</span><br><span class="line">        <span class="comment">//将所有i指向的顶点的入度减1，并且将入度减为0的顶点压入栈s</span></span><br><span class="line">            v=p-&gt;adjvex;</span><br><span class="line">            <span class="keyword">if</span>(!(--indegree[v]))</span><br><span class="line">            <span class="built_in">Push</span>(S,v) ;<span class="comment">//1入度为0，则入栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">// while</span></span><br><span class="line">    <span class="keyword">if</span>(count&lt;G.vexnum)</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//排序失败,有向图中有回路</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//拓扑排序成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>时间复杂度： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|V|+|E|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span><br>
若采用邻接矩阵, 则需 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">O</mi><mrow><mo fence="true">(</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\mathrm{O}\left(|\mathrm{V}|^{2}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord"><span class="mord mathrm">O</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">∣</span><span class="mord"><span class="mord mathrm" style="margin-right:0.01389em;">V</span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span></p>
<h3 id="逆拓扑排序"><a class="markdownIt-Anchor" href="#逆拓扑排序"></a> 逆拓扑排序</h3>
<p>对一个AOV网，如果采用下列步骤进行排序,则称之为逆拓扑排序:</p>
<p>①从AOV网中选择一个没有后继（出度为O)的顶点并输出。<br>
②从网中删除该顶点和所有以它为终点的有向边。<br>
③重复①和②直到当前的AOV网为空。</p>
<p>利用DFS实现(在顶点退栈前输出)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> visited[MAXVERTEXNUM]; <span class="comment">//访问标记数组</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph g)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">        visited[i]=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            <span class="built_in">DFS</span>(g,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph g, <span class="keyword">int</span> v)</span><span class="comment">//从顶点v出发遍历图g</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">visit</span>(v);<span class="comment">//访问点v</span></span><br><span class="line">    visited[v]=<span class="literal">true</span>;<span class="comment">//将v点标记</span></span><br><span class="line">    <span class="keyword">for</span>(w=<span class="built_in">FirstNeighbor</span>(G,v);w&gt;=<span class="number">0</span>;w=<span class="built_in">NextNeighbor</span>(G,v,w))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[w])<span class="comment">//w为v的未被访问的邻接点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DFS</span>(g,w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;v&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关键路径"><a class="markdownIt-Anchor" href="#关键路径"></a> 关键路径</h3>
<p>在带权有向图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销〈如完成活动所需的时间)，称之为用边表示活动的网络，<strong>简称AOE网(Activity On Edge NetWork)</strong></p>
<p>AOE网具有以下两个性质:</p>
<p>①只有在某顶点所代表的事件发生后，从该顶点出发的各有向边所代表的活动才能开始;</p>
<p>②只有在进入某顶点的各有向边所代表的活动都已结束时，该顶点所代表的事件才能发生。<strong>另外，有些活动是可以并行进行的</strong></p>
<p>在AOE网中仅有一个入度为0的顶点，称为<strong>开始顶点（源点)</strong>，它表示整个工程的开始;<br>
也仅有一个出度为0的顶点，称为<strong>结束顶点（汇点)</strong>，它表示整个工程的结束。</p>
<p><strong>从源点到汇点的有向路径可能有多条，所有路径中，具有最大路径长度的路径称为关键路径,而把关键路径上的活动称为关键活动</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181909831.png" alt="image-20220518190927732"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205181909718.png" alt="image-20220518190936625"></p>
<p>活动a的时间余量d(i)=l(i)-e(i)，表示在不增加完成整个工程所需总时间的情况下，活动a可以拖延的时间若一个活动的时间余量为零，则说明该活动必须要如期完成，<strong>d(t)=0即K(i)= e(i)的活动a是关键活动</strong></p>
<p><strong>由关键活动组成的路径就是关键路径</strong></p>
<p>若关键活动耗时增加，则整个工程的工期将增长</p>
<p>缩短关键活动的时间，可以缩短整个工程的工期</p>
<p>当缩短到一定程度时,关键活动可能会变成非关键活动</p>
<p>(1) 求所有事件的最早发生时间 ve()</p>
<p>按拓扑排序序列, 依次求各个顶点的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v e(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> :<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">v e(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mopen">(</span></span></span></span> 源点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Max</mi><mo>⁡</mo><mrow><mo fence="true">{</mo><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo>+</mo></mrow></mrow><annotation encoding="application/x-tex">v e(k)=\operatorname{Max}\left\{v e(j)+\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">M</span><span class="mord mathrm">a</span><span class="mord mathrm">x</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord">+</span><span class="mclose nulldelimiter"></span></span></span></span></span> Weight <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mrow><mo fence="true">(</mo><msub><mi>v</mi><mi>j</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>k</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">}</mo></mrow><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\left.\left(v_{j}, v_{k}\right)\right\}, v_{j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="minner"><span class="mopen nulldelimiter"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的任意前驱</p>
<p>(2) 求所有事件的最迟发生时间 vl()</p>
<p>按逆拓扑排序序列, 依次求各个顶点的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>l</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">v l(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span> :<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">v l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span></span></span></span> (汇点) <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">=v e(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mopen">(</span></span></span></span> 汇点 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span></span></span></span><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mi>l</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Min</mi><mo>⁡</mo><mrow><mo fence="true">{</mo><mi>v</mi><mi>l</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo>−</mo></mrow></mrow><annotation encoding="application/x-tex">v l(k)=\operatorname{Min}\left\{v l(j)-\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mord mathrm">M</span><span class="mord mathrm">i</span><span class="mord mathrm">n</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">{</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord">−</span><span class="mclose nulldelimiter"></span></span></span></span></span> Weight <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mrow><mo fence="true">(</mo><msub><mi>v</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow><mo fence="true">}</mo></mrow><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">\left.\left(v_{k}, v_{j}\right)\right\}, v_{j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="minner"><span class="mopen nulldelimiter"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mclose delimcenter" style="top:0em;">}</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span> 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>v</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">v_{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的任意后继</p>
<p>(3) 求所有活动的最早发生时间 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">e</mi><mo stretchy="false">(</mo></mrow><annotation encoding="application/x-tex">\mathrm{e}(</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">e</span></span><span class="mopen">(</span></span></span></span> )</p>
<p>若边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><msub><mi>v</mi><mi>k</mi></msub><mo separator="true">,</mo><mi>v</mi><mi>ρ</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;v_{k}, v \rho&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">ρ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span> 表示活动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>e</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>v</mi><mi>e</mi><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">e(i)=v e(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></p>
<p>(4) 求所有活动的最迟发生时间 I()</p>
<p>若边 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><msub><mi>v</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;v_{k}, v_{j}&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8252079999999999em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span></span></span> 表示活动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">a_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>v</mi><mi>l</mi><mo stretchy="false">(</mo><mi>j</mi><mo stretchy="false">)</mo><mo>−</mo><mi mathvariant="normal">Weight</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><msub><mi>v</mi><mi>k</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>j</mi></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">l(i)=v l(j)-\operatorname{Weight}\left(v_{k}, v_{j}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mop"><span class="mord mathrm" style="margin-right:0.01389em;">W</span><span class="mord mathrm">e</span><span class="mord mathrm">i</span><span class="mord mathrm" style="margin-right:0.01389em;">g</span><span class="mord mathrm">h</span><span class="mord mathrm">t</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></p>
<h1 id="7查找"><a class="markdownIt-Anchor" href="#7查找"></a> 7.查找</h1>
<p>查找——在数据集合中寻找满足某种条件的数据元素的过程称为查找</p>
<p>查找表（查找结构)——用于查找的数据集合称为查找表，它由同一类型的数据元素（或记录)组成</p>
<p>关键字——数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的。</p>
<p>查找长度——在查找运算中，需要对比关键字的次数称为查找长度</p>
<p>平均查找长度(ASL,Average Search Length)——所有查找过程中进行关键字的比较次数的平均值</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301002013.png" alt="image-20220530100157819"></p>
<h2 id="顺序查找"><a class="markdownIt-Anchor" href="#顺序查找"></a> 顺序查找</h2>
<p>顺序查找又叫“线性查找”，通用于<strong>线性表</strong>。</p>
<p>算法思想为从头到脚挨个找。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *data;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;Sqlist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_seq</span><span class="params">(Sqlist s, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length&amp;&amp;s.data[i]!=key;i++)</span><br><span class="line">    <span class="keyword">return</span> i==s.length?<span class="number">-1</span>:i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search_seq</span><span class="params">(Sqlist s, <span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//哨兵法 数组下标从1开始存 无需判断数组越界</span></span><br><span class="line">    s.data[<span class="number">0</span>] = key;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length;s.data[i]!=key;i--)</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查找效率分析：</p>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">S</mi><mi mathvariant="bold">L</mi></mrow><mtext>成功 </mtext></msub><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>…</mo><mo>+</mo><mi>n</mi></mrow><mi>n</mi></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\mathbf{A S L}_{\text {成功 }}=\frac{1+2+3+\ldots+n}{n}=\frac{n+1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83611em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">S</span><span class="mord mathbf">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">成功</span><span class="mord mtight"> </span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mbin mtight">+</span><span class="mord mtight">3</span><span class="mbin mtight">+</span><span class="minner mtight">…</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi mathvariant="normal">A</mi><mi mathvariant="normal">S</mi><mi mathvariant="normal">L</mi></mrow><mtext>失败 </mtext></msub><mo>=</mo><mi mathvariant="normal">n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\mathrm{ASL}_{\text {失败 }}=\mathrm{n}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">A</span><span class="mord mathrm">S</span><span class="mord mathrm">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">失败</span><span class="mord mtight"> </span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathrm">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
</li>
</ul>
<p><strong>优化：</strong></p>
<ul>
<li>
<p>对有序表进行线性查找（递增/递减）</p>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi mathvariant="normal">A</mi><mi mathvariant="normal">S</mi><mi mathvariant="normal">L</mi></mrow><mtext>失败 </mtext></msub><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>…</mo><mo>+</mo><mi>n</mi><mo>+</mo><mi>n</mi></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>+</mo><mfrac><mi>n</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\mathrm{ASL}_{\text {失败 }}=\frac{1+2+3+\ldots+n+n}{n+1}=\frac{n}{2}+\frac{n}{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">A</span><span class="mord mathrm">S</span><span class="mord mathrm">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">失败</span><span class="mord mtight"> </span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mbin mtight">+</span><span class="mord mtight">3</span><span class="mbin mtight">+</span><span class="minner mtight">…</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0987230000000001em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><mi mathvariant="bold">A</mi><mi mathvariant="bold">S</mi><mi mathvariant="bold">L</mi></mrow><mtext>成功 </mtext></msub><mo>=</mo><mfrac><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>3</mn><mo>+</mo><mo>…</mo><mo>+</mo><mi>n</mi></mrow><mi>n</mi></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\mathbf{A S L}_{\text {成功 }}=\frac{1+2+3+\ldots+n}{n}=\frac{n+1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83611em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">A</span><span class="mord mathbf">S</span><span class="mord mathbf">L</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">成功</span><span class="mord mtight"> </span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mbin mtight">+</span><span class="mord mtight">3</span><span class="mbin mtight">+</span><span class="minner mtight">…</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301028312.png" alt="image-20220530102856176"></p>
<ul>
<li>如果每个结点被查找的概率不相等，<strong>要把被查概率大的元素放在前面</strong></li>
</ul>
<h2 id="折半查找"><a class="markdownIt-Anchor" href="#折半查找"></a> 折半查找</h2>
<p>又称“二分查找”，仅适用于<strong>有序</strong>的<strong>顺序表</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Binary_Search</span><span class="params">(Sqlist s,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low=<span class="number">0</span>,high=s.length<span class="number">-1</span>,mid;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(s.data[mid]==key)</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span>(s.data[mid]&lt;key)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查找效率分析：</p>
<ul>
<li>
<p>利用折半查找判定树</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301041390.png" alt="image-20220530104155275"></p>
</li>
<li>
<p>构造折半查找判定树</p>
<ul>
<li>如果当前low和high之间有奇数个元素，则mid分隔后，左右两部分元素个数相等</li>
<li>如果当前low和high之间有偶数个元素，则mid分隔后，左半部分比右半部分少一个元素</li>
</ul>
</li>
<li>
<p>由上可知，右子树结点数-左子树结点数=0或1</p>
</li>
<li>
<p>折半查找判定树一定是平衡二叉树，只有最下面一层是不满的，因此树高为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo fence="true">⌉</mo></mrow><annotation encoding="application/x-tex">\left\lceil\log _{2}(n+1)\right\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose delimcenter" style="top:0em;">⌉</span></span></span></span></span>（树高不包括失败节点）</p>
<p>失败结点为n+1个（成功结点的空链域数量）</p>
</li>
<li>
<p><strong>时间复杂度为O(logn)</strong></p>
</li>
</ul>
<h2 id="分块查找"><a class="markdownIt-Anchor" href="#分块查找"></a> 分块查找</h2>
<p><strong>块内无序，块间有序</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301058175.png" alt="image-20220530105858063"></p>
<ul>
<li>在索引表内确定待查记录所属的分块 （可顺序、可折半）
<ul>
<li>索引表若无目标关键字，则最终停在low&gt;high，则在low中查找</li>
</ul>
</li>
<li>在块内顺序查找</li>
</ul>
<p>查找效率分析：</p>
<ul>
<li>顺序查找索引表</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301111929.png" alt="image-20220530111137831"></p>
<ul>
<li>折半查找</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301125237.png" alt="image-20220530112537130"></p>
<h2 id="树形查找"><a class="markdownIt-Anchor" href="#树形查找"></a> 树形查找</h2>
<h3 id="二叉排序树"><a class="markdownIt-Anchor" href="#二叉排序树"></a> 二叉排序树</h3>
<p>左&lt;根&lt;右</p>
<p>进行中序遍历可以得到递增的有序序列</p>
<p>左右子树又是一棵二叉排序树</p>
<p><strong>二叉排序树的查找</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BSTNode,*BSTtree;</span><br><span class="line"></span><br><span class="line"><span class="function">BSTNode *<span class="title">BST_Search</span><span class="params">(BSTtree t,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(t!= <span class="literal">nullptr</span> &amp;&amp; t-&gt;key!=key)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t-&gt;key&lt;key)</span><br><span class="line">            t=t-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t=t-&gt;rchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最坏空间O(1)</li>
</ul>
<p>递归实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BSTNode *<span class="title">BST_Search2</span><span class="params">(BSTtree t,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t== <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;key==key)</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;key&lt;key)</span><br><span class="line">        <span class="built_in">BST_Search2</span>(t-&gt;rchild,key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t-&gt;key&gt;key)</span><br><span class="line">        <span class="built_in">BST_Search2</span>(t-&gt;lchild,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>最坏空间O(n)</li>
</ul>
<p><strong>二叉排序树的插入</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BST_Insert</span><span class="params">(BSTtree &amp;t,<span class="keyword">int</span> key)</span><span class="comment">//递归实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t== <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = (BSTtree)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(BSTNode));</span><br><span class="line">        t-&gt;key=key;</span><br><span class="line">        t-&gt;lchild=t-&gt;rchild= <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;key==key)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;key&lt;key)</span><br><span class="line">        <span class="built_in">BST_Insert</span>(t-&gt;rchild,key);</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;key&gt;key)</span><br><span class="line">        <span class="built_in">BST_Insert</span>(t-&gt;lchild,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>二叉排序树的构造</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_BST</span><span class="params">(BSTtree &amp;t,<span class="keyword">int</span> str[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    t = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">BST_Insert</span>(t,str[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>二叉排序树的删除</strong></p>
<p>先搜索找到目标结点:</p>
<p>①若被删除结点z是叶结点，则直接删除，不会破坏二叉排序树的性质。</p>
<p>②若结点z只有一棵左子树或右子树，则让z的子树成为z父结点的子树，替代z的位置。</p>
<p>③若结点z有左、右两棵子树，则令z的直接后继（或直接前驱）替代z，然后从二叉排序树中删去这个直接后继(或直接前驱)，这样就转换成了第一或第二种情况。</p>
<p><strong>查找效率分析</strong></p>
<ul>
<li>最好情况：n个结点的二叉树最小高度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">⌊</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lfloor\log _{2} n\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>.平均查找长度为O(logn)</li>
<li>最坏情况：每个结点只有一个分支，树高＝结点数n。平均查找长度O(n)</li>
</ul>
<h3 id="平衡二叉树"><a class="markdownIt-Anchor" href="#平衡二叉树"></a> 平衡二叉树</h3>
<p>平衡二叉树（ Balanced Binary Tree)，简称平衡树（AVL树)——树上任一结点的左子树和右子树的高度之差不超过1。</p>
<p>结点的平衡因子=左子树高-右子树高。（只能是-1，0，1）</p>
<p><strong>二叉排序树插入后如何保持平衡</strong></p>
<p>从插入点往回找到第一个不平衡结点，调整以该结点为根的子树</p>
<p><strong>每次调整的对象都是“最小不平衡子树”</strong></p>
<ul>
<li><strong>LL 在左孩子的左子树插入导致不平衡</strong></li>
</ul>
<p>​		<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301439263.png" alt="image-20220530143937127"></p>
<ul>
<li><strong>RR 在右孩子的右子树插入导致不平衡</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301440426.png" alt="image-20220530144055320"></p>
<ul>
<li><strong>LR 在左孩子的右子树插入导致不平衡</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301445078.png" alt="image-20220530144502946"></p>
<ul>
<li><strong>RL 在右孩子的左子树插入导致不平衡</strong></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301445235.png" alt="image-20220530144551118"></p>
<p><strong>查找效率分析</strong></p>
<ul>
<li>假设以n,表示深度为h的平衡树中含有的最少结点数。则有n0= 0,n1= 1,n2 =2，并且有n= nn-1+ np-2 + 1<br>
可以证明含有n个结点的平衡二叉树的最大深度为O(logzn)，平衡二叉树的平均查找长度为O(logn)</li>
</ul>
<h3 id="红黑树"><a class="markdownIt-Anchor" href="#红黑树"></a> 红黑树</h3>
<p>平衡二叉树AVL:插入/删除很容易破坏“平衡”特性，需要频繁调整树的形态。如:插入操作导致不平衡，则需要先计算平衡因子，找到最小不平衡子树(时间开销大)，再进行LL/RR/LR/RL调整</p>
<p>红黑树RBT:插入/删除很多时候不会破坏“红黑”特性，无需频繁调整树的形态。即便需要调整，一般都可以在常数级时间内完成</p>
<p>平衡二叉树:适用于以查为主、很少插入/删除的场景</p>
<p>红黑树:适用于频繁插入、删除的场景，实用性更强</p>
<p><strong>定义</strong></p>
<ul>
<li>红黑树是一颗二叉排序树</li>
<li>每个结点或是红色，或是黑色的</li>
<li>根节点是黑色的</li>
<li>叶结点(外部结点、NULL结点、失败结点）均是黑色的</li>
<li><strong>不存在两个相邻的红结点</strong>（即红结点的父节点和孩子结点均是黑色)</li>
<li>对每个结点，从该节点到任一叶结点的简单路径上，所含黑结点的数目相同</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205301509116.png" alt="image-20220530150914006"></p>
<p>结点的黑高：从某结点出发（不含该结点）到达任一空叶结点的路径上黑结点总数</p>
<p><strong>若根节点黑高为h，内部结点数（关键字）最多有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mn>2</mn><mi>h</mi></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{2h}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个</strong></p>
<p><strong>性质：</strong></p>
<ul>
<li>从根节点到叶结点的最长路径不大于最短路径的2倍</li>
<li>有n个内部节点的红黑树高度h≤ 2log(n＋1)</li>
</ul>
<p>红黑树查找时间复杂度O(logn)同AVL</p>
<h4 id="红黑树的插入操作"><a class="markdownIt-Anchor" href="#红黑树的插入操作"></a> <mark>红黑树的插入操作</mark></h4>
<ul>
<li><strong>先查找，确定插入位置，插入新节点</strong></li>
<li><strong>新结点是根——染为黑色</strong></li>
<li><strong>新结点非根——染为红色</strong>
<ul>
<li>若插入后满足红黑树定义 插入结束</li>
<li>若不满足，则需调整，<strong>调整要看新插入节点叔叔结点的颜色</strong>
<ul>
<li>叔结点为黑色：<strong>旋转+染色</strong>
<ul>
<li>LL 右单旋 父换爷+染色</li>
<li>RR 左单旋 父换爷+染色</li>
<li>LR 左右双旋 儿换爷+染色</li>
<li>RL 右左双旋 儿换爷+染色</li>
</ul>
</li>
<li>叔结点为红色： <strong>染色+变新</strong>
<ul>
<li>叔父爷染色 爷作为新结点</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="b树"><a class="markdownIt-Anchor" href="#b树"></a> B树</h3>
<p>B树，又称多路平衡查找树，B树中所有结点的孩子个数的最大值称为B树的阶，通常用m表示。</p>
<p>一棵m阶B树或为空树,或为满足如下特性的m叉树:</p>
<ul>
<li>
<p>树中每个结点至多有m棵子树，即至多含有m-1个关键字。</p>
</li>
<li>
<p>若根结点不是终端结点，则至少有两棵子树。</p>
</li>
<li>
<p>除根结点外的所有非叶结点至少有「m/2]棵子树，即至少含有「m/2]-1个关键字。(向上取整)</p>
</li>
<li>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311046894.png" alt="image-20220531104553708"></p>
</li>
<li>
<p>所有的叶结点都出现在同一层次上，并且不带信息（可以视为外部结点或类似于折半查找判定树的查找失败结点，实际上这些结点不存在，指向这些结点的指针为空)。</p>
</li>
</ul>
<p>eg：<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311049140.png" alt="image-20220531104914037"></p>
<p>m阶B树的核心特性:</p>
<ul>
<li>根节点的子树数∈[2,m]，关键字数∈[1, m-1]。</li>
<li>其他结点的子树数∈[[m/2], m];关键字数=[[m/2]-1, m-1]</li>
<li>对任一结点，其所有子树高度都相同</li>
<li>键字的值:子树0&lt;关键字1&lt;子树1&lt;关键字2&lt;子树2&lt;…(类比二叉查找树左&lt;中&lt;右)</li>
</ul>
<p><strong>B树的高度</strong></p>
<p>（不包括叶子结点）</p>
<p>含有n个关键字的m阶B树，<strong>最小、最大高度分别是</strong>？</p>
<ul>
<li>
<p>最小高度一一让每个结点尽可能的满, 有m-1个关键字, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 个分叉, 则有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">n</mi><mo>⩽</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mrow><mo fence="true">(</mo><mn>1</mn><mo>+</mo><mi>m</mi><mo>+</mo><msup><mi>m</mi><mn>2</mn></msup><mo>+</mo><msup><mi>m</mi><mn>3</mn></msup><mo>+</mo><mo>…</mo><mo>+</mo><msup><mi>m</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo fence="true">)</mo></mrow><mo>=</mo><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mspace width="1em"></mspace></mrow><annotation encoding="application/x-tex">\mathrm{n} \leqslant(m-1)\left(1+m+m^{2}+m^{3}+\ldots+m^{h-1}\right)=m^{h}-1, \quad</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7733399999999999em;vertical-align:-0.13667em;"></span><span class="mord"><span class="mord mathrm">n</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:1em;"></span></span></span></span> 因此 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>≥</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>m</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h \geq \log _{m}(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p>
</li>
<li>
<p>最大高度一一让各层的分叉尽可能的少, 即根节点只有2个分叉, 其他结点只有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi mathvariant="normal">m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">[\mathrm{m} / 2\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathrm">m</span></span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span></span></span></span> 个分叉 各层结点至少有：第一层 1、第二层 2、第三层 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo stretchy="false">⌈</mo><mrow><mtext> </mtext><mi mathvariant="normal">m</mi></mrow><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo><mo>…</mo></mrow><annotation encoding="application/x-tex">2\lceil\mathrm{~m} / 2\rceil \ldots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">⌈</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">m</span></span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span></span></span></span> 第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">h</mi></mrow><annotation encoding="application/x-tex">\mathrm{h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">h</span></span></span></span></span> 层 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mo stretchy="false">⌈</mo><mrow><mtext> </mtext><mi mathvariant="normal">m</mi></mrow><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mo>−</mo><mn>2</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2(\lceil\mathrm{~m} / 2\rceil)^{h-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mopen">⌈</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">m</span></span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span> 第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">h</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\mathrm{h}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathrm">h</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 层共有叶子结点（失败结点） <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo stretchy="false">(</mo><mo stretchy="false">⌈</mo><mrow><mtext> </mtext><mi mathvariant="normal">m</mi></mrow><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2(\lceil\mathrm{~m} / 2\rceil)^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mopen">⌈</span><span class="mord"><span class="mspace nobreak"> </span><span class="mord mathrm">m</span></span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个<br>
<mark><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">n</mi></mrow><annotation encoding="application/x-tex">\mathrm{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">n</span></span></span></span></span> 个关键字的B树必有n <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span> 个叶子结点</mark>, 则 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>+</mo><mn>1</mn><mo>≥</mo><mn>2</mn><mo stretchy="false">(</mo><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo><msup><mo stretchy="false">)</mo><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n+1 \geq 2(\lceil m / 2\rceil)^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0991079999999998em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mopen">⌈</span><span class="mord mathdefault">m</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">⌉</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>, 即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>≤</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mrow><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo></mrow></msub><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h \leq \log _{\lceil m / 2\rceil} \frac{n+1}{2}+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2642479999999998em;vertical-align:-0.41913999999999996em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.28086em;"><span style="top:-2.45586em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">⌈</span><span class="mord mathdefault mtight">m</span><span class="mord mtight">/</span><span class="mord mtight">2</span><span class="mclose mtight">⌉</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.41913999999999996em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
</li>
</ul>
<p><strong>B树的插入</strong></p>
<p>核心要求:<br>
①对m阶B树——除根节点外，结点关键字个数[m/2]-1≤n≤m-1</p>
<p>②子树O&lt;关键字1&lt;子树1&lt;关键字2&lt;子树2&lt;…</p>
<p>新元素一定是插入到最底层“终端节点”，用“查找”来确定插入位置</p>
<p><strong>在插入key后，若导致原结点关键字数超过上限，则从中间位置([m/2])将其中的关键字分为两部分，左部分包含的关键字放在原结点中，右部分包含的关键字放到新结点中，中间位置（[m/2])的结点插入原结点的父结点。若此时导致其父结点的关键字个数也超过了上限，则继续进行这种分裂操作，直至这个过程传到根结点为止，进而导致B树高度增1。</strong></p>
<p><a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">可视化</a></p>
<p><strong>B树的删除</strong></p>
<ul>
<li>删除非终端结点关键字
<ul>
<li>用其直接前驱或直接后继替代其位置，转化为对“终端结点”的处理
<ul>
<li>直接前驱：关键字左边指针子树中最右下关键字</li>
<li>直接后继，关键字右边指针子树中最最下关键字</li>
</ul>
</li>
</ul>
</li>
<li>删除终端节点关键字
<ul>
<li>输出后结点个数未低于下限，不需要任何处理</li>
<li>低于下限
<ul>
<li>右兄弟够借，则用当前结点后继、后继的后继依次填补空缺</li>
<li>左兄弟够借，则用当前结点前驱、前驱的前驱依次填补空缺</li>
<li>都不够借，则需要与父结点的关键字、左（右）兄弟的关键字进行合并。合并后导致父结点关键字-1，可能需要再次合并。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="b树-2"><a class="markdownIt-Anchor" href="#b树-2"></a> B+树</h3>
<p>一棵m阶的B+树需满足下列条件：</p>
<ul>
<li>
<p>每个分支结点最多有m棵子树（孩子结点）</p>
</li>
<li>
<p>非叶根结点至少有两棵子树，其他分支结点至少有【m/2】（向上取整）棵</p>
</li>
<li>
<p><strong>结点的子树个数与关键字个数相等</strong></p>
</li>
<li>
<p>所有叶节点包含全部关键字以及指向对应记录的指针，叶节点中将关键字按大小顺序排列，并且相邻叶节点按大小顺序相互连接起来（可以顺序查找）</p>
</li>
<li>
<p>所有分支结点只包含他们子树关键字的最大值以及指向子节点的指针</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311440965.png" alt="image-20220531144036820"></p>
<p>B+树无论查找成功或失败，最终一定会走到最下面一层节点</p>
<p>在B+树中，非叶结点不含有该关键字对应记录的存储地址。可以使一个磁盘块可以包含更多个关键字，使得B+树的阶更大，树高更矮，<strong>读磁盘次数更少，查找更快</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311444734.png" alt="image-20220531144442608"></p>
</li>
</ul>
<h2 id="散列hash查找"><a class="markdownIt-Anchor" href="#散列hash查找"></a> 散列（hash查找）</h2>
<p>散列表（Hash Table），又称哈希表。是一种数据结构，特点是：<strong>数据元素的关键字与其存储地址直接相关。</strong></p>
<p>若不同的关键字通过函数映射到同一个值，则称为<strong>同义词</strong></p>
<p>通过散列函数确定的位置已经存放了其他元素，则称为<strong>冲突</strong></p>
<p><strong>处理冲突的方法</strong></p>
<ul>
<li>
<p>拉链法：把所有同义词存在同一个链表里。</p>
<p>小优化：保持关键字有序 可以提高查找效率。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311449378.png" alt="image-20220531144921268"></p>
<p>​		查找长度——查找过程中，需要对比关键字的次数称为查找长度。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311452980.png" alt="image-20220531145227864"></p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311453872.png" alt="image-20220531145347751"></p>
<ul>
<li>
<p>开放定址法</p>
<ul>
<li>
<p>线性探测法：发生冲突时，每次往后探测相邻的下一个单元</p>
<p>很容易造成同义词、非同义词的聚集、堆积现象，严重影响查找效率。</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311536677.png" alt="image-20220531153625549"></p>
</li>
<li>
<p>平方探测法</p>
<p><img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311534644.png" alt="image-20220531153439538"></p>
</li>
</ul>
</li>
<li>
<p>再散列法</p>
<p>再散列法（再哈希法)∶除了原始的散列函数H(key)之外，多准备几个散列函数,当散列函数冲突时，用下一个散列函数计算一个新地址，直到不冲突为止:<br>
H= RH(Key) i=1,2,3…</p>
</li>
</ul>
<p><strong>注意∶采用“开放定址法&quot;时，删除结点不能简单地将被删结点的空间置为空，否则将截断它之后填入。散列表的同义词结点的查找路径，可以做一个“删除标记”，进行逻辑删除。</strong></p>
<p><strong>常见的散列函数是否为空</strong></p>
<ul>
<li>
<p>除留余数法</p>
<p>散列表长m，则需取一个<strong>不大于m但最接近或等于m的质数</strong>p作为除数，以尽量减少冲突</p>
</li>
<li>
<p>直接定址法——H(key)= key或H(key) = a*key + b</p>
<p>其中，a和b是常数。这种方法计算最简单，且不会产生冲突。它适合关<strong>键字的分布基本连续的情况</strong>，若关键字分布不连续，空位较多，则会造成存储空间的浪费。<img src="https://cdn.jsdelivr.net/gh/girlsdontget341/image@master/img/202205311459201.png" alt="image-20220531145903102"></p>
</li>
<li>
<p>数字分析法——选取数码分布较为均匀的若干位作为散列地址<br>
设关键字是r进制数(如十进制数)，而<strong>r个数码在各位上出现的频率不一定相同，可能在某些位上分布均匀一些</strong>，每种数码出现的机会均等;而在某些位上分布不均匀，只有某几种数码经常出现，此时可选取数码分布较为均匀的若干位作为散列地址。这种方法适合于已知的关键字集合，若更换了关键字，则需要重新构造新的散列函数。</p>
<p>eg：用手机号码后四位作为散列地址</p>
</li>
<li>
<p>平方取中法――取关键字的平方值的中间几位作为散列地址。<br>
具体取多少位要视实际情况而定。这种方法得到的散列地址与关键字的每位都有关系，因此使得散列地址分布比较均匀，适用于关键字的每位取值都不够均匀或均小于散列地址所需的位数。</p>
</li>
</ul>
<p>散列查找是典型的以空间换时间，散列函数合理，散列表越长，冲突概率越低。</p>
<h1 id="8排序"><a class="markdownIt-Anchor" href="#8排序"></a> 8.排序</h1>
<p>排序，就是重新排列表中的元素，使表中的元素满足关键字有序的过程</p>
<p>评价指标依旧为：时间&amp;&amp;空间复杂度</p>
<p><strong>稳定性：若待排序表中有两个元素R1和R2，其对应的关键字相同即key1= key2，且在排序前R1在R2的前面，若使用某一排序算法排序后，R1仍然在R2的前面，则称这个排序算法是稳定的，否则称排序算法是不稳定的。</strong></p>
<p>排序算法的分类</p>
<ul>
<li>内部排序：数据都存在内存中 主要关注如何使算法时间空间、复杂度更低</li>
<li>外部排序：数据太多，无法全部放入内存 还要关注如何使读写磁盘次数更少</li>
</ul>
<h2 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h2>
<p>思想：每次将一个待排序的元素按其关键字大小插入到前面已经排好的子序列中，直到全部记录插入完成。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_Sort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> n)</span><span class="comment">//不带哨兵</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp,j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&lt;s[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            temp = s[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; s[j] &gt; temp; j--)<span class="comment">//找到第一个比s[i]小的元素</span></span><br><span class="line">            &#123;</span><br><span class="line">                s[j + <span class="number">1</span>] = s[j];<span class="comment">//并将大于temp的全部后移.</span></span><br><span class="line">            &#125;</span><br><span class="line">            s[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> n)</span><span class="comment">//带哨兵实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&lt;s[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            s[<span class="number">0</span>]=s[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;s[j]&gt;s[<span class="number">0</span>];j--)<span class="comment">//优点：不用每次循环都判断j&gt;=0</span></span><br><span class="line">            &#123;</span><br><span class="line">                s[j+<span class="number">1</span>]=s[j];</span><br><span class="line">            &#125;</span><br><span class="line">            s[j+<span class="number">1</span>]=s[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>算法效率分析</strong></p>
<ul>
<li>空间复杂度：O(1)</li>
<li>时间复杂度：主要来自于对比关键字，移动若n个元素，则需要n-1躺处理
<ul>
<li>最好情况：所有元素原本就有序，只需对比一次关键字O(N)</li>
<li>最坏情况：元素原本排序为逆序，第i趟对比关键字i+1次，移动元素i+2次（哨兵也算一次） 为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ul>
</li>
<li>稳定性：算法稳定</li>
</ul>
<p><strong>优化</strong></p>
<p>先用折半查找查到要插入的位置，在移动元素</p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220606094135316.png" alt="image-20220606094135316"></p>
<p>当 low&gt;high时折半查找停止，应将[low, i-1]内的元素全部右移，并将A[0]复制到 low所指位置</p>
<p>**保持稳定性：**当A[mid]==A[0]时,为了保证算法的“稳定性”,应继续在 mid 所指位置右边寻找插入位置</p>
<h2 id="希尔排序"><a class="markdownIt-Anchor" href="#希尔排序"></a> 希尔排序</h2>
<p>希尔排序:先将待排序表分割成若干形如L[i, i +d, i + 2d… , i + kd]的“特殊”子表，对各个子表分别进行直接插入排序。缩小增量d，重复上述过程,直到d=1为止。</p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220606095511004.png" alt="image-20220606095511004"></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220606095533579.png" alt="image-20220606095533579"></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220606095547317.png" alt="image-20220606095547317"></p>
<p>建议：每次将增量缩小一半</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d,i,j;</span><br><span class="line">    <span class="keyword">for</span>(d=n/<span class="number">2</span>;d&gt;=<span class="number">1</span>;d/=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=d+<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]&lt;s[i-d])</span><br><span class="line">            &#123;</span><br><span class="line">                s[<span class="number">0</span>]=s[i];<span class="comment">//s0不是哨兵</span></span><br><span class="line">                <span class="keyword">for</span>(j=i-d;j&gt;<span class="number">0</span>&amp;&amp;s[<span class="number">0</span>]&lt;s[j];j-=d)</span><br><span class="line">                &#123;</span><br><span class="line">                    s[j+d]=s[j];</span><br><span class="line">                &#125;</span><br><span class="line">                s[j+d]=s[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>算法效率分析</strong></p>
<ul>
<li>空间复杂度O(1)</li>
<li>时间复杂度：和增量序列d, d2, d3…的选择有关，目前无法用数学手段证明确切的时间复杂度<br>
最坏时间复杂度为O(n2),当n在某个范围内时,可达O(n1.3)</li>
<li>稳定性：<strong>不稳定</strong></li>
</ul>
<h2 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h2>
<p>交换排序</p>
<ul>
<li>冒泡</li>
<li>快排</li>
</ul>
<p>冒泡排序：从后往前(或从前往后)两两比较相邻元素的值，若为逆序(即A[i-1]&gt;A[i])，则交换它们，直到序列比较完。称这样过程为“一趟”冒泡排序。</p>
<p><strong>第一趟排序使关键字值最小的一个元素“冒”到最前面</strong></p>
<p><strong>若某一趟排序没有发生交换 说明已经整体有序</strong></p>
<p>同样适用于链表</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp=a;</span><br><span class="line">    a=b;</span><br><span class="line">    b=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;i;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j<span class="number">-1</span>]&gt;s[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(s[j<span class="number">-1</span>],s[j]);</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag== <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>算法效率分析</strong></p>
<ul>
<li>空间复杂度：O(1)</li>
<li>时间复杂度：
<ul>
<li>最好（有序）：O(n)</li>
<li>最坏：比较次数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><mi mathvariant="normal">n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi mathvariant="normal">n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo>…</mo><mo>+</mo><mn>1</mn><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo></mrow><annotation encoding="application/x-tex">=(\mathrm{n}-1)+(\mathrm{n}-2)+\ldots+1=\frac{n(n-1)}{2}=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span> 交换次数</li>
</ul>
</li>
<li>平均时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
<li>稳定性：稳定</li>
</ul>
<h2 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h2>
<p>算法思想:</p>
<p>在待排序表L[1…n]中任取一个元素pivot作为枢轴（或基准，<strong>通常取首元素</strong>)，通过一趟排序将待排序表划分为独立的两部分L[1…k-1]和L[k+1…n]，使得L[1…k-1]中的所有元素小于pivot,L[k+1…n]中的所有元素大于等于pivot，则pivot放在了其最终位置L(k)上，这个过程称为一次“划分”。然后分别递归地对两个子表重复上述过程，直至每部分内只有一个元素或空为止，即所有元素放在了其最终位置上。</p>
<p><strong>用第一个元素把待排序序列“划分&quot;为两个部分。左边更小,右边更大。该元素的最终位置已确定</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span><span class="comment">//把序列分成左右两部分</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = s[low];</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;s[high]&gt;=pivot)<span class="comment">//注意等号 保证稳定性</span></span><br><span class="line">            high--;</span><br><span class="line">        s[low]=s[high];</span><br><span class="line">        <span class="keyword">while</span>(low&lt;high&amp;&amp;s[low]&lt;=pivot)</span><br><span class="line">            low++;</span><br><span class="line">        s[high]=s[low];</span><br><span class="line">    &#125;</span><br><span class="line">    s[low]=pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="built_in">Partition</span>(s,low,high);</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)<span class="comment">//递归跳出条件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">QuickSort</span>(s,low,p<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">QuickSort</span>(s,p+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220607114613095.png" alt="image-20220607114613095"></p>
<p><strong>算法效率分析</strong></p>
<ul>
<li>时间复杂度
<ul>
<li>最好<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(n \log _{2} n\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li>
<li>最坏O(n)</li>
</ul>
</li>
<li>空间复杂度
<ul>
<li>最好<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( \log _{2} n\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li>
<li>最坏O(n)</li>
</ul>
</li>
<li>稳定性
<ul>
<li>不稳定</li>
</ul>
</li>
</ul>
<p>若每一次选中的“枢轴”将待排序序列划分为很不均匀的两个部分，则会导致递归深度增加，算法效率变低</p>
<p>若初始序列<strong>有序或逆序</strong>，则快速排序的性能<strong>最差</strong>(因为每次选择的都是最靠边的元素)</p>
<h2 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h2>
<p>每一趟在待排序元素中选取关键字最小（最大）的元素加入有序子序列</p>
<h2 id="简单选择排序"><a class="markdownIt-Anchor" href="#简单选择排序"></a> 简单选择排序</h2>
<p>每一趟在待排序元素中选关键字最小的元素加入有序子序列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">easy_Choose</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>+i;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j]&lt;s[min])</span><br><span class="line">                min = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min!=i)</span><br><span class="line">            <span class="built_in">swap</span>(s[min],s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>算法效率分析</strong></p>
<ul>
<li>
<p>空间复杂度：O(1)</p>
</li>
<li>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>无论有序逆序乱序，一定需要n-1次处理</p>
<p>总共需要对比关键字 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi mathvariant="normal">n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi mathvariant="normal">n</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mo>…</mo><mo>+</mo><mn>1</mn><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">(\mathrm{n}-1)+(\mathrm{n}-2)+\ldots+1=\frac{n(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">n</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 次 元素交换次数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>&lt;</mo><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">&lt;n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
</li>
<li>
<p>稳定性：<strong>不稳定</strong></p>
</li>
<li>
<p>适用性：顺序表链表均可适用</p>
</li>
</ul>
<h2 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> <mark>堆排序</mark></h2>
<p>若 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 个关键字序列 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">L</mi><mo stretchy="false">[</mo><mn>1..</mn><mi mathvariant="normal">n</mi></mrow><annotation encoding="application/x-tex">\mathrm{L}[1 . . \mathrm{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">[</span><span class="mord">1</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathrm">n</span></span></span></span></span> ] 满足下面某一条性质, 则称为堆 (Heap) :</p>
<p>(1) 若满足: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">L</mi><mo stretchy="false">(</mo><mi mathvariant="normal">i</mi><mo stretchy="false">)</mo><mo>⩾</mo><mi mathvariant="normal">L</mi><mo stretchy="false">(</mo><mn>2</mn><mi mathvariant="normal">i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathrm{L}(\mathrm{i}) \geqslant \mathrm{L}(2 \mathrm{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">i</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord"><span class="mord mathrm">i</span></span><span class="mclose">)</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">L</mi><mo stretchy="false">(</mo><mi mathvariant="normal">i</mi><mo stretchy="false">)</mo><mo>⩾</mo><mi mathvariant="normal">L</mi><mo stretchy="false">(</mo><mn>2</mn><mi mathvariant="normal">i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mspace width="1em"><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>−</mo><mi mathvariant="normal">一</mi></mspace></mrow><annotation encoding="application/x-tex">\mathrm{L}(\mathrm{i}) \geqslant \mathrm{L}(2 \mathrm{i}+1) \quad(1 \leq i \leq n / 2)-一</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">i</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord"><span class="mord mathrm">i</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">一</span></span></span></span> 大根堆 (大顶堆)</p>
<p>(2) 若满足: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">L</mi><mo stretchy="false">(</mo><mi mathvariant="normal">i</mi><mo stretchy="false">)</mo><mo>⩽</mo><mi mathvariant="normal">L</mi><mo stretchy="false">(</mo><mn>2</mn><mi mathvariant="normal">i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\mathrm{L}(\mathrm{i}) \leqslant \mathrm{L}(2 \mathrm{i})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">i</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord"><span class="mord mathrm">i</span></span><span class="mclose">)</span></span></span></span> 且 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">L</mi><mo stretchy="false">(</mo><mi mathvariant="normal">i</mi><mo stretchy="false">)</mo><mo>⩽</mo><mi mathvariant="normal">L</mi><mo stretchy="false">(</mo><mn>2</mn><mi mathvariant="normal">i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mspace width="1em"><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>−</mo><mo>−</mo></mspace></mrow><annotation encoding="application/x-tex">\mathrm{L}(\mathrm{i}) \leqslant \mathrm{L}(2 \mathrm{i}+1) \quad(1 \leq i \leq n / 2)--</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathrm">i</span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathrm">L</span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord"><span class="mord mathrm">i</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.79549em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord">/</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span></span></span></span> 小根堆 (小顶堆)</p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220608102448740.png" alt="image-20220608102448740"></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220608102502863.png" alt="image-20220608102502863"></p>
<p><strong>建立大根堆</strong></p>
<p>思路:</p>
<ul>
<li>把所有非终端结点都检查一遍,是否满足大根堆的要求，如果不满足，则进行调整</li>
<li>检查当前结点是否满足根≥左、右，若不满足,将当前结点与更大的一个孩子互换</li>
<li>若元素互换破坏了下一级的堆,则采用相同的方法继续往下调整(小元素不断“下坠&quot;)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">headAdjust</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> k, <span class="keyword">int</span> len)</span><span class="comment">//调整以第k个元素为根的子树为大根堆</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>]=s[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>*k;i&lt;=len;i*=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;len&amp;&amp;s[i]&lt;s[i+<span class="number">1</span>])</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>]&gt;=s[i])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s[k]=s[i];</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s[k]=s[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BulidMaxHeap</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> len)</span><span class="comment">//从非终端元素开始构建大根堆</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">headAdjust</span>(s,i,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">BulidMaxHeap</span>(s,len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;<span class="number">1</span>;i--)<span class="comment">//每次交换堆顶与堆底元素位置并重新构建剩余元素大根堆</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(s[<span class="number">1</span>],s[i]);</span><br><span class="line">        <span class="built_in">headAdjust</span>(s,<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>算法效率分析</strong></p>
<ul>
<li>
<p>空间复杂度：O(1)</p>
</li>
<li>
<p>时间复杂度：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mtext> </mtext><mi>n</mi><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(\ nlog _{2} n\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></p>
</li>
<li>
<p>稳定性：不稳定</p>
</li>
</ul>
<p>基于小根堆的排序得到“递减序列”</p>
<p><strong>堆的插入新元素</strong></p>
<p>对于小根堆，新元素放到表尾，与父节点对比,若新元素比父节点更小,则将二者互换。新元素就这样一路“上升”,直到无法继续上升为止</p>
<p><strong>堆中删除元素</strong></p>
<p>被删除的元素用堆底元素替代,然后让该元素不断“下坠”,直到无法下坠为止</p>
<h2 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h2>
<p>把两个或多个已经有序的序列合并成一个</p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220614093838437.png" alt="image-20220614093838437"></p>
<p>只剩一个子表未合并时,可以将该表中剩余元素全部加到总表</p>
<p><strong>结论:m路归并，每选出一个元素需要对比关键字m-1次</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *B =(<span class="keyword">int</span> *) <span class="built_in">malloc</span>(<span class="number">10</span>*<span class="built_in"><span class="keyword">sizeof</span></span> (<span class="keyword">int</span> ));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    <span class="keyword">for</span>(k=low;k&lt;=high;k++)</span><br><span class="line">        B[k]=s[k];</span><br><span class="line">    <span class="keyword">for</span>(i=low,j=mid+<span class="number">1</span>,k=i;i&lt;=mid&amp;&amp;j&lt;=high;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(B[i]&lt;=B[j])</span><br><span class="line">            s[k]=B[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s[k]=B[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid)</span><br><span class="line">        s[k++]=B[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=high)</span><br><span class="line">        s[k++]=B[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> s[],<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">MergeSort</span>(s,low,mid);</span><br><span class="line">        <span class="built_in">MergeSort</span>(s,mid+<span class="number">1</span>,high);</span><br><span class="line">        <span class="built_in">merge</span>(s,low,mid,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>算法效率分析</strong></p>
<p>二叉树的第 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">h</mi></mrow><annotation encoding="application/x-tex">\mathrm{h}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">h</span></span></span></span></span> 层最改有 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个结点 若梠高为h, 则应满足 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n \leq 2^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span><br>
即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mo>−</mo><mn>1</mn><mo>=</mo><mrow><mo fence="true">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">⌉</mo></mrow></mrow><annotation encoding="application/x-tex">h-1=\left\lceil\log _{2} n\right\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">⌉</span></span></span></span></span></p>
<p>结论: n个元素进行2路归并排序, 归并趟数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mrow><mo fence="true">⌈</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">⌉</mo></mrow></mrow><annotation encoding="application/x-tex">=\left\lceil\log _{2} n\right\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">⌉</span></span></span></span></span></p>
<p>每趟归并时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>, 则算法 时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(n \log _{2} n\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></p>
<p>空间复杂度 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">=O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>, 来自于辅助数组 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">B</mi></mrow><annotation encoding="application/x-tex">\mathrm{B}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">B</span></span></span></span></span></p>
<h2 id="基数排序"><a class="markdownIt-Anchor" href="#基数排序"></a> 基数排序</h2>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220622110730152.png" alt="image-20220622110730152"></p>
<p>需要r个辅助队列,<strong>空间复杂度= O®</strong></p>
<p>把关键字拆为d个部分，每个部分可能取得r个值</p>
<p>一趟分配O(n)，一趟收集O®，总共d 趟分配、收集，<strong>总的时间复杂度=O(d(n+r))</strong></p>
<p>稳定性：<strong>稳定</strong></p>
<p>基数排序擅长解决的问题:</p>
<p>①数据元素的关键字可以方便地拆分为d组，且d较小</p>
<p>②每组关键字的取值范围不大，即r较小</p>
<p>③数据元素个数n较大</p>
<h2 id="外部排序"><a class="markdownIt-Anchor" href="#外部排序"></a> 外部排序</h2>
<p>操作系统以“块”为单位对磁盘存储空间进行管理,如:每块大小1KB，各个磁盘块内存放着各种各样的数据。</p>
<p>磁盘的读/写以“块”为单位数据读入内存后才能被修改修改完了还要写回磁盘。</p>
<p>外部排序：数据元素太多，无法一次全部读入内存进行排序</p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220622114141314.png" alt="image-20220622114141314"></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220622114207555.png" alt="image-20220622114207555"></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220622114730052.png" alt="image-20220622114730052"></p>
<p><img src="/2022/03/22/408%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%80%E8%BD%AE%E7%AC%94%E8%AE%B0/image-20220622114843159.png" alt="image-20220622114843159"></p>
]]></content>
      <categories>
        <category>考研</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>考研</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2022/08/04/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-1/</url>
    <content><![CDATA[<h1 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h1>
<h2 id="二分查找"><a class="markdownIt-Anchor" href="#二分查找"></a> 二分查找</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (i+j)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])</span><br><span class="line">                i=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])</span><br><span class="line">                j=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>逻辑实现容易 注意边界（left、right）即i，j的取等</strong></li>
<li>使用前提条件是数组<strong>有序</strong>且<strong>无重复</strong></li>
</ul>
<h3 id="对应题目"><a class="markdownIt-Anchor" href="#对应题目"></a> 对应题目</h3>
<ul>
<li>
<p>[<a href="https://leetcode.cn/problems/binary-search/">704. 二分查找 - 力扣（LeetCode）</a>]:</p>
</li>
<li>
<p>[<a href="https://leetcode.cn/problems/search-insert-position/">35. 搜索插入位置 - 力扣（LeetCode）</a>]:</p>
</li>
<li>
<pre class="highlight"><code class="c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;
    <span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;
    <span class="hljs-keyword">int</span> j=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;
    <span class="hljs-keyword">while</span>(i&lt;=j)
    &#123;
        <span class="hljs-keyword">int</span> mid = (i+j)/<span class="hljs-number">2</span>;
        <span class="hljs-keyword">if</span>(target&gt;nums[mid])
            i=mid+<span class="hljs-number">1</span>;
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(target&lt;nums[mid])
            j=mid<span class="hljs-number">-1</span>;
        <span class="hljs-keyword">else</span>
            <span class="hljs-keyword">return</span> mid;
    &#125;
    <span class="hljs-keyword">return</span> i;<span class="hljs-comment">//区别在于找不到需放在该放的位置</span>
&#125;
&lt;!--code￼<span class="hljs-number">1</span>--&gt;

==重点在于二分法找左右边界即找第一个小于target的数和第一个大于target的数==

</code></pre>
</li>
</ul>
<h2 id="双指针法"><a class="markdownIt-Anchor" href="#双指针法"></a> 双指针法</h2>
<p>[<a href="https://leetcode.cn/problems/remove-element/">27. 移除元素 - 力扣（LeetCode）</a>]:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> fast=<span class="number">0</span>;fast&lt;nums.<span class="built_in">size</span>();fast++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)</span><br><span class="line">            &#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>利用快慢指针的特性，快指针从头遍历，慢指针仅在数组值不等于val时重新对数组赋值</strong></p>
<ul>
<li>
<p>[<a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项 - 力扣（LeetCode）</a>]:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> fast=<span class="number">1</span>;fast&lt;nums.<span class="built_in">size</span>();fast++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=nums[slow])</span><br><span class="line">            &#123;</span><br><span class="line">                nums[++slow]=nums[fast];</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>[<a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977. 有序数组的平方 - 力扣（LeetCode）</a>]:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(size+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>,j=size;i&lt;=j;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]*nums[i]&lt;nums[j]*nums[j])</span><br><span class="line">            &#123;</span><br><span class="line">                r[size--]=nums[j]*nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                r[size--]=nums[i]*nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>思路：从数组首尾分别平方比较填充新数组，直至首尾指针相遇</strong></p>
</li>
</ul>
<h2 id="滑动窗口"><a class="markdownIt-Anchor" href="#滑动窗口"></a> 滑动窗口</h2>
<p>[<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209. 长度最小的子数组 - 力扣（LeetCode）</a>]:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> target, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">10000000</span>;</span><br><span class="line">        <span class="keyword">int</span> length=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;nums.<span class="built_in">size</span>();j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=nums[j];</span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)<span class="comment">//保证窗口内元素满足要求且长度最小</span></span><br><span class="line">            &#123;</span><br><span class="line">                length=j-i+<span class="number">1</span>;</span><br><span class="line">                result=result&gt;length?length:result;</span><br><span class="line">                sum-=nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result==<span class="number">10000000</span>?<span class="number">0</span>:result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数组</tag>
      </tags>
  </entry>
</search>
